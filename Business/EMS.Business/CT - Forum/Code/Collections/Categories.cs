// Generated by Pnyx Generation tool at :06/04/2009 03:46:00 p.m.
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using Condesus.EMS.Business;
using Condesus.EMS.DataAccess;
using Condesus.EMS.Business.Security;

namespace Condesus.EMS.Business.CT.Collections
{
    public class Categories
    {
        private Credential _Credential;

        internal Categories(Credential credential)
        {
            _Credential = credential;
        }


        #region Read Functions
        /// <summary>
        /// Retorna ForumCategories
        /// </summary>
        /// <returns></returns>
        internal Dictionary<Int64, Entities.Category> Items()
        {
            DataAccess.CT.CollaborationTools _dbCollaborationTools = new Condesus.EMS.DataAccess.CT.CollaborationTools();

            //Coleccion para devolver las areas funcionales
            Dictionary<Int64, Entities.Category> _oItems = new Dictionary<Int64, Entities.Category>();

            //Traigo los datos de la base
            IEnumerable<System.Data.Common.DbDataRecord> _record = _dbCollaborationTools.ForumCategories_ReadAll(_Credential.CurrentLanguage.IdLanguage);
            //Se modifica con los datos que realmente se tienen que usar...

            Dictionary<Object, System.Data.Common.DbDataRecord> _recordFilter = new Common.FilterLanguages(_record, "IdCategory", _Credential).Filter();

            //busca si hay mas de un id de area funcional igual (distintos idiomas) y si hay mas, carga solo el del lenguage seleccionado
            foreach (System.Data.Common.DbDataRecord _dbRecord in _recordFilter.Values)
            {
                //Declara e instancia una posicion
                Entities.Category _category = new Entities.Category(Convert.ToInt64(_dbRecord["IdCategory"]), Convert.ToString(_dbRecord["IdLanguage"]), Convert.ToString(_dbRecord["Name"]), Convert.ToString(_dbRecord["Description"]), _Credential);

                //Lo agrego a la coleccion
                _oItems.Add(_category.IdCategory,_category);

            }
            return _oItems;
        }
        /// <summary>
        /// Retorna ForumCategories por ID
        /// </summary>
        /// <param name="IdMessage"></param>
        /// <returns></returns>
        internal Entities.Category Item(Int64 IdCategory)
        {
            DataAccess.CT.CollaborationTools _dbCollaborationTools = new Condesus.EMS.DataAccess.CT.CollaborationTools();

            //Coleccion para devolver las areas funcionales
            Entities.Category _Item = null;

            //Traigo los datos de la base
            IEnumerable<System.Data.Common.DbDataRecord> _record = _dbCollaborationTools.ForumCategories_ReadById(IdCategory, _Credential.CurrentLanguage.IdLanguage);
            //Se modifica con los datos que realmente se tienen que usar...

            Dictionary<Object, System.Data.Common.DbDataRecord> _recordFilter = new Common.FilterLanguages(_record, "IdCategory", _Credential).Filter();

            //busca si hay mas de un id de area funcional igual (distintos idiomas) y si hay mas, carga solo el del lenguage seleccionado
            foreach (System.Data.Common.DbDataRecord _dbRecord in _recordFilter.Values)
            {
                //Declara e instancia una posicion
                _Item = new Entities.Category(Convert.ToInt64(_dbRecord["IdCategory"]), Convert.ToString(_dbRecord["IdLanguage"]), Convert.ToString(_dbRecord["Name"]), Convert.ToString(_dbRecord["Description"]), _Credential);

            }
            return _Item;

        }

        #endregion

        #region Write Functions
        #endregion
    }
        
}

