// Generated by Pnyx Generation tool at :06/04/2009 03:46:02 p.m.
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using Condesus.EMS.Business;
using Condesus.EMS.DataAccess;
using Condesus.EMS.Business.Security;

namespace Condesus.EMS.Business.CT.Collections
{
    internal class Topics
    {
        
        #region Internal properties
        private ICollectionItems _Datasource;
        private Credential _Credential;
        #endregion


        internal Topics(Credential credential) 
        {
            _Credential = credential;
            _Datasource = new TopicsRead.TopicsAll(credential);
        }

        internal Topics(Entities.Category category)
        {
            _Credential = category.Credential;
            _Datasource = new TopicsRead.TopicsByCategory(category);
        }

        internal Topics(Entities.Forum forum)
        {
            _Credential = forum.Credential;
            _Datasource = new TopicsRead.TopicsByForum(forum);
        }

        internal Topics(DS.Entities.Person person)
        {
            _Credential = person.Credential;
            _Datasource = new TopicsRead.TopicsByPerson(person);
        }


        #region Read Functions
        internal Dictionary<Int64, Entities.Topic> Items()
        {
            Dictionary<Int64, Entities.Topic> _items = new Dictionary<Int64, Entities.Topic>();

            IEnumerable<System.Data.Common.DbDataRecord> _record = _Datasource.getItems();

            foreach (System.Data.Common.DbDataRecord _dbRecord in _record)
            {
                Entities.Topic _topic = new Factory.FactoryTopic().CreateTopic(Convert.ToInt64(_dbRecord["IdTopic"]), Convert.ToInt64(_dbRecord["IdForum"]), Convert.ToInt64(_dbRecord["IdCategory"]), Convert.ToInt64(_dbRecord["IdPerson"]), Convert.ToDateTime(_dbRecord["PostedDate"]), Convert.ToString(_dbRecord["Title"]), Convert.ToInt64(_dbRecord["MaxAttachmentSize"]), Convert.ToBoolean(_dbRecord["allowResponses"]), Convert.ToBoolean(_dbRecord["isModerated"]), Convert.ToBoolean(_dbRecord["isActive"]), _Credential);
                _items.Add(_topic.IdTopic, _topic);
            }
            return _items;
        }

        /// <summary>
        /// Retorna ForumMessages por ID
        /// </summary>
        /// <param name="IdMessage"></param>
        /// <returns></returns>
        internal Entities.Topic Item(Int64 idTopic)
        {
            DataAccess.CT.CollaborationTools _dbCollaborationTools = new Condesus.EMS.DataAccess.CT.CollaborationTools();

            Entities.Topic _topic = null;

            IEnumerable<System.Data.Common.DbDataRecord> _record = _dbCollaborationTools.ForumTopics_ReadById(idTopic);

            foreach (System.Data.Common.DbDataRecord _dbRecord in _record)
            {
                _topic = new Factory.FactoryTopic().CreateTopic(Convert.ToInt64(_dbRecord["IdTopic"]), Convert.ToInt64(_dbRecord["IdForum"]), Convert.ToInt64(_dbRecord["IdCategory"]), Convert.ToInt64(_dbRecord["IdPerson"]), Convert.ToDateTime(_dbRecord["PostedDate"]), Convert.ToString(_dbRecord["Title"]), Convert.ToInt64(_dbRecord["MaxAttachmentSize"]), Convert.ToBoolean(_dbRecord["allowResponses"]), Convert.ToBoolean(_dbRecord["isModerated"]), Convert.ToBoolean(_dbRecord["isActive"]), _Credential);
            }

            return _topic;
        }
        #endregion


        #region Write Functions
        //Crea ForumTopics
        internal Entities.Topic Create(Entities.Forum forum, Entities.Category category, String title, Int64 maxAttachmentSize,Boolean allowResponses, Boolean isModerated)
        {
            DataAccess.CT.CollaborationTools _dbCollaborationTools = new Condesus.EMS.DataAccess.CT.CollaborationTools();

            Boolean _isActive = true; //siempre q se da de alta es true
            Int64 _idTopic = _dbCollaborationTools.ForumTopics_Create(forum.IdForum, category.IdCategory, _Credential.User.Person.IdPerson, DateTime.Now, title, maxAttachmentSize, allowResponses, isModerated, _isActive);

            //Log
            DataAccess.Log.Log _dbLog = new Condesus.EMS.DataAccess.Log.Log();
            _dbLog.Create("CT_ForumTopics", "Topics", "Add", "IdTopic=" + _idTopic, _Credential.User.IdPerson);

            return new Factory.FactoryTopic().CreateTopic(_idTopic, forum.IdForum, category.IdCategory, _Credential.User.Person.IdPerson, DateTime.Now, title, maxAttachmentSize, allowResponses, isModerated, _isActive, _Credential);
        }
        internal void Delete(Entities.Topic topic)
        {
            DataAccess.CT.CollaborationTools _dbCollaborationTools = new Condesus.EMS.DataAccess.CT.CollaborationTools();
            //Borra dependencias
            topic.Remove();

            _dbCollaborationTools.ForumTopics_Delete(topic.IdTopic);

            //Log
            DataAccess.Log.Log _dbLog = new Condesus.EMS.DataAccess.Log.Log();
            _dbLog.Create("CT_ForumTopics", "Topics", "Delete", "IdTopic=" + topic.IdTopic, _Credential.User.IdPerson);

        }

        internal void Update(Entities.Topic topic, Entities.Category category, String title, Int64 MaxAttachmentSize, Boolean allowResponses, Boolean isModerated)
        {

            DataAccess.CT.CollaborationTools _dbCollaborationTools = new Condesus.EMS.DataAccess.CT.CollaborationTools();

            _dbCollaborationTools.ForumTopics_Update(topic.IdTopic, category.IdCategory, title, MaxAttachmentSize, allowResponses, isModerated);

            //Log
            DataAccess.Log.Log _dbLog = new Condesus.EMS.DataAccess.Log.Log();
            _dbLog.Create("CT_ForumTopics", "Topics", "Update", "IdTopic=" + topic.IdTopic, _Credential.User.IdPerson);

        }

        internal void Update(Entities.Topic topic, Boolean isActive)
        {

            DataAccess.CT.CollaborationTools _dbCollaborationTools = new Condesus.EMS.DataAccess.CT.CollaborationTools();

            _dbCollaborationTools.ForumTopics_Update(topic.IdTopic, isActive);

            //Log
            DataAccess.Log.Log _dbLog = new Condesus.EMS.DataAccess.Log.Log();
            _dbLog.Create("CT_ForumTopics", "Topics", "Update", "IdTopic=" + topic.IdTopic, _Credential.User.IdPerson);

        }
    }
        #endregion

}

