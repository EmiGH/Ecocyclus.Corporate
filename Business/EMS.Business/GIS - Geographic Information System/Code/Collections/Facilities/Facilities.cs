// Generated by Pnyx Generation tool at :06/04/2009 03:46:02 p.m.
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using Condesus.EMS.Business;
using Condesus.EMS.DataAccess;
using Condesus.EMS.Business.Security;

namespace Condesus.EMS.Business.GIS.Collections
{
    internal class Facilities
    {
        #region Internal properties
        private Credential _Credential;
        private ICollectionItems _Datasource;
        #endregion

        internal Facilities(DS.Entities.Organization organization)
        {
            _Credential = organization.Credential;
            _Datasource = new FacilitiesRead.FacilityByOrganization(organization);
        }

        internal Facilities(GIS.Entities.FacilityType FacilityType)
        {
            _Credential = FacilityType.Credential;
            _Datasource = new FacilitiesRead.FacilityByFacilityType(FacilityType);
        }

        internal Facilities(GIS.Entities.FacilityType FacilityType, PF.Entities.ProcessGroupProcess process)
        {
            _Credential = FacilityType.Credential;
            _Datasource = new FacilitiesRead.FacilityByFacilityTypeAndProcess(FacilityType, process);
        }

        internal Facilities(Credential credential)
        {
            _Credential = credential;
            _Datasource = new FacilitiesRead.FacilityRead(credential);
        }

        internal Facilities(Entities.Site site)
        {
            _Credential = site.Credential;
            _Datasource = new FacilitiesRead.SectorRead(site);
        }
        internal Facilities(PF.Entities.ProcessGroupProcess process)
        {
            _Credential = process.Credential;
            _Datasource = new FacilitiesRead.FacilityByProcess(process);
        }
        internal Facilities(DS.Entities.Dashboard dashboard)
        {
            _Credential = dashboard.Credential;
            _Datasource = new FacilitiesRead.FacilityByDashboard(dashboard);
        }

        //Se usa para el reporte
        internal Facilities(PA.Entities.AccountingActivity accountingActivity, DS.Entities.Organization organization)
        {
            _Credential = accountingActivity.Credential;
            _Datasource = new FacilitiesRead.FacilityByActivity(accountingActivity, organization);
        }

        #region Read Functions
        /// <summary>
        /// Retorna sites
        /// </summary>
        /// <returns></returns>
        internal Dictionary<Int64, Entities.Site> Items()
        {
            Dictionary<Int64, Entities.Site> _items = new Dictionary<Int64, Entities.Site>();

            IEnumerable<System.Data.Common.DbDataRecord> _record = _Datasource.getItems();

            //Se modifica con los datos que realmente se tienen que usar...
            Dictionary<Object, System.Data.Common.DbDataRecord> _recordFilter = new Common.FilterLanguages(_record, "IdFacility", _Credential).Filter();

            foreach (System.Data.Common.DbDataRecord _dbRecord in _recordFilter.Values)
            {
                Entities.Site _Facility = new SiteFactory().CreateFacilitySector(Convert.ToInt64(_dbRecord["IdFacility"]), Convert.ToInt64(_dbRecord["IdOrganization"]), Convert.ToInt64(Common.Common.CastNullValues(_dbRecord["IdParentFacility"], 0)), Convert.ToString(_dbRecord["Coordinate"]), Convert.ToString(_dbRecord["Name"]), Convert.ToString(_dbRecord["Description"]), Convert.ToInt64(Common.Common.CastNullValues(_dbRecord["IdResourcePicture"], 0)), _Credential, Convert.ToInt64(Common.Common.CastNullValues(_dbRecord["IdFacilityType"], 0)), Convert.ToInt64(Common.Common.CastNullValues(_dbRecord["IdGeographicArea"], 0)), Convert.ToBoolean(_dbRecord["Active"]));
                _items.Add(_Facility.IdFacility, _Facility);
            }
            return _items;
        }
        /// <summary>
        /// Retorna facilities
        /// </summary>
        /// <returns></returns>
        internal Dictionary<Int64, Entities.Facility> Facility()
        {
            Dictionary<Int64, Entities.Facility> _items = new Dictionary<Int64, Entities.Facility>();

            IEnumerable<System.Data.Common.DbDataRecord> _record = _Datasource.getItems();

            //Se modifica con los datos que realmente se tienen que usar...
            Dictionary<Object, System.Data.Common.DbDataRecord> _recordFilter = new Common.FilterLanguages(_record, "IdFacility", _Credential).Filter();

            foreach (System.Data.Common.DbDataRecord _dbRecord in _recordFilter.Values)
            {
                Entities.Facility _Facility = new Entities.Facility(Convert.ToInt64(_dbRecord["IdFacility"]), Convert.ToInt64(_dbRecord["IdOrganization"]), Convert.ToString(_dbRecord["Coordinate"]), Convert.ToString(_dbRecord["Name"]), Convert.ToString(_dbRecord["Description"]), Convert.ToInt64(Common.Common.CastNullValues(_dbRecord["IdResourcePicture"], 0)), _Credential, Convert.ToInt64(Common.Common.CastNullValues(_dbRecord["IdFacilityType"], 0)), Convert.ToInt64(Common.Common.CastNullValues(_dbRecord["IdGeographicArea"], 0)), Convert.ToBoolean(_dbRecord["Active"]));
                _items.Add(_Facility.IdFacility, _Facility);
            }
            return _items;
        }
        /// <summary>
        /// Retorna Sectors
        /// </summary>
        /// <returns></returns>
        internal Dictionary<Int64, Entities.Sector> Sectors()
        {
            Dictionary<Int64, Entities.Sector> _items = new Dictionary<Int64, Entities.Sector>();

            IEnumerable<System.Data.Common.DbDataRecord> _record = _Datasource.getItems();

            //Se modifica con los datos que realmente se tienen que usar...
            Dictionary<Object, System.Data.Common.DbDataRecord> _recordFilter = new Common.FilterLanguages(_record, "IdFacility", _Credential).Filter();

            foreach (System.Data.Common.DbDataRecord _dbRecord in _recordFilter.Values)
            {
                Entities.Sector _Sector = new Entities.Sector(Convert.ToInt64(_dbRecord["IdFacility"]), Convert.ToInt64(_dbRecord["IdOrganization"]), Convert.ToInt64(Common.Common.CastNullValues(_dbRecord["IdParentFacility"], 0)), Convert.ToString(_dbRecord["Coordinate"]), Convert.ToString(_dbRecord["Name"]), Convert.ToString(_dbRecord["Description"]), Convert.ToInt64(Common.Common.CastNullValues(_dbRecord["IdResourcePicture"], 0)), _Credential, Convert.ToInt64(Common.Common.CastNullValues(_dbRecord["IdFacilityType"], 0)), Convert.ToInt64(Common.Common.CastNullValues(_dbRecord["IdGeographicArea"], 0)), Convert.ToBoolean(_dbRecord["Active"]));
                _items.Add(_Sector.IdFacility, _Sector);
            }
            return _items;
        }

        /// <summary>
        /// Retorna Sites para un Faciliy
        /// </summary>
        /// <returns></returns>
        internal Dictionary<Int64, Entities.Site> SitesByFacilityType(Entities.FacilityType facilityType)
        {
            Dictionary<Int64, Entities.Site> _items = new Dictionary<Int64, Entities.Site>();

            DataAccess.GIS.GeographicInformationSystem _dbGeographicInformationSystem = new Condesus.EMS.DataAccess.GIS.GeographicInformationSystem();

            IEnumerable<System.Data.Common.DbDataRecord> _record = _dbGeographicInformationSystem.Sites_ReadByFacilityType(facilityType.IdFacilityType, facilityType.Credential.CurrentLanguage.IdLanguage);

            //Se modifica con los datos que realmente se tienen que usar...
            Dictionary<Object, System.Data.Common.DbDataRecord> _recordFilter = new Common.FilterLanguages(_record, "IdFacility", _Credential).Filter();

            foreach (System.Data.Common.DbDataRecord _dbRecord in _recordFilter.Values)
            {
                Entities.Site _Site = new SiteFactory().CreateFacilitySector(Convert.ToInt64(_dbRecord["IdFacility"]), Convert.ToInt64(_dbRecord["IdOrganization"]), Convert.ToInt64(Common.Common.CastNullValues(_dbRecord["IdParentFacility"], 0)), Convert.ToString(_dbRecord["Coordinate"]), Convert.ToString(_dbRecord["Name"]), Convert.ToString(_dbRecord["Description"]), Convert.ToInt64(Common.Common.CastNullValues(_dbRecord["IdResourcePicture"], 0)), _Credential, Convert.ToInt64(Common.Common.CastNullValues(_dbRecord["IdFacilityType"], 0)), Convert.ToInt64(Common.Common.CastNullValues(_dbRecord["IdGeographicArea"], 0)), Convert.ToBoolean(_dbRecord["Active"]));
                _items.Add(_Site.IdFacility, _Site);
            }
            return _items;
        }
        internal Dictionary<Int64, Entities.Sector> SectorBySiteAndFacilityType(Entities.Site site, Entities.FacilityType facilityType)
        {
            Dictionary<Int64, Entities.Sector> _items = new Dictionary<Int64, Entities.Sector>();

            DataAccess.GIS.GeographicInformationSystem _dbGeographicInformationSystem = new Condesus.EMS.DataAccess.GIS.GeographicInformationSystem();

            IEnumerable<System.Data.Common.DbDataRecord> _record = _dbGeographicInformationSystem.Sites_ReadSectorBySiteAndFacilityType(site.IdFacility, facilityType.IdFacilityType, facilityType.Credential.CurrentLanguage.IdLanguage);

            //Se modifica con los datos que realmente se tienen que usar...
            Dictionary<Object, System.Data.Common.DbDataRecord> _recordFilter = new Common.FilterLanguages(_record, "IdFacility", _Credential).Filter();

            foreach (System.Data.Common.DbDataRecord _dbRecord in _recordFilter.Values)
            {
                Entities.Sector _Site = new Entities.Sector(Convert.ToInt64(_dbRecord["IdFacility"]), Convert.ToInt64(_dbRecord["IdOrganization"]), Convert.ToInt64(Common.Common.CastNullValues(_dbRecord["IdParentFacility"], 0)), Convert.ToString(_dbRecord["Coordinate"]), Convert.ToString(_dbRecord["Name"]), Convert.ToString(_dbRecord["Description"]), Convert.ToInt64(Common.Common.CastNullValues(_dbRecord["IdResourcePicture"], 0)), _Credential, Convert.ToInt64(Common.Common.CastNullValues(_dbRecord["IdFacilityType"], 0)), Convert.ToInt64(Common.Common.CastNullValues(_dbRecord["IdGeographicArea"], 0)), Convert.ToBoolean(_dbRecord["Active"]));
                _items.Add(_Site.IdFacility, _Site);
            }
            return _items;
        }

        /// <summary>
        /// Retorna ForumForums por ID
        /// </summary>
        /// <param name="IdMessage"></param>
        /// <returns></returns>
        internal Entities.Site Item(Int64 IdFacility)
        {
            DataAccess.GIS.GeographicInformationSystem _dbGeographicInformationSystem = new Condesus.EMS.DataAccess.GIS.GeographicInformationSystem();

            Entities.Site _Facility = null;
            IEnumerable<System.Data.Common.DbDataRecord> _record = _dbGeographicInformationSystem.Sites_ReadById(IdFacility, _Credential.CurrentLanguage.IdLanguage);
            //Se modifica con los datos que realmente se tienen que usar...
            Dictionary<Object, System.Data.Common.DbDataRecord> _recordFilter = new Common.FilterLanguages(_record, "IdFacility", _Credential).Filter();

            //si no trae nada retorno 0 para que no de error
            foreach (System.Data.Common.DbDataRecord _dbRecord in _recordFilter.Values)
            {
                _Facility = new SiteFactory().CreateFacilitySector(Convert.ToInt64(_dbRecord["IdFacility"]), Convert.ToInt64(_dbRecord["IdOrganization"]), Convert.ToInt64(Common.Common.CastNullValues(_dbRecord["IdParentFacility"], 0)), Convert.ToString(_dbRecord["Coordinate"]), Convert.ToString(_dbRecord["Name"]), Convert.ToString(_dbRecord["Description"]), Convert.ToInt64(Common.Common.CastNullValues(_dbRecord["IdResourcePicture"], 0)), _Credential, Convert.ToInt64(Common.Common.CastNullValues(_dbRecord["IdFacilityType"], 0)), Convert.ToInt64(Common.Common.CastNullValues(_dbRecord["IdGeographicArea"], 0)), Convert.ToBoolean(_dbRecord["Active"]));
            }
            return _Facility;
        }

        internal Decimal ReadTotalMeasurementResultByIndicator(PA.Entities.AccountingScope scope, Entities.Facility facility, PA.Entities.AccountingActivity activity, PA.Entities.Indicator indicatorColumnGas, DateTime? startDate, DateTime? endDate)
        {
            DataAccess.GIS.GeographicInformationSystem _dbGeographicInformationSystem = new Condesus.EMS.DataAccess.GIS.GeographicInformationSystem();

            Decimal _result = 0;

            DateTime _startdate = startDate == null ? (DateTime)System.Data.SqlTypes.SqlDateTime.MinValue : (DateTime)startDate;
            DateTime _endDate = endDate == null ? (DateTime)System.Data.SqlTypes.SqlDateTime.MaxValue : (DateTime)endDate;

            IEnumerable<System.Data.Common.DbDataRecord> _record = _dbGeographicInformationSystem.Sites_ReadTotalMeasurementResultByIndicator(scope.IdScope, facility.IdFacility, activity.IdActivity, indicatorColumnGas.IdIndicator, _startdate, _endDate);

            //si no trae nada retorno 0 para que no de error
            foreach (System.Data.Common.DbDataRecord _dbRecord in _record)
            {
                _result = Convert.ToDecimal(Common.Common.CastNullValues(_dbRecord["Result"], 0.0));
            }
            return _result;
        }

        #endregion


        #region Write Functions
        //Crea un facility
        internal Entities.Facility Add(DS.Entities.Organization organization, String coordinate, String name, String description, KC.Entities.ResourceCatalog resourcePicture, Entities.FacilityType facilityType, Entities.GeographicArea geograpicArea, Boolean active)
        {
            //Objeto de data layer para acceder a datos
            DataAccess.GIS.GeographicInformationSystem _dbGeographicInformationSystem = new Condesus.EMS.DataAccess.GIS.GeographicInformationSystem();

            Int64 _idParentFacility = 0; //un facility no tiene parent
            Int64 _idResourcePicture = resourcePicture == null ? 0 : resourcePicture.IdResource;
            Int64 _idGeographicArea = geograpicArea == null ? 0 : geograpicArea.IdGeographicArea;

            //ejecuta el insert y devuelve el identificador que le asigno en la base de datos
            Int64 _idFacility = _dbGeographicInformationSystem.Sites_Create(_idParentFacility, organization.IdOrganization, coordinate, _idResourcePicture, _idGeographicArea, facilityType.IdFacilityType, active);
            //alta del lg
            _dbGeographicInformationSystem.Sites_LG_Create(_idFacility, _Credential.DefaultLanguage.IdLanguage, name, description);
            //crea el objeto 
            Entities.Facility _Facility = new Entities.Facility(_idFacility, organization.IdOrganization, coordinate, name, description, _idResourcePicture, _Credential, facilityType.IdFacilityType, _idGeographicArea, active);

            DataAccess.Log.Log _dbLog = new Condesus.EMS.DataAccess.Log.Log();
            _dbLog.Create("GIS_Facilities", "Facilities", "Add", "IdFacility=" + _idFacility, _Credential.User.IdPerson);

            return _Facility;

        }
        //Crea un sector
        internal Entities.Sector Add(Entities.Site parent, String coordinate, String name, String description, KC.Entities.ResourceCatalog resourcePicture, Entities.FacilityType facilityType, Boolean active)
        {
            //Objeto de data layer para acceder a datos
            DataAccess.GIS.GeographicInformationSystem _dbGeographicInformationSystem = new Condesus.EMS.DataAccess.GIS.GeographicInformationSystem();


            String _coordinate = coordinate == "" ? parent.Coordinate : coordinate;
            Int64 _idResourcePicture = resourcePicture == null ? 0 : resourcePicture.IdResource;
            Int64 _idFacilityType = facilityType.IdFacilityType == 0 ? parent.IdFacilityType : facilityType.IdFacilityType; 
            Int64 _idGeographicArea = parent.IdGeographicArea;

            //ejecuta el insert y devuelve el identificador que le asigno en la base de datos
            Int64 _idSector = _dbGeographicInformationSystem.Sites_Create(parent.IdFacility, parent.IdOrganization, _coordinate, _idResourcePicture, _idGeographicArea, _idFacilityType, active);
            //alta del lg
            _dbGeographicInformationSystem.Sites_LG_Create(_idSector, _Credential.DefaultLanguage.IdLanguage, name, description);
            //crea el objeto 
            Entities.Sector _Sector = new Entities.Sector(_idSector, parent.IdOrganization, parent.IdFacility, _coordinate, name, description, _idResourcePicture, _Credential, _idFacilityType, _idGeographicArea, active);

            DataAccess.Log.Log _dbLog = new Condesus.EMS.DataAccess.Log.Log();
            _dbLog.Create("GIS_Facilities", "Facilities", "Add", "IdFacility=" + _idSector, _Credential.User.IdPerson);

            return _Sector;

        }
        internal void Remove(Entities.Site site)
        {
            DataAccess.GIS.GeographicInformationSystem _dbGeographicInformationSystem = new Condesus.EMS.DataAccess.GIS.GeographicInformationSystem();

            //Borra dependencias 
            site.Remove();

            _dbGeographicInformationSystem.Sites_Delete(site.IdFacility);

            DataAccess.Log.Log _dbLog = new Condesus.EMS.DataAccess.Log.Log();
            _dbLog.Create("GIS_Facilities", "Facilities", "Delete", "IdFacility=" + site.IdFacility, _Credential.User.IdPerson);

        }
        //Modify para un facility
        internal void Modify(Entities.Facility facility, DS.Entities.Organization organization, String coordinate, String name, String description, KC.Entities.ResourceCatalog resourcePicture, Entities.FacilityType facilityType, Entities.GeographicArea geograpicArea, Boolean active)
        {
            DataAccess.GIS.GeographicInformationSystem _dbGeographicInformationSystem = new Condesus.EMS.DataAccess.GIS.GeographicInformationSystem();

            Int64 _idResourcePicture = resourcePicture == null ? 0 : resourcePicture.IdResource;
            Int64 _idParentFacility = 0; //un facility no tiene parent
            Int64 _idGeographicArea = geograpicArea == null ? 0 : geograpicArea.IdGeographicArea;

            _dbGeographicInformationSystem.Sites_LG_Update(facility.IdFacility, facility.Credential.DefaultLanguage.IdLanguage, name, description);

            _dbGeographicInformationSystem.Sites_Update(facility.IdFacility, _idParentFacility, organization.IdOrganization, coordinate, _idResourcePicture, _idGeographicArea, facilityType.IdFacilityType, active);
            DataAccess.Log.Log _dbLog = new Condesus.EMS.DataAccess.Log.Log();
            _dbLog.Create("GIS_Facilities", "Facilities", "Update", "IdFacility=" + facility.IdFacility, _Credential.User.IdPerson);

        }
        //modify para un sector
        internal void Modify(Entities.Sector sector, Entities.Site parent, String coordinate, String name, String description, KC.Entities.ResourceCatalog resourcePicture, Entities.FacilityType facilityType, Int64 idGeographicArea, Boolean active)
        {
            DataAccess.GIS.GeographicInformationSystem _dbGeographicInformationSystem = new Condesus.EMS.DataAccess.GIS.GeographicInformationSystem();

            Int64 _idResourcePicture = resourcePicture == null ? 0 : resourcePicture.IdResource;
            Int64 _idFacilityType = facilityType.IdFacilityType == 0 ? parent.IdFacility : facilityType.IdFacilityType; 
            Int64 _IdFacilityParent = parent == null ? 0 : parent.IdFacility;
            Int64 _idGeographicArea = idGeographicArea;
            String _coordinate = coordinate == "" ? parent.Coordinate : coordinate;

            _dbGeographicInformationSystem.Sites_LG_Update(sector.IdFacility, sector.Credential.DefaultLanguage.IdLanguage, name, description);

            _dbGeographicInformationSystem.Sites_Update(sector.IdFacility, _IdFacilityParent, sector.IdOrganization, _coordinate, _idResourcePicture, _idGeographicArea, _idFacilityType, active);
            DataAccess.Log.Log _dbLog = new Condesus.EMS.DataAccess.Log.Log();
            _dbLog.Create("GIS_Facilities", "Facilities", "Update", "IdFacility=" + sector.IdFacility, _Credential.User.IdPerson);

        }

        //internal void Modify(Entities.Sector sector, Entities.Site parent, String coordinate, String name, String description, KC.Entities.ResourceCatalog resourcePicture)
        //{
        //    DataAccess.GIS.GeographicInformationSystem _dbGeographicInformationSystem = new Condesus.EMS.DataAccess.GIS.GeographicInformationSystem();

        //    Int64 _idResourcePicture = resourcePicture == null ? 0 : resourcePicture.IdResource;
        //    Int64 _idFacilityType = 0; //los sectores no tienen type
        //    Int64 _IdFacilityParent = parent == null ? 0 : parent.IdFacility;
        //    Int64 _idGeographicArea = 0;

        //    _dbGeographicInformationSystem.Sites_LG_Update(sector.IdFacility, sector.Credential.DefaultLanguage.IdLanguage, name, description);

        //    _dbGeographicInformationSystem.Sites_Update(sector.IdFacility, _IdFacilityParent, sector.IdOrganization, coordinate, _idResourcePicture, _idGeographicArea, _idFacilityType);
        //    DataAccess.Log.Log _dbLog = new Condesus.EMS.DataAccess.Log.Log();
        //    _dbLog.Create("GIS_Facilities", "Facilities", "Update", "IdFacility=" + sector.IdFacility, _Credential.User.IdPerson);

        //}

        #endregion

    }
}