// Generated by Pnyx Generation tool at :06/04/2009 03:46:02 p.m.
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using Condesus.EMS.Business;
using Condesus.EMS.DataAccess;
using Condesus.EMS.Business.Security;

namespace Condesus.EMS.Business.GIS.Collections
{
    internal class GeographicAreas
    {
        #region Internal properties
        private Credential _Credential;
        private ICollectionItems _Datasource;
        #endregion

        //internal GeographicAreas(Credential credential) 
        //{
        //    _Credential = credential;
        //    _Datasource = new GeographicAreasRead.GeographicAreasAll(credential);
        //}

        internal GeographicAreas(Credential credential)
        {
            _Credential = credential;
            _Datasource = new GeographicAreasRead.GeographicAreasRoot(credential);
        }

        internal GeographicAreas(Entities.GeographicArea geographicArea) 
        {
            _Credential = geographicArea.Credential;
            _Datasource= new GeographicAreasRead.GeographicAreasByGeographicArea(geographicArea);
        }

        #region Read Functions
        /// <summary>
        /// Retorna ForumForums
        /// </summary>
        /// <returns></returns>
        internal Dictionary<Int64, Entities.GeographicArea> Items()
        {
            Dictionary<Int64, Entities.GeographicArea> _items = new Dictionary<Int64, Entities.GeographicArea>();

            IEnumerable<System.Data.Common.DbDataRecord> _record = _Datasource.getItems();

            //Se modifica con los datos que realmente se tienen que usar...
            Dictionary<Object, System.Data.Common.DbDataRecord> _recordFilter = new Common.FilterLanguages(_record, "IdGeographicArea", _Credential).Filter();

            foreach (System.Data.Common.DbDataRecord _dbRecord in _recordFilter.Values)
            {
                Entities.GeographicArea _geographicArea = new Entities.GeographicArea(Convert.ToInt64(_dbRecord["IdGeographicArea"]), Convert.ToInt64(Common.Common.CastNullValues(_dbRecord["IdParentGeographicArea"], 0)), Convert.ToString(_dbRecord["Coordinate"]), Convert.ToInt64(Common.Common.CastNullValues(_dbRecord["IdOrganization"], 0)), Convert.ToString(_dbRecord["ISOCode"]), Convert.ToString(_dbRecord["Layer"]), Convert.ToString(_dbRecord["Name"]), Convert.ToString(_dbRecord["Description"]), _Credential);
                _items.Add(_geographicArea.IdGeographicArea, _geographicArea);
            }
            return _items;
        }


        /// <summary>
        /// Retorna ForumForums por ID
        /// </summary>
        /// <param name="IdMessage"></param>
        /// <returns></returns>
        internal Entities.GeographicArea Item(Int64 IdGeographicArea)
        {
            DataAccess.GIS.GeographicInformationSystem _dbGeographicInformationSystem = new Condesus.EMS.DataAccess.GIS.GeographicInformationSystem();

            Entities.GeographicArea _geographicArea = null;
            IEnumerable<System.Data.Common.DbDataRecord> _record = _dbGeographicInformationSystem.GeographicAreas_ReadById(IdGeographicArea, _Credential.CurrentLanguage.IdLanguage);
            //Se modifica con los datos que realmente se tienen que usar...
            Dictionary<Object, System.Data.Common.DbDataRecord> _recordFilter = new Common.FilterLanguages(_record, "IdGeographicArea", _Credential).Filter();

            //si no trae nada retorno 0 para que no de error
            foreach (System.Data.Common.DbDataRecord _dbRecord in _recordFilter.Values)
            {
                _geographicArea = new Entities.GeographicArea(Convert.ToInt64(_dbRecord["IdGeographicArea"]), Convert.ToInt64(Common.Common.CastNullValues(_dbRecord["IdParentGeographicArea"], 0)), Convert.ToString(_dbRecord["Coordinate"]), Convert.ToInt64(Common.Common.CastNullValues(_dbRecord["IdOrganization"], 0)), Convert.ToString(_dbRecord["ISOCode"]), Convert.ToString(_dbRecord["Layer"]), Convert.ToString(_dbRecord["Name"]), Convert.ToString(_dbRecord["Description"]), _Credential);
            }
            return _geographicArea;    
        }

        #endregion


        #region Write Functions
        //Crea areageografica con padre
        internal Entities.GeographicArea Add(Entities.GeographicArea parentGeographicArea, String coordinate, String isoCode, DS.Entities.Organization organization, String name, String description, String Layer)
        {
            //Objeto de data layer para acceder a datos
            DataAccess.GIS.GeographicInformationSystem _dbGeographicInformationSystem = new Condesus.EMS.DataAccess.GIS.GeographicInformationSystem();

            //Validacion de Objet null
            Int64 _idParent = parentGeographicArea == null ? 0 : parentGeographicArea.IdGeographicArea;
            Int64 _idOrganization = organization == null ? 0 : organization.IdOrganization;

            //ejecuta el insert y devuelve el identificador que le asigno en la base de datos
            Int64 _idGeographicArea = _dbGeographicInformationSystem.GeographicAreas_Create(_idParent,coordinate,isoCode, _idOrganization, Layer);
            //alta del lg
            _dbGeographicInformationSystem.GeographicAreas_LG_Create(_idGeographicArea, _Credential.DefaultLanguage.IdLanguage,name, description);
            //crea el objeto 
            Entities.GeographicArea _geographicArea = new Entities.GeographicArea(_idGeographicArea, _idParent, coordinate, _idOrganization, isoCode,  Layer, name, description, _Credential);
            
            DataAccess.Log.Log _dbLog = new Condesus.EMS.DataAccess.Log.Log();
            _dbLog.Create("GIS_GeographicAreas", "GeographicAreas", "Add", "IdGeographicArea=" + _idGeographicArea, _Credential.User.IdPerson);

            return _geographicArea;

        }
        internal void Remove(Entities.GeographicArea geographicArea)
        {
            DataAccess.GIS.GeographicInformationSystem _dbGeographicInformationSystem = new Condesus.EMS.DataAccess.GIS.GeographicInformationSystem();

            //Borra dependencias 
            geographicArea.Remove();

            _dbGeographicInformationSystem.GeographicAreas_Delete(geographicArea.IdGeographicArea);
            
            DataAccess.Log.Log _dbLog = new Condesus.EMS.DataAccess.Log.Log();
            _dbLog.Create("GIS_GeographicAreas", "GeographicAreas", "Delete", "IdGeographicArea=" + geographicArea.IdGeographicArea, _Credential.User.IdPerson);

        }

        internal void Modify(Entities.GeographicArea geographicArea, Entities.GeographicArea parentGeographicArea, String coordinate, String isoCode, DS.Entities.Organization organization, String name, String description, String Layer)
        {
            DataAccess.GIS.GeographicInformationSystem _dbGeographicInformationSystem = new Condesus.EMS.DataAccess.GIS.GeographicInformationSystem();

            //Validacion de Objet null
            Int64 _idParent = parentGeographicArea == null ? 0 : parentGeographicArea.IdGeographicArea;
            Int64 _idOrganization = organization == null ? 0 : organization.IdOrganization;

            _dbGeographicInformationSystem.GeographicAreas_LG_Update(geographicArea.IdGeographicArea, geographicArea.Credential.DefaultLanguage.IdLanguage, name,description);

            _dbGeographicInformationSystem.GeographicAreas_Update(geographicArea.IdGeographicArea,_idParent, coordinate, isoCode, _idOrganization, Layer);

            DataAccess.Log.Log _dbLog = new Condesus.EMS.DataAccess.Log.Log();
            _dbLog.Create("GIS_GeographicAreas", "GeographicAreas", "Update", "IdGeographicArea=" + geographicArea.IdGeographicArea, _Credential.User.IdPerson);

        }
        internal void ModifyDeleteOrganization(DS.Entities.Organization organization)
        {
            DataAccess.GIS.GeographicInformationSystem _dbGeographicInformationSystem = new Condesus.EMS.DataAccess.GIS.GeographicInformationSystem();

            _dbGeographicInformationSystem.GeographicAreas_Update(organization.IdOrganization);

        }

    }
        #endregion
}

