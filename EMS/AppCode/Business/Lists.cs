using System;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using System.Web;
using System.Data;
using Condesus.EMS.Business.GIS.Entities;
using Condesus.EMS.Business.DS.Entities;
using Condesus.EMS.Business.PF.Entities;
using Condesus.EMS.Business.PA.Entities;
using Condesus.EMS.Business.IA.Entities;
using Condesus.EMS.Business.RM.Entities;
using Condesus.EMS.Business.EP.Entities;
using Condesus.EMS.Business.RG.Entities;
using System.Reflection;
using System.Globalization;
using System.Threading;

namespace Condesus.EMS.WebUI.Business
{
    public partial class Collections : Base
    {
        #region Internal Properties
            private Dictionary<Int64, AccountingActivity> _AccountingActivitiesParents = new Dictionary<Int64, AccountingActivity>();
            private Dictionary<Int64, AccountingActivity> _AccountingActivities = new Dictionary<Int64, AccountingActivity>();
        #endregion

        #region Private Methods
            /// <summary>
            /// Este metodo permite ejecutar el metodo por Reflection de una entidad especifica y setea todos los parametros
            /// para pasarle a una celda de tipo ValueLink.
            /// </summary>
            /// <param name="methodName">Nombre del metodo publico que ira a buscar por Reflection</param>
            /// <param name="param">Parametros que necesite el metodo</param>
            public String GetValueLink(String methodName, Dictionary<String, Object> param)
            {
                return (String)new Condesus.EMS.WebUI.Business.Entities(methodName + "_ValueLink").Execute(param);
            }
        #endregion

        //Aca estan los metodos que retornan DataTables de cada Entidad.
        #region Public Methods (Esta clase contiene todos los metodos publicos de Entidades Planas)

        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion Abecedario.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable Alphabet(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("Alphabet");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdLetter;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdLetter", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Letter;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Letter", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            String _permissionType = String.Empty;
            //Obtiene el permiso que tiene el usuario para esa organizacion.
            if (EMSLibrary.User.DirectoryServices.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
            { _permissionType = Common.Constants.PermissionManageName; }
            else
            { _permissionType = Common.Constants.PermissionViewName; }

            for (int i = 65; i < 91; i++)
			{
                String _letter = Char.ConvertFromUtf32(i);
                _dt.Rows.Add(_letter, _letter, _permissionType);
			}

            //Retorna el DataTable
            return _dt;
        }
        public DataTable TaskState(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("TaskState");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = "IdState";
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdState", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.State;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "State", _columnOptions);


            _dt.Rows.Add("Finished", Condesus.EMS.Business.Common.Resources.ConstantMessage.ProcessState_Finished);
            _dt.Rows.Add("OverDue", Condesus.EMS.Business.Common.Resources.ConstantMessage.ProcessState_OverDue);
            _dt.Rows.Add("Planned", Condesus.EMS.Business.Common.Resources.ConstantMessage.ProcessState_Planned);
            _dt.Rows.Add("Working", Condesus.EMS.Business.Common.Resources.ConstantMessage.ProcessState_Working);

            //Retorna el DataTable
            return _dt;
        }


        #region Directory Service

        #region Applicabilities
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion Applicability.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable Applicabilities(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("Applicability");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdApplicability;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdApplicability", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Applicability;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                //Ya esta armado el DataTable, ahora lo carga
                foreach (ApplicabilityContactType _applicabilityContactType in EMSLibrary.User.DirectoryServices.Configuration.ApplicabilityContactTypes().Values)
                {
                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (EMSLibrary.User.DirectoryServices.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    _dt.Rows.Add(_applicabilityContactType.IdApplicabilityContactType, _applicabilityContactType.LanguageOption.Name, _permissionType);
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del Applicability.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable Applicability(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("Applicability");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

            //Obtiene el Applicability
            Int64 _idApplicability = Convert.ToInt64(param["IdApplicability"]);
            //Int64 _idContactType = Convert.ToInt64(param["IdContactType"]);

            ApplicabilityContactType _applicabilityContactType = EMSLibrary.User.DirectoryServices.Configuration.ApplicabilityContactType(_idApplicability);

            //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
            _dt.ExtendedProperties.Add("PageTitle", _applicabilityContactType.LanguageOption.Name);

            //Carga los datos
            //_dt.Rows.Add(Resources.CommonListManage.IdApplicability, _applicabilityContactType.IdApplicabilityContactType);
            _dt.Rows.Add(Resources.CommonListManage.LanguageName, _applicabilityContactType.LanguageOption.Language.Name);
            _dt.Rows.Add(Resources.CommonListManage.Name, _applicabilityContactType.LanguageOption.Name);

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        #region Addresses
            /// <summary>
            /// Construye el DataTable a modo List con los datos de la Coleccion Contact Addresses.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable Addresses(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable("Address");

                //Contruye las columnas y sus atributos.
                ColumnOptions _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdAddress;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdAddress", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdGeographicArea;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdGeographicArea", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdOrganization;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdOrganization", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Addresses;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = true;
                _columnOptions.IsContextMenuCaption = true;
                _columnOptions.IsSortedBy = true;
                BuildColumnsDataTable(ref _dt, "Street", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.GeographicArea;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = true;
                _columnOptions.IsContextMenuCaption = false;
                _columnOptions.IsSortedBy = false;
                BuildColumnsDataTable(ref _dt, "GeographicArea", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.ZipCode;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = true;
                _columnOptions.IsContextMenuCaption = false;
                _columnOptions.IsSortedBy = false;
                BuildColumnsDataTable(ref _dt, "ZipCode", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

                //Cuando implementemos la opcion de traer todo en un filtro.
                Boolean _showAll = false;
                if (ValidateSelectedItemComboBox(param, ref _showAll))
                {
                    try
                    {
                        if (param.ContainsKey("ParentEntity"))
                        {
                            String _parentEntity = param["ParentEntity"].ToString();
                            Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
                            Int64 _idFacility = 0;
                            Int64 _idSector = 0;
                            Int64 _idPerson = 0;

                            Dictionary<Int64, Address> _contactAdresses = null;
                            Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);

                            switch (_parentEntity)
                            {
                                case "Sector":
                                    //Se agregan 2 columnas mas...
                                    _columnOptions = new ColumnOptions();
                                    _columnOptions.ColumnCaption = Resources.CommonListManage.IdFacility;
                                    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                                    _columnOptions.IsPrimaryKey = true;
                                    _columnOptions.DisplayInCombo = false;
                                    _columnOptions.DisplayInManage = false;
                                    _columnOptions.IsSearchable = false;
                                    _columnOptions.AllowNull = false;
                                    BuildColumnsDataTable(ref _dt, "IdFacility", _columnOptions);

                                    _columnOptions = new ColumnOptions();
                                    _columnOptions.ColumnCaption = Resources.CommonListManage.IdSector;
                                    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                                    _columnOptions.IsPrimaryKey = true;
                                    _columnOptions.DisplayInCombo = false;
                                    _columnOptions.DisplayInManage = false;
                                    _columnOptions.IsSearchable = false;
                                    _columnOptions.AllowNull = false;
                                    BuildColumnsDataTable(ref _dt, "IdSector", _columnOptions);

                                    _idFacility = Convert.ToInt64(param["IdFacility"]);
                                    _idSector = Convert.ToInt64(param["IdSector"]);
                                    _contactAdresses = _organization.Facility(_idFacility).Sector(_idSector).Addresses;
                                    break;
                                case "Facility":
                                    //Se agrega 1 columnas mas...
                                    _columnOptions = new ColumnOptions();
                                    _columnOptions.ColumnCaption = Resources.CommonListManage.IdFacility;
                                    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                                    _columnOptions.IsPrimaryKey = true;
                                    _columnOptions.DisplayInCombo = false;
                                    _columnOptions.DisplayInManage = false;
                                    _columnOptions.IsSearchable = false;
                                    _columnOptions.AllowNull = false;
                                    BuildColumnsDataTable(ref _dt, "IdFacility", _columnOptions);

                                    _idFacility = Convert.ToInt64(param["IdFacility"]);
                                    _contactAdresses = _organization.Facility(_idFacility).Addresses;
                                    break;
                                case "Person":
                                    //Se agrega 1 columnas mas...
                                    _columnOptions = new ColumnOptions();
                                    _columnOptions.ColumnCaption = Resources.CommonListManage.IdPerson;
                                    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                                    _columnOptions.IsPrimaryKey = true;
                                    _columnOptions.DisplayInCombo = false;
                                    _columnOptions.DisplayInManage = false;
                                    _columnOptions.IsSearchable = false;
                                    _columnOptions.AllowNull = false;
                                    BuildColumnsDataTable(ref _dt, "IdPerson", _columnOptions);

                                    _idPerson = Convert.ToInt64(param["IdPerson"]);
                                    _contactAdresses = _organization.Person(_idPerson).Addresses();
                                    break;
                            }

                            String _permissionType = String.Empty;
                            //Obtiene el permiso que tiene el usuario para esa organizacion.
                            if (_organization.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                            { _permissionType = Common.Constants.PermissionManageName; }
                            else
                            { _permissionType = Common.Constants.PermissionViewName; }

                            //Ya esta armado el DataTable, ahora lo carga
                            foreach (Address _contactAddress in _contactAdresses.Values)
                            {
                                String _addr = _contactAddress.Street + " " + _contactAddress.Number + " " + _contactAddress.Floor + " " + _contactAddress.Department;

                                switch (_parentEntity)
                                {
                                    case "Sector":
                                        _dt.Rows.Add(_contactAddress.IdAddress, _contactAddress.IdGeographicArea, _idOrganization, _addr, _contactAddress.GeographicArea.LanguageOption.Name, _contactAddress.PostCode, _permissionType, _idFacility, _idSector);
                                        break;

                                    case "Facility":
                                        _dt.Rows.Add(_contactAddress.IdAddress, _contactAddress.IdGeographicArea, _idOrganization, _addr, _contactAddress.GeographicArea.LanguageOption.Name, _contactAddress.PostCode, _permissionType, _idFacility);
                                        break;

                                    case "Person":
                                        _dt.Rows.Add(_contactAddress.IdAddress, _contactAddress.IdGeographicArea, _idOrganization, _addr, _contactAddress.GeographicArea.LanguageOption.Name, _contactAddress.PostCode, _permissionType, _idPerson);
                                        break;
                                }
                            }
                        }
                    }
                    catch
                    {
                        //No hace nada...porque despues pasa por el return abajo...
                    }
                }
                //Retorna el DataTable
                return _dt;
            }
            /// <summary>
            /// Construye el DataTable a modo Property con los datos del ContactAddress.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable Address(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable("Address");

                //Contruye las columnas y sus atributos.
                BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
                BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
                BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

                Int64 _idContactAddress = Convert.ToInt64(param["IdAddress"]);
                Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
                String _parentEntity = param["ParentEntity"].ToString();
                Int64 _idFacility = 0;

                Address _contactAddress = null;

                switch (_parentEntity)
                {
                    case "Person":
                        Int64 _idPerson = Convert.ToInt64(param["IdPerson"]);
                        _contactAddress = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization).Person(_idPerson).Address(_idContactAddress);
                        break;
                    case "Facility":
                        _idFacility = Convert.ToInt64(param["IdFacility"]);
                        _contactAddress = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization).Facility(_idFacility).Address(_idContactAddress);
                        break;
                    case "Sector":
                        _idFacility = Convert.ToInt64(param["IdFacility"]);
                        Int64 _idSector = Convert.ToInt64(param["IdSector"]);
                        _contactAddress = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization).Facility(_idFacility).Sector(_idSector).Address(_idContactAddress);
                        break;
                }

                //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
                _dt.ExtendedProperties.Add("PageTitle", _contactAddress.Street + " " + _contactAddress.Number);

                Int16 i = 0;//Se genera este contador, para evitar claves duplicadas, es porque no todos los registros tienen link.
                //Carga los datos
                _dt.Rows.Add(Resources.CommonListManage.Street, _contactAddress.Street, "#" + i++);
                _dt.Rows.Add(Resources.CommonListManage.Number, _contactAddress.Number, "#" + i++);
                _dt.Rows.Add(Resources.CommonListManage.Floor, _contactAddress.Floor, "#" + i++);
                _dt.Rows.Add(Resources.CommonListManage.Apartment, _contactAddress.Department, "#" + i++);
                _dt.Rows.Add(Resources.CommonListManage.ZipCode, _contactAddress.PostCode, "#" + i++);

                //Retorna el DataTable.
                return _dt;
            }
        #endregion

        #region Contact Emails
            /// <summary>
            /// Construye el DataTable a modo List con los datos de la Coleccion Contact Emails.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable ContactEmails(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable("ContactEmail");

                //Contruye las columnas y sus atributos.
                ColumnOptions _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdContactEmail;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdContactEmail", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Email;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = true;
                _columnOptions.IsSortedBy = true;
                BuildColumnsDataTable(ref _dt, "Email", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.ContactType;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "ContactType", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

                //Cuando implementemos la opcion de traer todo en un filtro.
                Boolean _showAll = false;
                if (ValidateSelectedItemComboBox(param, ref _showAll))
                {
                    if ((param.ContainsKey("ParentEntity")) && (param.ContainsKey("IdOrganization")))
                    {
                        String _parentEntity = param["ParentEntity"].ToString();
                        Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);

                        Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
                        Dictionary<Int64, ContactEmail> _contactEmails = null;
                        switch (_parentEntity)
                        {
                            case "Organization":
                                _contactEmails = _organization.ContactEmails();
                                break;
                            case "Person":
                                if (param.ContainsKey("IdPerson"))
                                {
                                    Int64 _idPerson = Convert.ToInt64(param["IdPerson"]);
                                    _contactEmails = _organization.Person(_idPerson).ContactEmails();
                                }
                                break;
                        }

                        String _permissionType = String.Empty;
                        //Obtiene el permiso que tiene el usuario para esa organizacion.
                        if (_organization.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                        { _permissionType = Common.Constants.PermissionManageName; }
                        else
                        { _permissionType = Common.Constants.PermissionViewName; }

                        //Ya esta armado el DataTable, ahora lo carga
                        foreach (ContactEmail _contactEmail in _contactEmails.Values)
                        {
                            _dt.Rows.Add(_contactEmail.IdContactEmail, _contactEmail.Email, _contactEmail.ContactType.LanguageOption.Name, _permissionType);
                        }
                    }
                }
                //Retorna el DataTable
                return _dt;
            }
            /// <summary>
            /// Construye el DataTable a modo Property con los datos del ContactEmail.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable ContactEmail(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable("ContactEmail");

                //Contruye las columnas y sus atributos.
                BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
                BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
                BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

                Int64 _idContactEmail = Convert.ToInt64(param["IdContactEmail"]);
                Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
                String _parentEntity = param["ParentEntity"].ToString();

                ContactEmail _contactEmail = null;

                switch (_parentEntity)
                {
                    case "Person":
                        Int64 _idPerson = Convert.ToInt64(param["IdPerson"]);
                        _contactEmail = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization).Person(_idPerson).ContactEmail(_idContactEmail);
                        break;
                    case "Organization":
                        _contactEmail = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization).ContactEmail(_idContactEmail);
                        break;
                }

                //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
                _dt.ExtendedProperties.Add("PageTitle", _contactEmail.Email);

                Int16 i = 0;//Se genera este contador, para evitar claves duplicadas, es porque no todos los registros tienen link.
                Dictionary<String, Object> _valueLink = new Dictionary<String, Object>();
                _valueLink.Add("IdContactType", _contactEmail.ContactType.IdContactType);

                //Carga los datos
                //_dt.Rows.Add(Resources.CommonListManage.IdContactEmail, _contactEmail.IdContactEmail, "#" + i++);
                _dt.Rows.Add(Resources.CommonListManage.Email, _contactEmail.Email, "#" + i++);

                _dt.Rows.Add(Resources.CommonListManage.ContactType, _contactEmail.ContactType.LanguageOption.Name,
                     GetValueLink(Common.ConstantsEntitiesName.DS.ContactType, _valueLink));

                //Retorna el DataTable.
                return _dt;
            }
            /// <summary>
            /// Construye el DataTable a modo List con los datos de la Coleccion All System Person Emails.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable AllSystemPersonEmails(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable("ContactEmail");

                //Contruye las columnas y sus atributos.
                ColumnOptions _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdOrganization;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdOrganization", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdPerson;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdPerson", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdContactEmail;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdContactEmail", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Email;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = true;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = true;
                _columnOptions.IsSortedBy = true;
                BuildColumnsDataTable(ref _dt, "Email", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

                //OrganizationWithoutClassifications = trae todas las organizaciones para la que el usuario tiene permisos.
                //Recorre todas las organizaciones del Sistema
                //Llena el dictionary con todas las organizaciones del sistema.
                //GetAllOrganization();

                foreach (Organization _organization in EMSLibrary.User.DirectoryServices.Map.Organizations().Values)
                {
                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (_organization.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    //Recorre todas las personas de la organizacion
                    foreach (Person _person in _organization.People.Values)
                    {
                        //Recorre y se guarda el email de cada persona
                        foreach (ContactEmail _contactEmail in _person.ContactEmails().Values)
                        {
                            String _email = _organization.CorporateName + " - " + _person.FullName + " - " + _contactEmail.Email;

                            _dt.Rows.Add(_organization.IdOrganization, _person.IdPerson, _contactEmail.IdContactEmail, _email, _permissionType);
                        }
                    }
                }

                //Retorna el DataTable
                return _dt;
            }
            public Boolean AllSystemPersonEmailsHasChildren(Dictionary<String, Object> param)
            {
                return false;
            }

            //Dictionary<Int64, Organization> _AllOrganizations = new Dictionary<Int64, Organization>();
            //Dictionary<Int64, OrganizationClassification> _AllOrganizationClassifications = new Dictionary<Int64, OrganizationClassification>();
            //private void GetAllOrganization()
            //{
            //    //Primero arma un dictionary con todas las clasificaciones
            //    GetAllOrganizationClassification(EMSLibrary.User.DirectoryServices.Map.OrganizationClassifications());

            //    //luego los que son root que no tienen ninguna clasificacion
            //    foreach (Organization _organization in EMSLibrary.User.DirectoryServices.Map.OrganizationWithoutClassifications().Values)
            //    {
            //        if (!_AllOrganizations.ContainsKey(_organization.IdOrganization))
            //        {
            //            _AllOrganizations.Add(_organization.IdOrganization, _organization);
            //        }
            //    }
            //    //Ahora recorro todas las clasificaciones y le pido las organizaciones de ahi adentro...
            //    foreach (OrganizationClassification _organizationClassification in _AllOrganizationClassifications.Values)
            //    {
            //        foreach (Organization _organization in EMSLibrary.User.DirectoryServices.Map.Organizations(_organizationClassification).Values)
            //        {
            //            if (!_AllOrganizations.ContainsKey(_organization.IdOrganization))
            //            {
            //                _AllOrganizations.Add(_organization.IdOrganization, _organization);
            //            }
            //        }
            //    }
            //}
            //private void GetAllOrganizationClassification(Dictionary<Int64, OrganizationClassification> organizationClassifications)
            //{
            //    foreach (OrganizationClassification _organizationClassification in organizationClassifications.Values)
            //    {
            //        if (!_AllOrganizationClassifications.ContainsKey(_organizationClassification.IdOrganizationClassification))
            //        {
            //            _AllOrganizationClassifications.Add(_organizationClassification.IdOrganizationClassification, _organizationClassification);
            //            GetAllOrganizationClassification(_organizationClassification.ChildrenClassifications);
            //        }
            //    }
            //}
            
        #endregion

        #region Contact Messenger Applications
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion ContactMessengerApplications.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ContactMessengerApplications(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ContactMessengerApplication");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Provider;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Provider", _columnOptions);

            _columnOptions.ColumnCaption = Resources.CommonListManage.Application;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Application", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                if (param.ContainsKey("Provider"))
                {
                    String _provider = param["Provider"].ToString();

                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (EMSLibrary.User.DirectoryServices.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    //Ya esta armado el DataTable, ahora lo carga
                    foreach (ContactMessengerApplication _contactMessengerApplication in EMSLibrary.User.DirectoryServices.Configuration.ContactMessengersApplications(_provider).Values)
                    {
                        _dt.Rows.Add(_contactMessengerApplication.Provider, _contactMessengerApplication.Application, _permissionType);
                    }
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del ContactMessengerApplication.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ContactMessengerApplication(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ContactMessengerApplication");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            String _application = param["Application"].ToString();
            String _provider = param["Provider"].ToString();

            ContactMessengerApplication _contactMessengerApplication = EMSLibrary.User.DirectoryServices.Configuration.ContactMessengerApplication(_provider, _application);

            //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
            _dt.ExtendedProperties.Add("PageTitle", _contactMessengerApplication.Provider);

            Int16 i = 0;//Se genera este contador, para evitar claves duplicadas, es porque no todos los registros tienen link.
            Dictionary<String, Object> _valueLink = new Dictionary<String, Object>();
            _valueLink.Add("Provider", _contactMessengerApplication.Provider);

            //Carga los datos
            _dt.Rows.Add(Resources.CommonListManage.Provider, _contactMessengerApplication.Provider,
                GetValueLink(Common.ConstantsEntitiesName.DS.ContactMessengerProvider, _valueLink));

            _dt.Rows.Add(Resources.CommonListManage.Application, _contactMessengerApplication.Application, "#" + i++);

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        #region Contact Messenger Providers
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion ContactMessengerProviders.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ContactMessengerProviders(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ContactMessengerProvider");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Provider;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Provider", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                String _permissionType = String.Empty;
                //Obtiene el permiso que tiene el usuario para esa organizacion.
                if (EMSLibrary.User.DirectoryServices.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                { _permissionType = Common.Constants.PermissionManageName; }
                else
                { _permissionType = Common.Constants.PermissionViewName; }


                //Ya esta armado el DataTable, ahora lo carga
                foreach (ContactMessengerProvider _contactMessengerProvider in EMSLibrary.User.DirectoryServices.Configuration.ContactMessengersProviders().Values)
                {
                    _dt.Rows.Add(_contactMessengerProvider.Provider, _permissionType);
                }

            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del ContactMessengerProvider.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ContactMessengerProvider(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ContactMessengerProvider");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

            String _provider = param["Provider"].ToString();

            ContactMessengerProvider _contactMessengerProvider = EMSLibrary.User.DirectoryServices.Configuration.ContactMessengerProvider(_provider);

            //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
            _dt.ExtendedProperties.Add("PageTitle", _contactMessengerProvider.Provider);

            //Carga los datos
            _dt.Rows.Add(Resources.CommonListManage.Provider, _contactMessengerProvider.Provider);

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        #region Contact Messengers
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion Contact Messengers.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ContactMessengers(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ContactMessenger");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdContactMessenger;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdContactMessenger", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Provider;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Provider", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Application;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Application", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Data;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Data", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.ContactType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "ContactType", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                if ((param.ContainsKey("ParentEntity")) && (param.ContainsKey("IdOrganization")))
                {
                    String _parentEntity = param["ParentEntity"].ToString();
                    Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);

                    Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
                    Dictionary<Int64, ContactMessenger> _contactMessengers = null;
                    switch (_parentEntity)
                    {
                        case "Organization":
                            _contactMessengers = _organization.ContactMessengers();
                            break;
                        case "Person":
                            if (param.ContainsKey("IdPerson"))
                            {
                                Int64 _idPerson = Convert.ToInt64(param["IdPerson"]);
                                _contactMessengers = _organization.Person(_idPerson).ContactMessengers();
                            }
                            break;
                    }
                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (_organization.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }


                    //Ya esta armado el DataTable, ahora lo carga
                    foreach (ContactMessenger _contactMessenger in _contactMessengers.Values)
                    {
                        _dt.Rows.Add(_contactMessenger.IdContactMessenger, _contactMessenger.Provider, _contactMessenger.Application, _contactMessenger.Data, _contactMessenger.ContactType.LanguageOption.Name, _permissionType);
                    }
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del ContactMessenger.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ContactMessenger(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ContactMessenger");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            Int64 _idContactMessenger = Convert.ToInt64(param["IdContactMessenger"]);
            Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
            String _parentEntity = param["ParentEntity"].ToString();

            ContactMessenger _contactMessenger = null;

            switch (_parentEntity)
            {
                case "Person":
                    Int64 _idPerson = Convert.ToInt64(param["IdPerson"]);
                    _contactMessenger = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization).Person(_idPerson).ContactMessenger(_idContactMessenger);
                    break;
                case "Organization":
                    _contactMessenger = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization).ContactMessenger(_idContactMessenger);
                    break;
            }
            //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
            _dt.ExtendedProperties.Add("PageTitle", _contactMessenger.Provider + " - " + _contactMessenger.Application);

            Int16 i = 0;//Se genera este contador, para evitar claves duplicadas, es porque no todos los registros tienen link.
            Dictionary<String, Object> _valueLink = new Dictionary<String, Object>();
            _valueLink.Add("Provider", _contactMessenger.Provider);
            _valueLink.Add("Application", _contactMessenger.Application);
            _valueLink.Add("IdContactType", _contactMessenger.ContactType.IdContactType);

            //Carga los datos
            //_dt.Rows.Add(Resources.CommonListManage.IdContactMessenger, _contactMessenger.IdContactMessenger, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.Provider, _contactMessenger.Provider,
                GetValueLink(Common.ConstantsEntitiesName.DS.ContactMessengerProvider, _valueLink));
            _dt.Rows.Add(Resources.CommonListManage.Application, _contactMessenger.Application,
                GetValueLink(Common.ConstantsEntitiesName.DS.ContactMessengerApplication, _valueLink));
            _dt.Rows.Add(Resources.CommonListManage.Data, _contactMessenger.Data, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.ContactType, _contactMessenger.ContactType.LanguageOption.Name,
                 GetValueLink(Common.ConstantsEntitiesName.DS.ContactType, _valueLink));

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        #region Contact Types
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion ContactType.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ContactTypes(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ContactType");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdContactType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdContactType", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdApplicability;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdApplicability", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.ContactType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Description;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "Description", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                //Verifica que ahora en los parametros venga el key que se esta esperando....
                if (param.ContainsKey("IdApplicability"))
                {
                    //Obtiene el Applicability
                    Int64 _idApplicability = Convert.ToInt64(param["IdApplicability"]);
                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (EMSLibrary.User.DirectoryServices.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    //Ya esta armado el DataTable, ahora lo carga
                    foreach (ContactType _contactType in EMSLibrary.User.DirectoryServices.Configuration.ContactTypes(_idApplicability).Values)
                    {
                        _dt.Rows.Add(_contactType.IdContactType, _idApplicability, _contactType.LanguageOption.Name, _contactType.LanguageOption.Description, _permissionType);
                    }
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del ContactType.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ContactType(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ContactType");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            //Obtiene el Applicability
            Int64 _idApplicability = Convert.ToInt64(param["IdApplicability"]);
            Int64 _idContactType = Convert.ToInt64(param["IdContactType"]);

            ContactType _contactType = EMSLibrary.User.DirectoryServices.Configuration.ContactType(_idApplicability, _idContactType);

            //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
            _dt.ExtendedProperties.Add("PageTitle", _contactType.LanguageOption.Name);

            Int16 i = 0;//Se genera este contador, para evitar claves duplicadas, es porque no todos los registros tienen link.
            Dictionary<String, Object> _valueLink = new Dictionary<String, Object>();
            _valueLink.Add("Applicability", _contactType.Applicability);

            //Carga los datos
            _dt.Rows.Add(Resources.CommonListManage.Applicability, EMSLibrary.User.DirectoryServices.Configuration.ApplicabilityContactType(_contactType.Applicability).LanguageOption.Name,
                GetValueLink(Common.ConstantsEntitiesName.DS.Applicability, _valueLink));
            //_dt.Rows.Add(Resources.CommonListManage.IdContactType, _contactType.IdContactType, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.Name, _contactType.LanguageOption.Name, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.LanguageName, _contactType.LanguageOption.Language.Name, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.Description, _contactType.LanguageOption.Description, "#" + i++);

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        #region Telephones
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion Contact Telephones.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable Telephones(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ContactTelephone");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdTelephone;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdTelephone", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdOrganization;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdOrganization", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.InternationalCode;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "InternationalCode", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.AreaCode;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "AreaCode", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Number;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Number", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Extension;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "Extension", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Reason;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "Reason", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                if ((param.ContainsKey("ParentEntity")) && (param.ContainsKey("IdOrganization")))
                {
                    String _parentEntity = param["ParentEntity"].ToString();
                    Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
                    Int64 _idFacility = 0;
                    Int64 _idSector = 0;
                    Int64 _idPerson = 0;

                    Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
                    Dictionary<Int64, Telephone> _contactTelephones = null;
                    switch (_parentEntity)
                    {
                        case "Facility":
                            //Se agregan 2 columnas mas...
                            _columnOptions = new ColumnOptions();
                            _columnOptions.ColumnCaption = Resources.CommonListManage.IdFacility;
                            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                            _columnOptions.IsPrimaryKey = true;
                            _columnOptions.DisplayInCombo = false;
                            _columnOptions.DisplayInManage = false;
                            _columnOptions.IsSearchable = false;
                            _columnOptions.AllowNull = false;
                            BuildColumnsDataTable(ref _dt, "IdFacility", _columnOptions);

                            _idFacility = Convert.ToInt64(param["IdFacility"]);
                            _contactTelephones = _organization.Facility(_idFacility).Telephones;
                            break;
                        case "Sector":
                            //Se agregan 2 columnas mas...
                            _columnOptions = new ColumnOptions();
                            _columnOptions.ColumnCaption = Resources.CommonListManage.IdFacility;
                            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                            _columnOptions.IsPrimaryKey = true;
                            _columnOptions.DisplayInCombo = false;
                            _columnOptions.DisplayInManage = false;
                            _columnOptions.IsSearchable = false;
                            _columnOptions.AllowNull = false;
                            BuildColumnsDataTable(ref _dt, "IdFacility", _columnOptions);

                            _columnOptions = new ColumnOptions();
                            _columnOptions.ColumnCaption = Resources.CommonListManage.IdSector;
                            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                            _columnOptions.IsPrimaryKey = true;
                            _columnOptions.DisplayInCombo = false;
                            _columnOptions.DisplayInManage = false;
                            _columnOptions.IsSearchable = false;
                            _columnOptions.AllowNull = false;
                            BuildColumnsDataTable(ref _dt, "IdSector", _columnOptions);

                            _idFacility = Convert.ToInt64(param["IdFacility"]);
                            _idSector = Convert.ToInt64(param["IdSector"]);
                            _contactTelephones = _organization.Facility(_idFacility).Sector(_idSector).Telephones;
                            break;
                        case "Person":
                            //Se agrega 1 columnas mas...
                            _columnOptions = new ColumnOptions();
                            _columnOptions.ColumnCaption = Resources.CommonListManage.IdPerson;
                            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                            _columnOptions.IsPrimaryKey = true;
                            _columnOptions.DisplayInCombo = false;
                            _columnOptions.DisplayInManage = false;
                            _columnOptions.IsSearchable = false;
                            _columnOptions.AllowNull = false;
                            BuildColumnsDataTable(ref _dt, "IdPerson", _columnOptions);

                            _idPerson = Convert.ToInt64(param["IdPerson"]);
                            _contactTelephones = _organization.Person(_idPerson).Telephones;
                            break;
                    }
                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (_organization.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    //Ya esta armado el DataTable, ahora lo carga
                    foreach (Telephone _contactTelephone in _contactTelephones.Values)
                    {
                        switch (_parentEntity)
                        {
                            case "Sector":
                                _dt.Rows.Add(_contactTelephone.IdTelephone, _idOrganization, _contactTelephone.InternationalCode, _contactTelephone.AreaCode, _contactTelephone.Number, _contactTelephone.Extension, _contactTelephone.Reason, _permissionType, _idFacility, _idSector);
                                break;

                            case "Facility":
                                _dt.Rows.Add(_contactTelephone.IdTelephone, _idOrganization, _contactTelephone.InternationalCode, _contactTelephone.AreaCode, _contactTelephone.Number, _contactTelephone.Extension, _contactTelephone.Reason, _permissionType, _idFacility);
                                break;

                            case "Person":
                                _dt.Rows.Add(_contactTelephone.IdTelephone, _idOrganization, _contactTelephone.InternationalCode, _contactTelephone.AreaCode, _contactTelephone.Number, _contactTelephone.Extension, _contactTelephone.Reason, _permissionType, _idPerson);
                                break;
                        }
                    }
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del ContactTelephone.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable Telephone(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ContactTelephone");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            Int64 _idContactTelephone = Convert.ToInt64(param["IdTelephone"]);
            Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
            String _parentEntity = param["ParentEntity"].ToString();
            Int64 _idFacility = 0;

            Telephone _contactTelephone = null;

            switch (_parentEntity)
            {
                case "Person":
                    Int64 _idPerson = Convert.ToInt64(param["IdPerson"]);
                    _contactTelephone = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization).Person(_idPerson).Telephone(_idContactTelephone);
                    break;
                case "Facility":
                    _idFacility = Convert.ToInt64(param["IdFacility"]);
                    _contactTelephone = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization).Facility(_idFacility).Telephone(_idContactTelephone);
                    break;
                case "Sector":
                    _idFacility = Convert.ToInt64(param["IdFacility"]);
                    Int64 _idSector = Convert.ToInt64(param["IdSector"]);
                    _contactTelephone = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization).Facility(_idFacility).Sector(_idSector).Telephone(_idContactTelephone);
                    break;
            }

            //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
            _dt.ExtendedProperties.Add("PageTitle", _contactTelephone.AreaCode + " " + _contactTelephone.Number + " " + _contactTelephone.Extension);

            Int16 i = 0;//Se genera este contador, para evitar claves duplicadas, es porque no todos los registros tienen link.
            //Carga los datos
            //_dt.Rows.Add(Resources.CommonListManage.IdTelephone, _contactTelephone.IdTelephone, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.InternationalCode, _contactTelephone.InternationalCode, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.AreaCode, _contactTelephone.AreaCode, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.Number, _contactTelephone.Number, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.Extension, _contactTelephone.Extension, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.Reason, _contactTelephone.Reason, "#" + i++);

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        #region Contact Urls
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion Contact Urls.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ContactUrls(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ContactUrl");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdContactUrl;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdContactURL", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.URL;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "URL", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Name;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.ContactType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "ContactType", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                if ((param.ContainsKey("ParentEntity")) && (param.ContainsKey("IdOrganization")))
                {
                    String _parentEntity = param["ParentEntity"].ToString();
                    Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);

                    Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
                    Dictionary<Int64, ContactURL> _contactURLs = null;
                    switch (_parentEntity)
                    {
                        case "Organization":
                            _contactURLs = _organization.ContactURLs();
                            break;
                        case "Person":
                            if (param.ContainsKey("IdPerson"))
                            {
                                Int64 _idPerson = Convert.ToInt64(param["IdPerson"]);
                                _contactURLs = _organization.Person(_idPerson).ContactURLs();
                            }
                            break;
                    }
                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (_organization.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    //Ya esta armado el DataTable, ahora lo carga
                    foreach (ContactURL _contactURL in _contactURLs.Values)
                    {
                        _dt.Rows.Add(_contactURL.IdContactURL, _contactURL.URL, _contactURL.LanguageOption.Name, _contactURL.ContactType.LanguageOption.Name, _permissionType);
                    }
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del ContactUrl.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ContactUrl(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ContactUrl");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            Int64 _idContactUrl = Convert.ToInt64(param["IdContactURL"]);
            Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);

            String _parentEntity = param["ParentEntity"].ToString();

            ContactURL _contactURL = null;

            switch (_parentEntity)
            {
                case "Person":
                    Int64 _idPerson = Convert.ToInt64(param["IdPerson"]);
                    _contactURL = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization).Person(_idPerson).ContactURL(_idContactUrl);
                    break;
                case "Organization":
                    _contactURL = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization).ContactURL(_idContactUrl);
                    break;
            }
            if (_contactURL != null)
            {
                //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
                _dt.ExtendedProperties.Add("PageTitle", _contactURL.LanguageOption.Name);

                Int16 i = 0;//Se genera este contador, para evitar claves duplicadas, es porque no todos los registros tienen link.
                Dictionary<String, Object> _valueLink = new Dictionary<String, Object>();
                _valueLink.Add("IdContactType", _contactURL.ContactType.IdContactType);

                //Carga los datos
                //_dt.Rows.Add(Resources.CommonListManage.IdTelephone, _contactURL.IdContactURL, "#" + i++);
                _dt.Rows.Add(Resources.CommonListManage.Name, _contactURL.LanguageOption.Name, "#" + i++);
                _dt.Rows.Add(Resources.CommonListManage.Description, _contactURL.LanguageOption.Description, "#" + i++);
                _dt.Rows.Add(Resources.CommonListManage.URL, _contactURL.URL, "#" + i++);

                _dt.Rows.Add(Resources.CommonListManage.ContactType, _contactURL.ContactType.LanguageOption.Name,
                 GetValueLink(Common.ConstantsEntitiesName.DS.ContactType, _valueLink));
            }

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        //#region Countries
        ///// <summary>
        ///// Construye el DataTable a modo List con los datos de la Coleccion Country.
        ///// </summary>
        ///// <param name="param">Parametros opcionales para filtrar</param>
        ///// <returns>Un <c>DataTable</c></returns>
        //public DataTable Countries(Dictionary<String, Object> param)
        //{
        //    //Construye el datatable
        //    DataTable _dt = BuildDataTable("Country");

        //    //Contruye las columnas y sus atributos.
        //    ColumnOptions _columnOptions = new ColumnOptions();
        //    _columnOptions.ColumnCaption = Resources.CommonListManage.IdCountry;
        //    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
        //    _columnOptions.IsPrimaryKey = true;
        //    _columnOptions.DisplayInCombo = false;
        //    _columnOptions.DisplayInManage = false;
        //    _columnOptions.IsSearchable = false;
        //    _columnOptions.AllowNull = false;
        //    BuildColumnsDataTable(ref _dt, "IdCountry", _columnOptions);

        //    _columnOptions = new ColumnOptions();
        //    _columnOptions.ColumnCaption = Resources.CommonListManage.IdLanguage;
        //    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
        //    _columnOptions.IsPrimaryKey = false;
        //    _columnOptions.DisplayInCombo = false;
        //    _columnOptions.DisplayInManage = false;
        //    _columnOptions.IsSearchable = false;
        //    _columnOptions.AllowNull = false;
        //    BuildColumnsDataTable(ref _dt, "IdLanguage", _columnOptions);

        //    _columnOptions = new ColumnOptions();
        //    _columnOptions.ColumnCaption = Resources.CommonListManage.Alpha;
        //    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
        //    _columnOptions.IsPrimaryKey = false;
        //    _columnOptions.DisplayInCombo = false;
        //    _columnOptions.DisplayInManage = true;
        //    _columnOptions.IsSearchable = true;
        //    _columnOptions.AllowNull = false;
        //    _columnOptions.IsContextMenuCaption = false;
        //    BuildColumnsDataTable(ref _dt, "Alpha", _columnOptions);

        //    _columnOptions = new ColumnOptions();
        //    _columnOptions.ColumnCaption = Resources.CommonListManage.Country;
        //    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
        //    _columnOptions.IsPrimaryKey = false;
        //    _columnOptions.DisplayInCombo = true;
        //    _columnOptions.DisplayInManage = true;
        //    _columnOptions.IsSearchable = true;
        //    _columnOptions.AllowNull = false;
        //    _columnOptions.IsContextMenuCaption = true;
        //    _columnOptions.IsSortedBy = true;
        //    BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

        //    _columnOptions = new ColumnOptions();
        //    _columnOptions.ColumnCaption = Resources.CommonListManage.InternationalCode;
        //    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
        //    _columnOptions.IsPrimaryKey = false;
        //    _columnOptions.DisplayInCombo = false;
        //    _columnOptions.DisplayInManage = true;
        //    _columnOptions.IsSearchable = true;
        //    _columnOptions.AllowNull = true;
        //    BuildColumnsDataTable(ref _dt, "InternationalCode", _columnOptions);

        //    _columnOptions = new ColumnOptions();
        //    _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
        //    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
        //    _columnOptions.IsPrimaryKey = false;
        //    _columnOptions.DisplayInCombo = false;
        //    _columnOptions.DisplayInManage = false;
        //    _columnOptions.IsSearchable = false;
        //    _columnOptions.AllowNull = false;
        //    BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

        //    String _permissionType = String.Empty;
        //    //Obtiene el permiso que tiene el usuario para esa organizacion.
        //    if (EMSLibrary.User.DirectoryServices.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
        //    { _permissionType = Common.Constants.PermissionManageName; }
        //    else
        //    { _permissionType = Common.Constants.PermissionViewName; }

        //    //Ya esta armado el DataTable, ahora lo carga
        //    foreach (Country _country in EMSLibrary.User.DirectoryServices.Configuration.Countries().Values)
        //    {
        //        _dt.Rows.Add(_country.IdCountry, _country.LanguageOption.Language.IdLanguage, _country.Alpha, _country.LanguageOption.Name, _country.InternationalCode, _permissionType);
        //    }

        //    //Retorna el DataTable
        //    return _dt;
        //}
        ///// <summary>
        ///// Construye el DataTable a modo Property con los datos del Country.
        ///// </summary>
        ///// <param name="param">Parametros opcionales para filtrar</param>
        ///// <returns>Un <c>DataTable</c></returns>
        //public DataTable Country(Dictionary<String, Object> param)
        //{
        //    //Construye el datatable
        //    DataTable _dt = BuildDataTable("Country");

        //    //Contruye las columnas y sus atributos.
        //    BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
        //    BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

        //    //Ya esta el DataTable armado, ahora se trae el item.
        //    Int64 _idCountry = Convert.ToInt64(param["IdCountry"]);

        //    Country _country = EMSLibrary.User.DirectoryServices.Configuration.Country(_idCountry);

        //    //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
        //    _dt.ExtendedProperties.Add("PageTitle", _country.LanguageOption.Name);

        //    //Carga los datos
        //    //_dt.Rows.Add(Resources.CommonListManage.IdCountry, _country.IdCountry);
        //    //_dt.Rows.Add(Resources.CommonListManage.IdLanguage, _country.LanguageOption.Language.IdLanguage);
        //    _dt.Rows.Add(Resources.CommonListManage.Alpha, _country.Alpha);
        //    _dt.Rows.Add(Resources.CommonListManage.LanguageName, _country.LanguageOption.Language.Name);
        //    _dt.Rows.Add(Resources.CommonListManage.Name, _country.LanguageOption.Name);
        //    _dt.Rows.Add(Resources.CommonListManage.InternationalCode, _country.InternationalCode);

        //    //Retorna el DataTable.
        //    return _dt;
        //}
        //#endregion

        #region Languages
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion Language.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable Languages(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("Language");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdLanguage;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdLanguage", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.LanguageName;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IsDefault;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Boolean");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IsDefault", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Enabled;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Boolean");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Enabled", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            String _permissionType = String.Empty;
            //Obtiene el permiso que tiene el usuario para esa organizacion.
            if (EMSLibrary.User.DirectoryServices.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
            { _permissionType = Common.Constants.PermissionManageName; }
            else
            { _permissionType = Common.Constants.PermissionViewName; }

            //Ya esta armado el DataTable, ahora lo carga
            foreach (Language _language in EMSLibrary.User.DirectoryServices.Configuration.Languages().Values)
            {
                _dt.Rows.Add(_language.IdLanguage, _language.Name.ToString(), _language.IsDefault.ToString(), _language.Enable.ToString(), _permissionType);
            }

            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del Language.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable Language(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("Language");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

            //Ya esta el DataTable armado, ahora se trae el item.
            String _idLanguage = param["IdLanguage"].ToString();

            Language _language = EMSLibrary.User.DirectoryServices.Configuration.Language(_idLanguage);

            //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
            _dt.ExtendedProperties.Add("PageTitle", _language.Name);

            //Carga los datos
            //_dt.Rows.Add(Resources.CommonListManage.IdLanguage, _language.IdLanguage);
            _dt.Rows.Add(Resources.CommonListManage.Name, _language.Name);
            _dt.Rows.Add(Resources.CommonListManage.IsDefault, _language.IsDefault);
            _dt.Rows.Add(Resources.CommonListManage.Enabled, _language.Enable);

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        #region Organizational Charts
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion Organizational Chart.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable OrganizationalCharts(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("OrganizationalChart");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdOrganizationalChart;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdOrganizationalChart", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdOrganization;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdOrganization", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.OrganizationalChart;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Description;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "Description", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                //Verifica que ahora en los parametros venga el key que se esta esperando....
                if (param.ContainsKey("IdOrganization"))
                {
                    //Obtiene la Organization
                    Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);

                    Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (_organization.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    //Ya esta armado el DataTable, ahora lo carga
                    foreach (OrganizationalChart _organizationalChart in _organization.OrganizationalCharts.Values)
                    {
                        _dt.Rows.Add(_organizationalChart.IdOrganizationalChart, _idOrganization, _organizationalChart.LanguageOption.Name, _organizationalChart.LanguageOption.Description, _permissionType);
                    }
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del OrganizationalChart.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable OrganizationalChart(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("OrganizationalChart");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            //Obtiene la Organization
            Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
            Int64 _idOrganizationalChart = Convert.ToInt64(param["IdOrganizationalChart"]);

            OrganizationalChart _organizationalChart = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization).OrganizationalChart(_idOrganizationalChart);

            //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
            _dt.ExtendedProperties.Add("PageTitle", _organizationalChart.LanguageOption.Name);

            Int16 i = 0;//Se genera este contador, para evitar claves duplicadas, es porque no todos los registros tienen link.
            Dictionary<String, Object> _valueLink = new Dictionary<String, Object>();
            _valueLink.Add("IdOrganization", _organizationalChart.Organization.IdOrganization);

            //Carga los datos
            //_dt.Rows.Add(Resources.CommonListManage.IdOrganization, _organizationalChart.IdOrganization);
            _dt.Rows.Add(Resources.CommonListManage.CorporateName, _organizationalChart.Organization.CorporateName,
                 GetValueLink(Common.ConstantsEntitiesName.DS.Organization, _valueLink));

            //_dt.Rows.Add(Resources.CommonListManage.IdOrganizationalChart, _organizationalChart.IdOrganizationalChart, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.Name, _organizationalChart.LanguageOption.Name, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.LanguageName, _organizationalChart.LanguageOption.Language.Name, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.Description, _organizationalChart.LanguageOption.Description, "#" + i++);

            //Retorna el DataTable.
            return _dt;
        }
        /// <summary>
        /// Indica si ese organigrama tiene hijos o no.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un<c>Boolean</c></returns>
        public Boolean OrganizationalChartsHasChildren(Dictionary<String, Object> param)
        {
            return false;
        }
        /// <summary>
        /// Indica si esta Organization tiene OrganizationalChart.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un<c>Boolean</c></returns>
        public Boolean OrganizationalChartsHasJobTitle(Dictionary<String, Object> param)
        {
            Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
            Int64 _idOrganizationalChart = Convert.ToInt64(param["IdOrganizationalChart"]);

            if (EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization).OrganizationalChart(_idOrganizationalChart).JobTitlesRoots().Count > 0)
            { return true; }

            return false;
        }

        #endregion

        #region Organization Relationship Types
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion OrganizationRelationshipTypes.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable OrganizationRelationshipTypes(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable(Common.ConstantsEntitiesName.DS.OrganizationRelationshipType);

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdOrganizationRelationshipType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdOrganizationRelationshipType", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.OrganizationRelationshipType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Description;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "Description", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                String _permissionType = String.Empty;
                //Obtiene el permiso que tiene el usuario para esa organizacion.
                if (EMSLibrary.User.DirectoryServices.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                { _permissionType = Common.Constants.PermissionManageName; }
                else
                { _permissionType = Common.Constants.PermissionViewName; }

                //Ya esta armado el DataTable, ahora lo carga
                foreach (OrganizationRelationshipType _organizationsRelationshipsType in EMSLibrary.User.DirectoryServices.Configuration.OrganizationsRelationshipsTypes().Values)
                {
                    _dt.Rows.Add(_organizationsRelationshipsType.IdOrganizationRelationshipType, _organizationsRelationshipsType.LanguageOption.Name, _organizationsRelationshipsType.LanguageOption.Description, _permissionType);
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del OrganizationRelationshipType.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable OrganizationRelationshipType(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable(Common.ConstantsEntitiesName.DS.OrganizationRelationshipType);

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

            Int64 _idOrganizationRelationshipType = Convert.ToInt64(param["IdOrganizationRelationshipType"]);

            OrganizationRelationshipType _organizationsRelationshipsType = EMSLibrary.User.DirectoryServices.Configuration.OrganizationRelationshipType(_idOrganizationRelationshipType);

            //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
            _dt.ExtendedProperties.Add("PageTitle", _organizationsRelationshipsType.LanguageOption.Name);

            //Carga los datos
            //_dt.Rows.Add(Resources.CommonListManage.IdOrganizationRelationshipType, _organizationsRelationshipsType.IdOrganizationRelationshipType);
            _dt.Rows.Add(Resources.CommonListManage.Name, _organizationsRelationshipsType.LanguageOption.Name);
            _dt.Rows.Add(Resources.CommonListManage.LanguageName, _organizationsRelationshipsType.LanguageOption.Language.Name);
            _dt.Rows.Add(Resources.CommonListManage.Description, _organizationsRelationshipsType.LanguageOption.Description);

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        #region Organization Relationships
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion OrganizationRelationships.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable OrganizationRelationships(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("OrganizationRelationship");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdOrganization;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdOrganization", _columnOptions);

            _columnOptions.ColumnCaption = Resources.CommonListManage.IdOrganization;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdOrganization2", _columnOptions);

            _columnOptions.ColumnCaption = Resources.CommonListManage.IdOrganizationRelationshipType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdOrganizationRelationshipType", _columnOptions);

            _columnOptions.ColumnCaption = Resources.CommonListManage.Organization;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Organization", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.OrganizationRelationshipType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "OrganizationRelationshipType", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                if (param.ContainsKey("IdOrganization"))
                {
                    Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);

                    Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (_organization.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    //Ya esta armado el DataTable, ahora lo carga
                    //foreach (OrganizationRelationship _organizationRelationship in _organization.OrganizationRelationships(_idOrganization))
                    foreach (OrganizationRelationship _organizationRelationship in _organization.OrganizationRelationships())
                    {
                        _dt.Rows.Add(_organizationRelationship.Organization.IdOrganization, _organizationRelationship.OrganizationRelated.IdOrganization, _organizationRelationship.OrganizationRelationshipType.IdOrganizationRelationshipType, _organizationRelationship.OrganizationRelated.CorporateName, _organizationRelationship.OrganizationRelationshipType.LanguageOption.Name);
                    }
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del OrganizationRelationship.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable OrganizationRelationship(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("OrganizationRelationship");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
            Int64 _idOrganization2 = Convert.ToInt64(param["IdOrganization2"]);
            Int64 _idOrganizationRelationshipType = Convert.ToInt64(param["IdOrganizationRelationshipType"]);

            OrganizationRelationship _organizationRelationship = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization).OrganizationRelationship(_idOrganization, _idOrganization2, _idOrganizationRelationshipType);

            //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
            _dt.ExtendedProperties.Add("PageTitle", _organizationRelationship.OrganizationRelated.CorporateName);

            Int16 i = 0;//Se genera este contador, para evitar claves duplicadas, es porque no todos los registros tienen link.
            Dictionary<String, Object> _valueLink = new Dictionary<String, Object>();
            _valueLink.Add("IdOrganization", _organizationRelationship.OrganizationRelated.IdOrganization);
            _valueLink.Add("IdOrganizationRelationshipType", _organizationRelationship.OrganizationRelationshipType.IdOrganizationRelationshipType);

            //Carga los datos
            //_dt.Rows.Add(Resources.CommonListManage.IdOrganization, _organizationRelationship.IdOrganization1, "#" + i++);
            //_dt.Rows.Add(Resources.CommonListManage.IdOrganization, _organizationRelationship.Organization2.IdOrganization);
            _dt.Rows.Add(Resources.CommonListManage.CorporateName, _organizationRelationship.OrganizationRelated.CorporateName,
                GetValueLink(Common.ConstantsEntitiesName.DS.Organization, _valueLink));
            //_dt.Rows.Add(Resources.CommonListManage.IdOrganizationRelationshipType, _organizationRelationship.OrganizationRelationshipType.IdOrganizationRelationshipType);
            _dt.Rows.Add(Resources.CommonListManage.OrganizationRelationshipType, _organizationRelationship.OrganizationRelationshipType.LanguageOption.Name,
                GetValueLink(Common.ConstantsEntitiesName.DS.OrganizationRelationshipType, _valueLink));

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        #region People
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion People.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable People(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("Person");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdPerson;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdPerson", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdOrganization;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdOrganization", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdSalutationType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.IsCellLink = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdSalutationType", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.LastName;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "LastName", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.FirstName;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "FirstName", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.SalutationType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            _columnOptions.IsCellLink = true;
            _columnOptions.EntityName = Common.ConstantsEntitiesName.DS.SalutationType;
            _columnOptions.EntityNameGrid = Common.ConstantsEntitiesName.DS.SalutationTypes;
            BuildColumnsDataTable(ref _dt, "SalutationType", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.CorporateName;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            _columnOptions.IsCellLink = true;
            _columnOptions.EntityName = Common.ConstantsEntitiesName.DS.Organization;
            _columnOptions.EntityNameGrid = Common.ConstantsEntitiesName.DS.Organizations;
            _columnOptions.EntityNameContextInfo = Common.ConstantsEntitiesName.DS.Organization;
            _columnOptions.EntityNameContextElement = Common.ConstantsEntitiesName.DS.Organization;
            BuildColumnsDataTable(ref _dt, "CorporateName", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                //Verifica que ahora en los parametros venga el key que se esta esperando....
                if (param.ContainsKey("IdOrganization"))
                {
                    //Obtiene la Organization
                    Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);

                    Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (_organization.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    //Ya esta armado el DataTable, ahora lo carga
                    foreach (Person _person in _organization.People.Values)
                    {
                        _dt.Rows.Add(_person.IdPerson, _idOrganization,
                            _person.SalutationType.IdSalutationType,
                            _person.LastName.ToString(), _person.FirstName.ToString(),
                            _person.SalutationType.LanguageOption.Name,
                            _person.Organization.CorporateName,
                            _permissionType);
                    }
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del Person.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable Person(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("Person");

            //Esta columna es para cuando se necesita un orden especifico en el MainInfo.
            BuildColumnsDataTable(ref _dt, "Order", SetColumnInternalOrder()); //1° columna para el orden.
            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            //Obtiene la Organization
            Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
            Int64 _idPerson = Convert.ToInt64(param["IdPerson"]);

            Person _person = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization).Person(_idPerson);

            //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
            _dt.ExtendedProperties.Add("PageTitle", _person.LastName + ", " + _person.FirstName);

            Int16 i = 0;    //Se genera este contador, para evitar claves duplicadas, es porque no todos los registros tienen link.
            Int16 x = 0;    //Para que tenga un contador para el orden.

            Dictionary<String, Object> _valueLink = new Dictionary<String, Object>();
            _valueLink.Add("IdSalutationType", _person.SalutationType.IdSalutationType);
            _valueLink.Add("IdOrganization", _person.Organization.IdOrganization);

            //Carga los datos
            //_dt.Rows.Add(Resources.CommonListManage.IdPerson, _person.IdPerson, "#" + i++);
            _dt.Rows.Add(x++, Resources.CommonListManage.LastName, _person.LastName, "#" + i++);
            _dt.Rows.Add(x++, Resources.CommonListManage.FirstName, _person.FirstName, "#" + i++);
            _dt.Rows.Add(x++, Resources.CommonListManage.NickName, _person.NickName, "#" + i++);
            _dt.Rows.Add(x++, Resources.CommonListManage.PosName, _person.PosName, "#" + i++);

            _dt.Rows.Add(x++, Resources.CommonListManage.SalutationType, _person.SalutationType.LanguageOption.Name,
                 GetValueLink(Common.ConstantsEntitiesName.DS.SalutationType, _valueLink));

            _dt.Rows.Add(x++, Resources.CommonListManage.CorporateName, _person.Organization.CorporateName,
                GetValueLink(Common.ConstantsEntitiesName.DS.Organization, _valueLink));

            //Retorna el DataTable.
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion PeopleByJobTitle.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable PeopleByJobTitle(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("Person");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdPerson;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdPerson", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdOrganization;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdOrganization", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.FirstName;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "FirstName", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.LastName;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "LastName", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                //Verifica que ahora en los parametros venga el key que se esta esperando....
                if ((param.ContainsKey("IdOrganization")) && (param.ContainsKey("IdGeographicArea")))
                {
                    //Obtiene la Organization
                    Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
                    Int64 _idGeographicArea = Convert.ToInt64(param["IdGeographicArea"]);
                    Int64 _idPosition = Convert.ToInt64(param["IdPosition"]);
                    Int64 _idFunctionalArea = Convert.ToInt64(param["IdFunctionalArea"]);

                    Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (_organization.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    GeographicArea _geoArea = EMSLibrary.User.GeographicInformationSystem.GeographicArea(_idGeographicArea);
                    Position _position = _organization.Position(_idPosition);
                    FunctionalArea _funArea = _organization.FunctionalArea(_idFunctionalArea);
                    FunctionalPosition _funPos = _organization.FunctionalPosition(_position, _funArea);
                    GeographicFunctionalArea _geoFunArea = _organization.GeographicFunctionalArea(_funArea, _geoArea);
                    JobTitle _jobTitle = _organization.JobTitle(_geoFunArea, _funPos);
                    //Ya esta armado el DataTable, ahora lo carga
                    foreach (Person _person in _organization.People.Values)
                    {
                        if (_person  is Condesus.EMS.Business.DS.Entities.PersonwithUser)
                        {
                            if (((Condesus.EMS.Business.DS.Entities.PersonwithUser)_person).Post(_jobTitle) != null)
                            {
                                _dt.Rows.Add(_person.IdPerson, _idOrganization, _person.FirstName.ToString(), _person.LastName.ToString(), _permissionType);
                            }
                        }
                    }
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el Dictionary de catalogos para la Persona
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public Dictionary<Int64, Condesus.EMS.Business.KC.Entities.CatalogDoc> PersonPictures(Dictionary<String, Object> param)
        {
            Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
            Int64 _idPerson = Convert.ToInt64(param["IdPerson"]);

            return EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization).Person(_idPerson).Pictures;
        }

        #endregion

        #region Positions
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion Positions.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable Positions(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("Position");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdPosition;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdPosition", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdOrganization;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdOrganization", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Position;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Description;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "Description", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                //Verifica que ahora en los parametros venga el key que se esta esperando....
                if (param.ContainsKey("IdOrganization"))
                {
                    //Obtiene la Organization
                    Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
                    Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (_organization.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    //Ya esta armado el DataTable, ahora lo carga
                    foreach (Position _position in _organization.Positions().Values)
                    {
                        _dt.Rows.Add(_position.IdPosition, _idOrganization, _position.LanguageOption.Name, _position.LanguageOption.Description, _permissionType);
                    }
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del Position.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable Position(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("Position");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

            //Obtiene la Organization
            Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
            Int64 _idPosition = Convert.ToInt64(param["IdPosition"]);

            Position _position = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization).Position(_idPosition);

            //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
            _dt.ExtendedProperties.Add("PageTitle", _position.LanguageOption.Name);

            //Carga los datos
            //_dt.Rows.Add(Resources.CommonListManage.IdPosition, _position.IdPosition);
            _dt.Rows.Add(Resources.CommonListManage.Name, _position.LanguageOption.Name);
            _dt.Rows.Add(Resources.CommonListManage.LanguageName, _position.LanguageOption.Language.Name);
            _dt.Rows.Add(Resources.CommonListManage.Description, _position.LanguageOption.Description);

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        #region Posts
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion Posts.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable Posts(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("Post");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdGeographicArea;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdGeographicArea", _columnOptions);

            _columnOptions.ColumnCaption = Resources.CommonListManage.IdPosition;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdPosition", _columnOptions);

            _columnOptions.ColumnCaption = Resources.CommonListManage.IdFunctionalArea;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdFunctionalArea", _columnOptions);

            _columnOptions.ColumnCaption = Resources.CommonListManage.IdOrganization;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdOrganization", _columnOptions);

            _columnOptions.ColumnCaption = Resources.CommonListManage.IdPerson;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdPerson", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.JobTitle;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "JobTitle", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Person;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Person", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.StartDate;
            _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "StartDate", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.EndDate;
            _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "EndDate", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                if ((param.ContainsKey("IdOrganizationalChart")) && (param.ContainsKey("IdOrganization")))
                {
                    //Saco los POST de un JT
                    Int64 _idOrganizationalChart = Convert.ToInt64(param["IdOrganizationalChart"]);
                    Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
                    Int64 _idGeographicArea = Convert.ToInt64(param["IdGeographicArea"]);
                    Int64 _idPosition = Convert.ToInt64(param["IdPosition"]);
                    Int64 _idFunctionalArea = Convert.ToInt64(param["IdFunctionalArea"]);

                    Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
                    GeographicArea _geoArea = EMSLibrary.User.GeographicInformationSystem.GeographicArea(_idGeographicArea);
                    Position _position = _organization.Position(_idPosition);
                    FunctionalArea _funArea = _organization.FunctionalArea(_idFunctionalArea);
                    FunctionalPosition _funPos = _organization.FunctionalPosition(_position, _funArea);
                    GeographicFunctionalArea _geoFunArea = _organization.GeographicFunctionalArea(_funArea, _geoArea);
                    JobtitleWithChart _jobTitle = (JobtitleWithChart)_organization.OrganizationalChart(_idOrganizationalChart).JobTitle(_geoFunArea, _funPos);

                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (_organization.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                        { _permissionType = Common.Constants.PermissionManageName; }
                    else
                        { _permissionType = Common.Constants.PermissionViewName; }

                    //Ya esta armado el DataTable, ahora lo carga
                    foreach (Post _post in _jobTitle.Posts())
                    {
                        String _jobTitleName = _post.JobTitle.Name();
                        _dt.Rows.Add(_post.JobTitle.GeographicFunctionalAreas.GeographicArea.IdGeographicArea, _post.JobTitle.FunctionalPositions.Position.IdPosition, _post.JobTitle.GeographicFunctionalAreas.FunctionalArea.IdFunctionalArea, _post.Organization.IdOrganization, _post.Person.IdPerson, _jobTitleName, _post.Person.FullName, _post.StartDate.ToShortDateString(), _post.EndDate.ToShortDateString(), _permissionType);
                    }
                }
                else
                {
                    if ((param.ContainsKey("IdPerson")) && (param.ContainsKey("IdOrganization")))
                    {
                        //Saco los POST de una Persona

                        //Pide todos los post de una Persona y una ORganizacion.
                        Int64 _idPerson = Convert.ToInt64(param["IdPerson"]);
                        Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);

                        Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
                        String _permissionType = String.Empty;
                        //Obtiene el permiso que tiene el usuario para esa organizacion.
                        if (_organization.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                        { _permissionType = Common.Constants.PermissionManageName; }
                        else
                        { _permissionType = Common.Constants.PermissionViewName; }


                        //Ya esta armado el DataTable, ahora lo carga
                        foreach (Post _post in ((Condesus.EMS.Business.DS.Entities.PersonwithUser)_organization.Person(_idPerson)).Posts)
                        {
                            String _jobTitle = _post.JobTitle.Name();
                            _dt.Rows.Add(_post.JobTitle.GeographicFunctionalAreas.GeographicArea.IdGeographicArea, _post.JobTitle.FunctionalPositions.Position.IdPosition, _post.JobTitle.GeographicFunctionalAreas.FunctionalArea.IdFunctionalArea, _post.Organization.IdOrganization, _post.Person.IdPerson, _jobTitle, _post.Person.FullName, _post.StartDate.ToShortDateString(), _post.EndDate.ToShortDateString(), _permissionType);
                        }
                    }
                    else
                    {
                        //Si solo viene el idOrganization, entonces me pide todos los POST, para una organizacion.
                        if (param.ContainsKey("IdOrganization"))
                        {
                            //Saco los POST de una Organizacion.
                            Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);

                            Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
                            String _permissionType = String.Empty;
                            //Obtiene el permiso que tiene el usuario para esa organizacion.
                            if (_organization.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                            { _permissionType = Common.Constants.PermissionManageName; }
                            else
                            { _permissionType = Common.Constants.PermissionViewName; }

                            //Ya esta armado el DataTable, ahora lo carga
                            foreach (Post _post in _organization.Posts())
                            {
                                String _jobTitle = _post.JobTitle.Name();
                                _dt.Rows.Add(_post.JobTitle.GeographicFunctionalAreas.GeographicArea.IdGeographicArea, _post.JobTitle.FunctionalPositions.Position.IdPosition, _post.JobTitle.GeographicFunctionalAreas.FunctionalArea.IdFunctionalArea, _post.Organization.IdOrganization, _post.Person.IdPerson, _jobTitle, _post.Person.FullName, _post.StartDate.ToShortDateString(), _post.EndDate.ToShortDateString(), _permissionType);
                            }
                        }
                    }
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del Post.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable Post(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("Post");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            Int64 _idGeographicArea = Convert.ToInt64(param["IdGeographicArea"]);
            Int64 _idPosition = Convert.ToInt64(param["IdPosition"]);
            Int64 _idFunctionalArea = Convert.ToInt64(param["IdFunctionalArea"]);
            Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
            Int64 _idPerson = Convert.ToInt64(param["IdPerson"]);

            Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
            GeographicArea _geoArea = EMSLibrary.User.GeographicInformationSystem.GeographicArea(_idGeographicArea);
            Position _position = _organization.Position(_idPosition);
            FunctionalArea _funArea = _organization.FunctionalArea(_idFunctionalArea);
            FunctionalPosition _funPos = _organization.FunctionalPosition(_position, _funArea);
            GeographicFunctionalArea _geoFunArea = _organization.GeographicFunctionalArea(_funArea, _geoArea);
            JobTitle _jobTitle = _organization.JobTitle(_geoFunArea, _funPos);
            Person _person = _organization.Person(_idPerson);
            Post _post = ((Condesus.EMS.Business.DS.Entities.PersonwithUser)_person).Post(_jobTitle);

            //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
            _dt.ExtendedProperties.Add("PageTitle", _post.JobTitle.Name());

            Int16 i = 0;//Se genera este contador, para evitar claves duplicadas, es porque no todos los registros tienen link.
            Dictionary<String, Object> _valueLink = new Dictionary<String, Object>();
            _valueLink.Add("IdPerson", _person.IdPerson);
            _valueLink.Add("IdOrganization", _post.JobTitle.Organization.IdOrganization);
            _valueLink.Add("IdFunctionalArea", _post.JobTitle.GeographicFunctionalAreas.FunctionalArea.IdFunctionalArea);
            _valueLink.Add("IdGeographicArea", _post.JobTitle.GeographicFunctionalAreas.GeographicArea.IdGeographicArea);
            _valueLink.Add("IdPosition", _post.JobTitle.FunctionalPositions.Position.IdPosition);

            //Carga los datos
            //_dt.Rows.Add(Resources.CommonListManage.IdGeographicArea, _post.IdGeographicArea, "#" + i++);
            //_dt.Rows.Add(Resources.CommonListManage.IdPosition, _post.IdPosition, "#" + i++);
            //_dt.Rows.Add(Resources.CommonListManage.IdFunctionalArea, _post.IdFunctionalArea, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.Person, _person.FullName,
                GetValueLink(Common.ConstantsEntitiesName.DS.Person, _valueLink));
            _dt.Rows.Add(Resources.CommonListManage.JobTitle, _post.JobTitle.Name(),
                    GetValueLink(Common.ConstantsEntitiesName.DS.JobTitle, _valueLink));
            _dt.Rows.Add(Resources.CommonListManage.StartDate, _post.StartDate, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.EndDate, _post.EndDate, "#" + i++);

            //Retorna el DataTable.
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion de todos los Posts del sistema.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable PostsByOrganization(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("PostByOrganization");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdGeographicArea;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdGeographicArea", _columnOptions);

            _columnOptions.ColumnCaption = Resources.CommonListManage.IdPosition;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdPosition", _columnOptions);

            _columnOptions.ColumnCaption = Resources.CommonListManage.IdFunctionalArea;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdFunctionalArea", _columnOptions);

            _columnOptions.ColumnCaption = Resources.CommonListManage.IdOrganization;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdOrganization", _columnOptions);

            _columnOptions.ColumnCaption = Resources.CommonListManage.IdPerson;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdPerson", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Post;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Post", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            if ((param.ContainsKey("IdOrganization")))
            {
                Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);

                Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
                String _permissionType = String.Empty;
                //Obtiene el permiso que tiene el usuario para esa organizacion.
                if (_organization.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                { _permissionType = Common.Constants.PermissionManageName; }
                else
                { _permissionType = Common.Constants.PermissionViewName; }

                foreach (Post _post in _organization.Posts())
                {
                    String _jobTitle = _post.JobTitle.Name();
                    String _personName = _post.Person.FullName;
                    _dt.Rows.Add(_post.JobTitle.GeographicFunctionalAreas.GeographicArea.IdGeographicArea, _post.JobTitle.FunctionalPositions.Position.IdPosition, _post.JobTitle.GeographicFunctionalAreas.FunctionalArea.IdFunctionalArea, _post.Organization.IdOrganization, _post.Person.IdPerson,
                         _personName + " - " + _jobTitle, _permissionType);
                }
            }

            //Retorna el DataTable
            return _dt;
        }

        #endregion

        #region Presences
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion Presences.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable Presences(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("Presence");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdGeographicArea;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdGeographicArea", _columnOptions);

            _columnOptions.ColumnCaption = Resources.CommonListManage.IdPosition;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdPosition", _columnOptions);

            _columnOptions.ColumnCaption = Resources.CommonListManage.IdFunctionalArea;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdFunctionalArea", _columnOptions);

            _columnOptions.ColumnCaption = Resources.CommonListManage.IdFacility;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdFacility", _columnOptions);

            _columnOptions.ColumnCaption = Resources.CommonListManage.IdPerson;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdPerson", _columnOptions);

            _columnOptions.ColumnCaption = Resources.CommonListManage.Presence;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Presence", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                if (param.ContainsKey("IdGeographicArea"))
                {
                    Int64 _idGeographicArea = Convert.ToInt64(param["IdGeographicArea"]);
                    Int64 _idPosition = Convert.ToInt64(param["IdPosition"]);
                    Int64 _idFunctionalArea = Convert.ToInt64(param["IdFunctionalArea"]);
                    Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
                    Int64 _idPerson = Convert.ToInt64(param["IdPerson"]);

                    Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
                    GeographicArea _geoArea = EMSLibrary.User.GeographicInformationSystem.GeographicArea(_idGeographicArea);
                    Position _position = _organization.Position(_idPosition);
                    FunctionalArea _funArea = _organization.FunctionalArea(_idFunctionalArea);
                    FunctionalPosition _funPos = _organization.FunctionalPosition(_position, _funArea);
                    GeographicFunctionalArea _geoFunArea = _organization.GeographicFunctionalArea(_funArea, _geoArea);
                    JobTitle _jobTitle = _organization.JobTitle(_geoFunArea, _funPos);

                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (_organization.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    //Ya esta armado el DataTable, ahora lo carga
                    foreach (Presence _presence in ((Condesus.EMS.Business.DS.Entities.PersonwithUser)_organization.Person(_idPerson)).Post(_jobTitle).Presences())
                    {
                        _dt.Rows.Add(_idGeographicArea, _idPosition, _idFunctionalArea, _presence.Facility.IdFacility, _idPerson, _presence.Facility.LanguageOption.Name, _permissionType);
                    }
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del Presence.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable Presence(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("Presence");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

            Int64 _idGeographicArea = Convert.ToInt64(param["IdGeographicArea"]);
            Int64 _idPosition = Convert.ToInt64(param["IdPosition"]);
            Int64 _idFunctionalArea = Convert.ToInt64(param["IdFunctionalArea"]);
            Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
            Int64 _idPerson = Convert.ToInt64(param["IdPerson"]);
            Int64 _idFacility = Convert.ToInt64(param["IdFacility"]);

            Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
            GeographicArea _geoArea = EMSLibrary.User.GeographicInformationSystem.GeographicArea(_idGeographicArea);
            Position _position = _organization.Position(_idPosition);
            FunctionalArea _funArea = _organization.FunctionalArea(_idFunctionalArea);
            FunctionalPosition _funPos = _organization.FunctionalPosition(_position, _funArea);
            GeographicFunctionalArea _geoFunArea = _organization.GeographicFunctionalArea(_funArea, _geoArea);
            JobTitle _jobTitle = _organization.JobTitle(_geoFunArea, _funPos);
            Facility _facility = _organization.Facility(_idFacility);
            Presence _presence = ((Condesus.EMS.Business.DS.Entities.PersonwithUser)_organization.Person(_idPerson)).Post(_jobTitle).Presence(_facility);

            //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
            _dt.ExtendedProperties.Add("PageTitle", _presence.Facility.LanguageOption.Name);

            //Carga los datos
            _dt.Rows.Add(Resources.CommonListManage.Name, _presence.Facility.LanguageOption.Name);
            //_dt.Rows.Add(Resources.CommonListManage.Mnemo, _presence.Facility.Mnemo);
            _dt.Rows.Add(Resources.CommonListManage.Description, _presence.Facility.LanguageOption.Description);

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        #region Responsibilities
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion Responsibilities.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable Responsibilities(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("Responsibility");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdGeographicArea;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdGeographicArea", _columnOptions);

            _columnOptions.ColumnCaption = Resources.CommonListManage.IdPosition;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdPosition", _columnOptions);

            _columnOptions.ColumnCaption = Resources.CommonListManage.IdFunctionalArea;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdFunctionalArea", _columnOptions);

            _columnOptions.ColumnCaption = Resources.CommonListManage.IdGeographicAreaResponsibility;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdGeographicAreaResponsibility", _columnOptions);

            _columnOptions.ColumnCaption = Resources.CommonListManage.IdFunctionalAreaResponsibility;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdFunctionalAreaResponsibility", _columnOptions);

            _columnOptions.ColumnCaption = Resources.CommonListManage.Presence;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Presence", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                if (param.ContainsKey("IdGeographicArea"))
                {
                    Int64 _idGeographicArea = Convert.ToInt64(param["IdGeographicArea"]);
                    Int64 _idPosition = Convert.ToInt64(param["IdPosition"]);
                    Int64 _idFunctionalArea = Convert.ToInt64(param["IdFunctionalArea"]);
                    Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);

                    Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (_organization.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    GeographicArea _geoArea = EMSLibrary.User.GeographicInformationSystem.GeographicArea(_idGeographicArea);
                    Position _position = _organization.Position(_idPosition);
                    FunctionalArea _funArea = _organization.FunctionalArea(_idFunctionalArea);
                    FunctionalPosition _funPos = _organization.FunctionalPosition(_position, _funArea);
                    GeographicFunctionalArea _geoFunArea = _organization.GeographicFunctionalArea(_funArea, _geoArea);
                    JobTitle _jobTitle = _organization.JobTitle(_geoFunArea, _funPos);

                    //Ya esta armado el DataTable, ahora lo carga
                    foreach (Responsibility _responsibility in _jobTitle.Responsibilities())
                    {
                        _dt.Rows.Add(_idGeographicArea, _idPosition, _idFunctionalArea, _responsibility.GeographicFunctionalAreaResponsibility.GeographicArea.IdGeographicArea, _responsibility.GeographicFunctionalAreaResponsibility.FunctionalArea.IdFunctionalArea, _responsibility.GeographicFunctionalAreaResponsibility.Name(), _permissionType);
                    }
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del Responsibility.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable Responsibility(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("Responsibility");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

            Int64 _idGeographicArea = Convert.ToInt64(param["IdGeographicArea"]);
            Int64 _idPosition = Convert.ToInt64(param["IdPosition"]);
            Int64 _idFunctionalArea = Convert.ToInt64(param["IdFunctionalArea"]);
            Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
            Int64 _idPerson = Convert.ToInt64(param["IdPerson"]);
            Int64 _idFunctionalAreaResponsibility = Convert.ToInt64(param["IdFunctionalAreaResponsibility"]);
            Int64 _idGeographicAreaResponsibility = Convert.ToInt64(param["IdGeographicAreaResponsibility"]);

            //FunctionalArea _funArea = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization).FunctionalArea(_idFunctionalAreaResponsibility);
            //GeographicArea _geoArea = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization).GeographicArea(_idGeographicAreaResponsibility);

            Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
            GeographicArea _geoArea = EMSLibrary.User.GeographicInformationSystem.GeographicArea(_idGeographicAreaResponsibility);
            Position _position = _organization.Position(_idPosition);
            FunctionalArea _funArea = _organization.FunctionalArea(_idFunctionalAreaResponsibility);
            FunctionalPosition _funPos = _organization.FunctionalPosition(_position, _funArea);
            GeographicFunctionalArea _geoFunArea = _organization.GeographicFunctionalArea(_funArea, _geoArea);
            JobTitle _jobTitle = _organization.JobTitle(_geoFunArea, _funPos);

            //Responsibility _responsibility = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization).JobTitle(_idGeographicArea, _idPosition, _idFunctionalArea).Responsibility(_idFunctionalAreaResponsibility, _idGeographicAreaResponsibility);
            Responsibility _responsibility = _jobTitle.Responsibility(_funArea, _geoArea);

            //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
            _dt.ExtendedProperties.Add("PageTitle", _responsibility.GeographicFunctionalAreaResponsibility.Name());

            //Carga los datos
            _dt.Rows.Add(Resources.CommonListManage.Name, _responsibility.GeographicFunctionalAreaResponsibility.Name());

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        #region Salutation Types
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion SalutationTypes.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable SalutationTypes(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("SalutationType");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdSalutationType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdSalutationType", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.SalutationType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Description;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "Description", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                String _permissionType = String.Empty;
                //Obtiene el permiso que tiene el usuario para esa organizacion.
                if (EMSLibrary.User.DirectoryServices.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                { _permissionType = Common.Constants.PermissionManageName; }
                else
                { _permissionType = Common.Constants.PermissionViewName; }

                //Ya esta armado el DataTable, ahora lo carga
                foreach (SalutationType _salutationType in EMSLibrary.User.DirectoryServices.Configuration.SalutationTypes().Values)
                {
                    _dt.Rows.Add(_salutationType.IdSalutationType, _salutationType.LanguageOption.Name, _salutationType.LanguageOption.Description, _permissionType);
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del SalutationType.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable SalutationType(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("SalutationType");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

            Int64 _idSalutationType = Convert.ToInt64(param["IdSalutationType"]);

            SalutationType _salutationType = EMSLibrary.User.DirectoryServices.Configuration.SalutationType(_idSalutationType);

            //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
            _dt.ExtendedProperties.Add("PageTitle", _salutationType.LanguageOption.Name);

            //Carga los datos
            //_dt.Rows.Add(Resources.CommonListManage.IdSalutationType, _salutationType.IdSalutationType);
            _dt.Rows.Add(Resources.CommonListManage.Name, _salutationType.LanguageOption.Name);
            _dt.Rows.Add(Resources.CommonListManage.LanguageName, _salutationType.LanguageOption.Language.Name);
            _dt.Rows.Add(Resources.CommonListManage.Description, _salutationType.LanguageOption.Description);

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        #region User
            /// <summary>
            /// Construye el DataTable a modo List con los datos de la Coleccion Users.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable Users(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable("User");

                //Contruye las columnas y sus atributos.
                ColumnOptions _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdPerson;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdPerson", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdOrganization;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdOrganization", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.UserName;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = true;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = true;
                _columnOptions.IsSortedBy = true;
                BuildColumnsDataTable(ref _dt, "UserName", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Person;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "Person", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Active;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Boolean");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "Active", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.LastLogin;
                _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = true;
                BuildColumnsDataTable(ref _dt, "LastLogin", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

                //Cuando implementemos la opcion de traer todo en un filtro.
                Boolean _showAll = false;
                if (ValidateSelectedItemComboBox(param, ref _showAll))
                {
                    //Verifica que ahora en los parametros venga el key que se esta esperando....
                    if (param.ContainsKey("IdOrganization"))
                    {
                        //Obtiene la Organization
                        Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);

                        Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
                        String _permissionType = String.Empty;
                        //Obtiene el permiso que tiene el usuario para esa organizacion.
                        if (_organization.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                        { _permissionType = Common.Constants.PermissionManageName; }
                        else
                        { _permissionType = Common.Constants.PermissionViewName; }

                        if (param.ContainsKey("IdPerson"))
                        {
                            Int64 _idPerson = Convert.ToInt64(param["IdPerson"]);
                            //Solo muestra el user relacionado a esta persona.
                            User _user = _organization.User(_idPerson);
                            if (_user != null)
                            {
                                _dt.Rows.Add(_user.IdPerson, _user.Person.Organization.IdOrganization, _user.Username, _user.Person.FullName, _user.Active, _user.LastLogin, _permissionType);
                            }
                        }
                        else
                        {
                            //Ya esta armado el DataTable, ahora lo carga
                            foreach (User _user in _organization.Users.Values)
                            {
                                _dt.Rows.Add(_user.IdPerson, _user.Person.Organization.IdOrganization, _user.Username, _user.Person.FullName, _user.Active, _user.LastLogin, _permissionType);
                            }
                        }
                    }
                }
                //Retorna el DataTable
                return _dt;
            }
            /// <summary>
            /// Construye el DataTable a modo Property con los datos del User.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable User(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable("User");

                //Contruye las columnas y sus atributos.
                BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
                BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

                //Obtiene la Organization
                Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
                Int64 _idPerson = Convert.ToInt64(param["IdPerson"]);

                User _user = ((PersonwithUser)EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization).Person(_idPerson)).User;

                //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
                _dt.ExtendedProperties.Add("PageTitle", _user.Person.FirstName + " " + _user.Person.LastName);

                //Carga los datos
                _dt.Rows.Add(Resources.CommonListManage.Organization, _user.Organization.CorporateName);
                _dt.Rows.Add(Resources.CommonListManage.IdPerson, _user.Person.FirstName + " " + _user.Person.LastName);
                _dt.Rows.Add(Resources.CommonListManage.UserName, _user.Username);
                _dt.Rows.Add(Resources.CommonListManage.LastIP, _user.LastIP);
                _dt.Rows.Add(Resources.CommonListManage.LastLogin, _user.LastLogin);
                _dt.Rows.Add(Resources.CommonListManage.Active, _user.Active);
                _dt.Rows.Add(Resources.CommonListManage.ChangePasswordOnNextLogin, _user.ChangePasswordOnNextLogin);
                _dt.Rows.Add(Resources.CommonListManage.CannotChangePassword, _user.CannotChangePassword);
                _dt.Rows.Add(Resources.CommonListManage.PasswordNeverExpires, _user.PasswordNeverExpires);

                //Retorna el DataTable.
                return _dt;
            }
        #endregion

        #region Organization Extended Properties
            /// <summary>
            /// Construye el DataTable a modo List con los datos de la Coleccion Organization Extended Properties.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable OrganizationExtendedProperties(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable("OrganizationExtendedProperty");

                //Contruye las columnas y sus atributos.
                ColumnOptions _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdExtendedProperty;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdExtendedProperty", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdOrganization;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdOrganization", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdExtendedPropertyClassification;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdExtendedPropertyClassification", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Classification;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = true;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = true;
                _columnOptions.IsSortedBy = true;
                BuildColumnsDataTable(ref _dt, "Classification", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.ExtendedProperty;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = true;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = true;
                _columnOptions.IsContextMenuCaption = true;
                _columnOptions.IsSortedBy = true;
                BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Value;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = true;
                BuildColumnsDataTable(ref _dt, "Value", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

                //Cuando implementemos la opcion de traer todo en un filtro.
                if (param.ContainsKey("IdOrganization"))
                {
                    Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
                    Organization _organization = (Organization)EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (_organization.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                        { _permissionType = Common.Constants.PermissionManageName; }
                    else
                        { _permissionType = Common.Constants.PermissionViewName; }

                    //Ya esta armado el DataTable, ahora lo carga
                    foreach (ExtendedPropertyValue _organizationExtendedProperty in _organization.ExtendedPropertyValues)
                    {
                        _dt.Rows.Add(_organizationExtendedProperty.ExtendedProperty.IdExtendedProperty, _idOrganization,
                            _organizationExtendedProperty.ExtendedProperty.ExtendedPropertyClassification.IdExtendedPropertyClassification,
                            _organizationExtendedProperty.ExtendedProperty.ExtendedPropertyClassification.LanguageOption.Name,
                            _organizationExtendedProperty.ExtendedProperty.LanguageOption.Name, _organizationExtendedProperty.Value, _permissionType);
                    }
                }
                //Retorna el DataTable
                return _dt;
            }
            /// <summary>
            /// Construye el DataTable a modo Property con los datos del Organization Extended Property.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable OrganizationExtendedProperty(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable("OrganizationExtendedProperty");

                //Contruye las columnas y sus atributos.
                BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
                BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
                BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

                Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
                Int64 _idOrganizationExtendedProperty = Convert.ToInt64(param["IdExtendedProperty"]);

                ExtendedPropertyValue _organizationExtendedProperty = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization).ExtendedPropertyValue(_idOrganizationExtendedProperty);

                _dt.ExtendedProperties.Add("PageTitle", Common.Functions.ReplaceIndexesTags(_organizationExtendedProperty.ExtendedProperty.LanguageOption.Name));

                Int16 i = 0;//Se genera este contador, para evitar claves duplicadas, es porque no todos los registros tienen link.            
                Dictionary<String, Object> _valueLink = new Dictionary<String, Object>();
                _valueLink.Add("IdExtendedPropertyClassification", _organizationExtendedProperty.ExtendedProperty.ExtendedPropertyClassification.IdExtendedPropertyClassification);

                //Carga los datos
                _dt.Rows.Add(Resources.CommonListManage.ExtendedPropertyClassification, _organizationExtendedProperty.ExtendedProperty.ExtendedPropertyClassification.LanguageOption.Name,
                    GetValueLink(Common.ConstantsEntitiesName.PF.ExtendedPropertyClassification, _valueLink));
                _dt.Rows.Add(Resources.CommonListManage.Name, _organizationExtendedProperty.ExtendedProperty.LanguageOption.Name, "#" + i++);
                _dt.Rows.Add(Resources.CommonListManage.Value, _organizationExtendedProperty.Value, "#" + i++);

                //Retorna el DataTable.
                return _dt;
            }
            /// <summary>
            /// Construye el List de Propiedades Extendidas para la Organizacion
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public ExtendedPropertyValue OrganizationExtendedPropertyValues(Dictionary<String, Object> param)
            {
                Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
                Int64 _idExtendedProperty = Convert.ToInt64(param["IdExtendedProperty"]);

                return EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization).ExtendedPropertyValue(_idExtendedProperty);
            }
        #endregion

        #region Facility Type
            /// <summary>
            /// Construye el DataTable a modo List con los datos de la Coleccion FacilityTypes.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable FacilityTypes(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable("FacilityType");

                //Contruye las columnas y sus atributos.
                ColumnOptions _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdFacilityType;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdFacilityType", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.FacilityType;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = true;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = true;
                _columnOptions.IsSortedBy = true;
                BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Description;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = true;
                BuildColumnsDataTable(ref _dt, "Description", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IconName;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = true;
                BuildColumnsDataTable(ref _dt, "IconName", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

                String _permissionType = String.Empty;
                //Obtiene el permiso que tiene el usuario para esa organizacion.
                if (EMSLibrary.User.DirectoryServices.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                { _permissionType = Common.Constants.PermissionManageName; }
                else
                { _permissionType = Common.Constants.PermissionViewName; }

                if (param.ContainsKey("IdOrganization"))
                {
                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.IdOrganization;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                    _columnOptions.IsPrimaryKey = true;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = false;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    BuildColumnsDataTable(ref _dt, "IdOrganization", _columnOptions);

                    Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
                    Dictionary<Int64, FacilityType> _facilityTypesByOrganization = new Dictionary<Int64, FacilityType>();

                    foreach (Facility _facility in EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization).Facilities.Values)
                    {
                        //Si todavía no fue cargado en el dictionary, lo carga si ya estaba lo saltea.
                        if (!_facilityTypesByOrganization.ContainsKey(_facility.IdFacilityType))
                        {
                            _facilityTypesByOrganization.Add(_facility.IdFacilityType, _facility.FacilityType);
                        }
                    }

                    //Ya esta armado el DataTable, ahora lo carga
                    foreach (FacilityType _facilityType in _facilityTypesByOrganization.Values)
                    {
                        _dt.Rows.Add(_facilityType.IdFacilityType, _facilityType.LanguageOption.Name, _facilityType.LanguageOption.Description, _facilityType.IconName, _permissionType, _idOrganization);
                    }
                }
                else
                {

                    //Ya esta armado el DataTable, ahora lo carga
                    foreach (FacilityType _facilityType in EMSLibrary.User.GeographicInformationSystem.FacilityTypes().Values)
                    {
                        _dt.Rows.Add(_facilityType.IdFacilityType, _facilityType.LanguageOption.Name, _facilityType.LanguageOption.Description, _facilityType.IconName, _permissionType);
                    }
                }
                //Retorna el DataTable
                return _dt;
            }
            /// <summary>
            /// Construye el DataTable a modo Property con los datos del FacilityTypes.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable FacilityType(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable("FacilityType");

                //Contruye las columnas y sus atributos.
                BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
                BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

                Int64 _idFacilityType = Convert.ToInt64(param["IdFacilityType"]);

                FacilityType _facilityType = EMSLibrary.User.GeographicInformationSystem.FacilityType(_idFacilityType);

                //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
                _dt.ExtendedProperties.Add("PageTitle", _facilityType.LanguageOption.Name);

                //Carga los datos
                _dt.Rows.Add(Resources.CommonListManage.Name, _facilityType.LanguageOption.Name);
                _dt.Rows.Add(Resources.CommonListManage.LanguageName, _facilityType.LanguageOption.Language.Name);
                _dt.Rows.Add(Resources.CommonListManage.Description, _facilityType.LanguageOption.Description);
                _dt.Rows.Add(Resources.CommonListManage.IconName, _facilityType.IconName);

                //Retorna el DataTable.
                return _dt;
            }
        #endregion

        #region Facilities By Process
            /// <summary>
            /// Construye el DataTable a modo Property con los datos del FacilitiesByProcess.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable FacilitiesByProcess(Dictionary<String, Object> param)
            {
                return Facility(param);
            }
        #endregion

        #region Sites By Types
            
        #endregion


        #endregion

        #region Improvement Actions
            /// <summary>
            /// Construye el DataTable a modo List con los datos de la Coleccion Projectos.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable IAProjects(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable("Projects");

                //Por ahora no tengo nada que mostrar...

                //Retorna el DataTable
                return _dt;
            }
            /// <summary>
            /// Construye el DataTable a modo List con los datos de la Coleccion Projectos.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable IAProject(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable("Project");

                //Por ahora no tengo nada que mostrar...

                //Retorna el DataTable
                return _dt;
            }

            #region Exceptions
                private void BuildColumnsExceptions(ref DataTable dt)
                {
                    //Contruye las columnas y sus atributos.
                    ColumnOptions _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.IdException;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                    _columnOptions.IsPrimaryKey = true;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = false;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    BuildColumnsDataTable(ref dt, "IdException", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.IdExecution;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                    _columnOptions.IsPrimaryKey = true;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = false;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    BuildColumnsDataTable(ref dt, "IdExecution", _columnOptions);
                    
                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.IdTask;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                    _columnOptions.IsPrimaryKey = true;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = false;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    BuildColumnsDataTable(ref dt, "IdTask", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.Task;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = true;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = true;
                    _columnOptions.IsSortedBy = true;
                    BuildColumnsDataTable(ref dt, "Task", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.TaskExecutionDate;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = true;
                    _columnOptions.IsContextMenuCaption = true;
                    _columnOptions.IsSortedBy = true;
                    BuildColumnsDataTable(ref dt, "Title", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.ExceptionDate;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = true;
                    BuildColumnsDataTable(ref dt, "ExceptionDate", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.State;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = true;
                    _columnOptions.AllowNull = true;
                    BuildColumnsDataTable(ref dt, "State", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.Type;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = true;
                    _columnOptions.AllowNull = false;
                    BuildColumnsDataTable(ref dt, "Type", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.Comment;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    BuildColumnsDataTable(ref dt, "Comment", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = false;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    BuildColumnsDataTable(ref dt, "PermissionType", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.ExecutionState;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = false;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    BuildColumnsDataTable(ref dt, "IdExecutionState", _columnOptions);
                }
                /// <summary>
                /// Construye el DataTable a modo List con los datos de la Coleccion Exceptions.
                /// </summary>
                /// <param name="param">Parametros opcionales para filtrar</param>
                /// <returns>Un <c>DataTable</c></returns>
                public DataTable Exceptions(Dictionary<String, Object> param)
                {
                    //Construye el datatable
                    DataTable _dt = BuildDataTable("Exceptions");
                    BuildColumnsExceptions(ref _dt);

                    try
                    {
                        //Cuando implementemos la opcion de traer todo en un filtro.
                        if (param.ContainsKey("IdProcess"))
                        {
                            Int64 _idProcess;
                            if (param.ContainsKey("IdTask"))
                            {
                                //Si viene el idTask, uso ese!!!
                                _idProcess = Convert.ToInt64(param["IdTask"]);
                            }
                            else
                            {
                                if (param.ContainsKey("IdMeasurement"))
                                {
                                    Int64 _idMeasurement = Convert.ToInt64(param["IdMeasurement"]);
                                    _idProcess = EMSLibrary.User.PerformanceAssessments.Configuration.Measurement(_idMeasurement).ProcessTask.IdProcess;
                                }
                                else
                                {
                                    _idProcess = Convert.ToInt64(param["IdProcess"]);
                                }
                            }

                            String _permissionType = String.Empty;
                            Process _process = EMSLibrary.User.ProcessFramework.Map.Process(_idProcess);
                            ProcessGroupProcess _processGroupProcess = (ProcessGroupProcess)_process.Parent;
                            Dictionary<Int64, Condesus.EMS.Business.IA.Entities.Exception> _exceptions = _process.Exceptions;


                            //Crear una excepcion para una tarea!
                            //((ProcessTask)_process).ProcessTaskExecution(1).CreateException("");
                            //De una excepcion, se puede crear un groupException, de un group un nodo y del nodo una tarea.
                            //((ProcessTask)_process).ProcessTaskExecution(1).CreateException("").ProcessGroupExceptionAdd().AddNode().ProcessTasksAdd();

                            //Obtiene el permiso que tiene el usuario para esa organizacion.
                            if (_processGroupProcess.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                            { _permissionType = Common.Constants.PermissionManageName; }
                            else
                            { _permissionType = Common.Constants.PermissionViewName; }

                            foreach (Condesus.EMS.Business.IA.Entities.Exception _exception in _exceptions.Values)
                            {
                                //CAMBIO DE ESTADO DE UNA EXCEPCION
                                //Cerrar excepcion
                                //_exception.Close();
                                //TRatar excepcion
                                //_exception.Treat();
                                Condesus.EMS.Business.IA.Entities.ExceptionProcessTask _exceptionProcessTask = (Condesus.EMS.Business.IA.Entities.ExceptionProcessTask)_exception;

                                _dt.Rows.Add(_exception.IdException, 
                                    _exceptionProcessTask.AssociateExecution.IdExecution,
                                    _exceptionProcessTask.AssociateTask.IdProcess,
                                    _exceptionProcessTask.AssociateTask.LanguageOption.Title,
                                    _exceptionProcessTask.AssociateExecution.Date,
                                    _exception.ExceptionDate, _exception.ExceptionState.LanguageOption.Name,
                                    _exception.ExceptionType.LanguageOption.Name,
                                    _exception.Comment, _permissionType, _exception.ExceptionState.IdExceptionState);
                            }
                        }
                    }
                    catch { }
                    //Retorna el DataTable
                    return _dt;
                }
                /// <summary>
                /// Construye el DataTable a modo Property con los datos del Process Task Calibration.
                /// </summary>
                /// <param name="param">Parametros opcionales para filtrar</param>
                /// <returns>Un <c>DataTable</c></returns>
                public DataTable Exception(Dictionary<String, Object> param)
                {
                    //Construye el datatable
                    DataTable _dt = BuildDataTable("Exception");

                    //Contruye las columnas y sus atributos.
                    BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
                    BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

                    Int64 _idProcess;
                    if (param.ContainsKey("IdTask"))
                    {
                        //Si viene el idTask, uso ese!!!
                        _idProcess = Convert.ToInt64(param["IdTask"]);
                    }
                    else
                    {
                        _idProcess = Convert.ToInt64(param["IdProcess"]);
                    }
                    Int64 _idException = Convert.ToInt64(param["IdException"]);
                    ProcessGroupProcess _processGroupProcess = (ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess).Parent;
                    Condesus.EMS.Business.IA.Entities.Exception _exception = EMSLibrary.User.ImprovementAction.Configuration.Exception(_idException);
                    Condesus.EMS.Business.IA.Entities.ExceptionProcessTask _exceptionProcessTask = (Condesus.EMS.Business.IA.Entities.ExceptionProcessTask)_exception;

                    //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
                    _dt.ExtendedProperties.Add("PageTitle", Common.Functions.ReplaceIndexesTags(_exceptionProcessTask.AssociateTask.LanguageOption.Title));

                    //Carga los datos
                    _dt.Rows.Add(Resources.CommonListManage.Task, _exceptionProcessTask.AssociateTask.LanguageOption.Title);
                    _dt.Rows.Add(Resources.CommonListManage.TaskExecutionDate, _exceptionProcessTask.AssociateExecution.Date);
                    _dt.Rows.Add(Resources.CommonListManage.ExceptionDate, _exception.ExceptionDate);
                    _dt.Rows.Add(Resources.CommonListManage.State, _exception.ExceptionState.LanguageOption.Name);
                    _dt.Rows.Add(Resources.CommonListManage.Type, _exception.ExceptionType.LanguageOption.Name);
                    _dt.Rows.Add(Resources.CommonListManage.Comment, _exception.Comment);

                    //Retorna el DataTable.
                    return _dt;
                }
            #endregion

        #endregion

        #region Knowledge Collaboration

        #region Resource Catalogues
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion ResourceCatalogues.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ResourceCatalogues(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ResourceCatalog");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdResource;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdResource", _columnOptions);

            _columnOptions.ColumnCaption = Resources.CommonListManage.ResourceType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "ResourceType", _columnOptions);

            _columnOptions.ColumnCaption = Resources.CommonListManage.Resource;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

            _columnOptions.ColumnCaption = Resources.CommonListManage.DocSize;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "DocSize", _columnOptions);

            _columnOptions.ColumnCaption = Resources.CommonListManage.DocType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "DocType", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            String _permissionType = String.Empty;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                //Obtiene el permiso que tiene el usuario para esa organizacion.
                if (EMSLibrary.User.KnowledgeCollaboration.Map.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                { _permissionType = Common.Constants.PermissionManageName; }
                else
                { _permissionType = Common.Constants.PermissionViewName; }


                if (param.ContainsKey("IdResource"))
                {
                    _columnOptions.ColumnCaption = Resources.CommonListManage.IdResourceFile;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                    _columnOptions.IsPrimaryKey = true;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = false;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    BuildColumnsDataTable(ref _dt, "IdResourceFile", _columnOptions);

                    Int64 _idResource = Convert.ToInt64(param["IdResource"]);
                    Condesus.EMS.Business.KC.Entities.ResourceCatalog _resourceCatalog = ((Condesus.EMS.Business.KC.Entities.ResourceCatalog)EMSLibrary.User.KnowledgeCollaboration.Map.Resource(_idResource));

                    foreach (Condesus.EMS.Business.KC.Entities.Catalog _catalog in _resourceCatalog.Catalogues.Values)
                    {
                        String _name = String.Empty;
                        String _resourceType = String.Empty;
                        String _docType = String.Empty;
                        String _docSize = String.Empty;

                        if (_catalog.GetType().Name == "CatalogURL")
                        {
                            _name = ((Condesus.EMS.Business.KC.Entities.CatalogURL)_catalog).Url;
                            _resourceType = "URL";
                        }
                        else
                        {
                            _name = ((Condesus.EMS.Business.KC.Entities.CatalogDoc)_catalog).FileAttach.FileName;
                            _resourceType = "DOC";
                            _docSize = ((Condesus.EMS.Business.KC.Entities.CatalogDoc)_catalog).DocSize;
                            _docType = ((Condesus.EMS.Business.KC.Entities.CatalogDoc)_catalog).DocType;
                        }

                        _dt.Rows.Add(_catalog.IdResource, _resourceType, _name, _docSize, _docType, _permissionType, _catalog.IdResourceFile);

                    }
                }
                else
                {
                    if (param.ContainsKey("IdResourceClassification"))
                    {
                        Int64 _idResourceClassification = Convert.ToInt64(param["IdResourceClassification"]);
                        //Ya esta armado el DataTable, ahora lo carga
                        foreach (Condesus.EMS.Business.KC.Entities.Resource _resource in EMSLibrary.User.KnowledgeCollaboration.Map.ResourceClassification(_idResourceClassification).ChildrenElements.Values)
                        {
                            if (_resource.GetType().Name == "ResourceCatalog")
                            {
                                Condesus.EMS.Business.KC.Entities.ResourceCatalog _resourceCatalog = ((Condesus.EMS.Business.KC.Entities.ResourceCatalog)_resource);
                                _dt.Rows.Add(_resourceCatalog.IdResource, _resourceCatalog.GetType().Name,
                                    _resourceCatalog.LanguageOption.Title, String.Empty, String.Empty, _permissionType);
                            }
                        }
                    }
                    else
                    { 
                        //Ya esta armado el DataTable, ahora lo carga
                        foreach (Condesus.EMS.Business.KC.Entities.Resource _resource in EMSLibrary.User.KnowledgeCollaboration.Map.ResourceRoots().Values)
                        {
                            if (_resource.GetType().Name == "ResourceCatalog")
                            {
                                Condesus.EMS.Business.KC.Entities.ResourceCatalog _resourceCatalog = ((Condesus.EMS.Business.KC.Entities.ResourceCatalog)_resource);

                                _dt.Rows.Add(_resourceCatalog.IdResource, _resourceCatalog.GetType().Name,
                                    _resourceCatalog.LanguageOption.Title, String.Empty, String.Empty, _permissionType);
                            }
                        }
                    }
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del ResourceCatalog.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ResourceCatalog(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ResourceCatalog");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

            Int64 _idResource = Convert.ToInt64(param["IdResource"]);
            Int64 _idResourceFile = Convert.ToInt64(param["IdResourceFile"]);

            Condesus.EMS.Business.KC.Entities.Catalog _catalog = ((Condesus.EMS.Business.KC.Entities.ResourceCatalog)EMSLibrary.User.KnowledgeCollaboration.Map.Resource(_idResource)).Catalog(_idResourceFile);

            Condesus.EMS.Business.KC.Entities.CatalogDoc _catalogDoc = null;
            Condesus.EMS.Business.KC.Entities.CatalogURL _catalogURL = null;

            if (_catalog.GetType().Name == "CatalogDoc")
            {
                _catalogDoc = (Condesus.EMS.Business.KC.Entities.CatalogDoc)_catalog;

                //Carga los datos
                _dt.Rows.Add(Resources.CommonListManage.CatalogType, Resources.CommonListManage.CatalogDoc);
                _dt.Rows.Add(Resources.CommonListManage.FileName, _catalogDoc.FileAttach.FileName);
                _dt.Rows.Add(Resources.CommonListManage.Extension, _catalogDoc.FileAttach.FileName.Substring(_catalogDoc.FileAttach.FileName.LastIndexOf(".") + 1));
                _dt.Rows.Add(Resources.CommonListManage.DocSize, _catalogDoc.DocSize);
                _dt.Rows.Add(Resources.CommonListManage.DocType, _catalogDoc.DocType);
            }
            else
            {
                _catalogURL = (Condesus.EMS.Business.KC.Entities.CatalogURL)_catalog;

                //Carga los datos
                _dt.Rows.Add(Resources.CommonListManage.CatalogType, Resources.CommonListManage.CatalogUrl);
                _dt.Rows.Add(Resources.CommonListManage.Name, _catalogURL.Url);
            }
            //Retorna el DataTable.
            return _dt;
        }
        /// <summary>
        /// Indica si ese ResourceCatalog tiene hijos o no.(Los elementos no tienen hijos...)
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un<c>Boolean</c></returns>
        public Boolean ResourceCataloguesHasChildren(Dictionary<String, Object> param)
        {
            return false;
        }
        #endregion

        #region Resource Versions
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion ResourceVersions.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ResourceVersions(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ResourceVersion");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdResource;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdResource", _columnOptions);

            _columnOptions.ColumnCaption = Resources.CommonListManage.ResourceType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "ResourceType", _columnOptions);

            _columnOptions.ColumnCaption = Resources.CommonListManage.Resource;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

            _columnOptions.ColumnCaption = Resources.CommonListManage.DocSize;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "DocSize", _columnOptions);

            _columnOptions.ColumnCaption = Resources.CommonListManage.DocType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "DocType", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            String _permissionType = String.Empty;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                if (param.ContainsKey("IdResource"))
                {
                    _columnOptions.ColumnCaption = Resources.CommonListManage.IdResourceFile;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                    _columnOptions.IsPrimaryKey = true;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = false;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    BuildColumnsDataTable(ref _dt, "IdResourceFile", _columnOptions);

                    Int64 _idResource = Convert.ToInt64(param["IdResource"]);
                    Condesus.EMS.Business.KC.Entities.ResourceVersion _resourceVersion = ((Condesus.EMS.Business.KC.Entities.ResourceVersion)EMSLibrary.User.KnowledgeCollaboration.Map.Resource(_idResource));
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (EMSLibrary.User.KnowledgeCollaboration.Map.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    foreach (Condesus.EMS.Business.KC.Entities.Version _version in _resourceVersion.Versions.Values)
                    {
                        String _name = String.Empty;
                        String _resourceType = String.Empty;
                        String _docType = String.Empty;
                        String _docSize = String.Empty;

                        if (_version.GetType().Name == "VersionURL")
                        {
                            _name = ((Condesus.EMS.Business.KC.Entities.VersionURL)_version).Url;
                            _resourceType = "URL";
                        }
                        else
                        {
                            _name = ((Condesus.EMS.Business.KC.Entities.VersionDoc)_version).FileAttach.FileName;
                            _resourceType = "DOC";
                            _docSize = ((Condesus.EMS.Business.KC.Entities.VersionDoc)_version).DocSize;
                            _docType = ((Condesus.EMS.Business.KC.Entities.VersionDoc)_version).DocType;
                        }

                        _dt.Rows.Add(_version.IdResource, _resourceType, _name, _docSize, _docType, _permissionType, _version.IdResourceFile);

                    }
                }
                else
                {
                    if (param.ContainsKey("IdResourceClassification"))
                    {
                        Int64 _idResourceClassification = Convert.ToInt64(param["IdResourceClassification"]);
                        //Ya esta armado el DataTable, ahora lo carga
                        foreach (Condesus.EMS.Business.KC.Entities.Resource _resource in EMSLibrary.User.KnowledgeCollaboration.Map.ResourceClassification(_idResourceClassification).ChildrenElements.Values)
                        {
                            if (_resource.GetType().Name == "ResourceVersion")
                            {
                                Condesus.EMS.Business.KC.Entities.ResourceVersion _resourceVersion = ((Condesus.EMS.Business.KC.Entities.ResourceVersion)_resource);

                                _dt.Rows.Add(_resourceVersion.IdResource, _resourceVersion.GetType().Name,
                                    _resourceVersion.LanguageOption.Title, String.Empty, String.Empty, _permissionType);
                            }
                        }
                    }
                    else
                    {
                        //Ya esta armado el DataTable, ahora lo carga
                        foreach (Condesus.EMS.Business.KC.Entities.Resource _resource in EMSLibrary.User.KnowledgeCollaboration.Map.ResourceRoots().Values)
                        {
                            if (_resource.GetType().Name == "ResourceVersion")
                            {
                                Condesus.EMS.Business.KC.Entities.ResourceVersion _resourceVersion = ((Condesus.EMS.Business.KC.Entities.ResourceVersion)_resource);

                                _dt.Rows.Add(_resourceVersion.IdResource, _resourceVersion.GetType().Name,
                                    _resourceVersion.LanguageOption.Title, String.Empty, String.Empty, _permissionType);
                            }
                        }
                    }
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del ResourceVersion.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        //public DataTable ResourceVersion(Dictionary<String, Object> param)
        //{
        //    //Construye el datatable
        //    DataTable _dt = BuildDataTable("ResourceVersion");

        //    //Contruye las columnas y sus atributos.
        //    BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
        //    BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

        //    Int64 _idResource = Convert.ToInt64(param["IdResource"]);
        //    Int64 _idResourceFile = Convert.ToInt64(param["IdResourceFile"]);

        //    Condesus.EMS.Business.KC.Entities.Version _version = ((Condesus.EMS.Business.KC.Entities.ResourceVersion)EMSLibrary.User.KnowledgeCollaboration.Map.Resource(_idResource)).Version(_idResourceFile);

        //    Condesus.EMS.Business.KC.Entities.VersionDoc _versionDoc = null;
        //    Condesus.EMS.Business.KC.Entities.VersionURL _versionURL = null;

        //    if (_version.GetType().Name == "VersionDoc")
        //    {
        //        _versionDoc = (Condesus.EMS.Business.KC.Entities.VersionDoc)_version;

        //        //Carga los datos
        //        _dt.Rows.Add(Resources.CommonListManage.CatalogType, Resources.CommonListManage.CatalogDoc);
        //        _dt.Rows.Add(Resources.CommonListManage.FileName, _versionDoc.FileAttach.FileName);
        //        _dt.Rows.Add(Resources.CommonListManage.Extension, _versionDoc.FileAttach.FileName.Substring(_versionDoc.FileAttach.FileName.LastIndexOf(".") + 1));
        //        _dt.Rows.Add(Resources.CommonListManage.DocSize, _versionDoc.DocSize);
        //        _dt.Rows.Add(Resources.CommonListManage.DocType, _versionDoc.DocType);
        //    }
        //    else
        //    {
        //        _versionURL = (Condesus.EMS.Business.KC.Entities.VersionURL)_version;

        //        //Carga los datos
        //        _dt.Rows.Add(Resources.CommonListManage.CatalogType, Resources.CommonListManage.CatalogUrl);
        //        _dt.Rows.Add(Resources.CommonListManage.Name, _versionURL.Url);
        //    }
        //    //Retorna el DataTable.
        //    return _dt;
        //}
        /// <summary>
        /// Indica si ese ResourceCatalog tiene hijos o no.(Los elementos no tienen hijos...)
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un<c>Boolean</c></returns>
        public Boolean ResourceVersionsHasChildren(Dictionary<String, Object> param)
        {
            return false;
        }
        #endregion

        #region Resource File State
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion ResourceFileStates.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ResourceFileStates(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ResourceHistoryState");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdResourceFileState;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdResourceFileState", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.ResourceHistoryState;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Description;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "Description", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                String _permissionType = String.Empty;
                //Obtiene el permiso que tiene el usuario para esa organizacion.
                if (EMSLibrary.User.KnowledgeCollaboration.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                { _permissionType = Common.Constants.PermissionManageName; }
                else
                { _permissionType = Common.Constants.PermissionViewName; }

                //Ya esta armado el DataTable, ahora lo carga
                foreach (Condesus.EMS.Business.KC.Entities.ResourceHistoryState _resourceFileState in EMSLibrary.User.KnowledgeCollaboration.Configuration.ResourceHistoryStates().Values)
                {
                    _dt.Rows.Add(_resourceFileState.IdResourceFileState, _resourceFileState.LanguageOption.Name, _resourceFileState.LanguageOption.Description, _permissionType);
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del ResourceHistoryState.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ResourceHistoryState(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ResourceHistoryState");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

            Int64 _idResourceFileState = Convert.ToInt64(param["IdResourceFileState"]);

            Condesus.EMS.Business.KC.Entities.ResourceHistoryState _resourceFileState = EMSLibrary.User.KnowledgeCollaboration.Configuration.ResourceHistoryState(_idResourceFileState);

            //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
            _dt.ExtendedProperties.Add("PageTitle", _resourceFileState.LanguageOption.Name);
            //Carga los datos
            //_dt.Rows.Add(Resources.CommonListManage.IdResourceFileState, _resourceFileState.IdResourceFileState);
            _dt.Rows.Add(Resources.CommonListManage.Name, _resourceFileState.LanguageOption.Name);
            _dt.Rows.Add(Resources.CommonListManage.LanguageName, _resourceFileState.LanguageOption.Language.Name);
            _dt.Rows.Add(Resources.CommonListManage.Description, _resourceFileState.LanguageOption.Description);

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        #region Resource Files
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion ResourceFiles.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ResourceFiles(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ResourceVersion");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdResource;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdResource", _columnOptions);

            _columnOptions = new ColumnOptions(); 
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdResourceFile;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdResourceFile", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.ResourceVersion;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.ResourceType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "ResourceType", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Version;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "Version", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Active;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Active", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.DocSize;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "DocSize", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.DocType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "DocType", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                if (param.ContainsKey("IdResource"))
                {
                    Int64 _idResource = Convert.ToInt64(param["IdResource"]);
                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (EMSLibrary.User.KnowledgeCollaboration.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    //Ya esta armado el DataTable, ahora lo carga
                    foreach (Condesus.EMS.Business.KC.Entities.Version _versionFile in ((Condesus.EMS.Business.KC.Entities.ResourceVersion)EMSLibrary.User.KnowledgeCollaboration.Map.Resource(_idResource)).Versions.Values)
                    {
                        String _name = String.Empty;
                        String _resourceType = String.Empty;
                        String _docType = String.Empty;
                        String _docSize = String.Empty;

                        if ((_versionFile.GetType().Name == "ResourceFileURL") || (_versionFile.GetType().Name == "VersionURL") )
                        {
                            _name = ((Condesus.EMS.Business.KC.Entities.VersionURL)_versionFile).Url;
                            _resourceType = "URL";
                        }
                        else
                        {
                            _resourceType = "DOC";
                            _name = ((Condesus.EMS.Business.KC.Entities.VersionDoc)_versionFile).FileAttach.FileName;
                            _docSize = ((Condesus.EMS.Business.KC.Entities.VersionDoc)_versionFile).DocSize;
                            _docType = ((Condesus.EMS.Business.KC.Entities.VersionDoc)_versionFile).DocType;
                        }
                        //Indica si este es el activo o no.
                        String _isCurrent = Resources.Common.False;
                        if (_versionFile.ResourceVersion.CurrentVersion != null)
                        {
                            if (_versionFile.IdResourceFile == _versionFile.ResourceVersion.CurrentVersion.IdResourceFile)
                            {
                                _isCurrent = Resources.Common.True;
                            }
                        }
                        _dt.Rows.Add(_versionFile.IdResource, _versionFile.IdResourceFile, _name, _resourceType,
                            _versionFile.VersionNumber.ToString(), _isCurrent, _docSize, _docType, _permissionType);
                    }
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del ResourceVersion.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ResourceVersion(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ResourceVersion");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

            Int64 _idResource = Convert.ToInt64(param["IdResource"]);
            Int64 _idResourceFile = Convert.ToInt64(param["IdResourceFile"]);

            Condesus.EMS.Business.KC.Entities.Version _resourceFile = ((Condesus.EMS.Business.KC.Entities.ResourceVersion)EMSLibrary.User.KnowledgeCollaboration.Map.Resource(_idResource)).Version(_idResourceFile);

            Condesus.EMS.Business.KC.Entities.VersionDoc _resourceFileDoc = null;
            Condesus.EMS.Business.KC.Entities.VersionURL _resourceFileUrl = null;




            if (_resourceFile.GetType().Name == "VersionDoc")
            {
                _resourceFileDoc = (Condesus.EMS.Business.KC.Entities.VersionDoc)_resourceFile;

                //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
                _dt.ExtendedProperties.Add("PageTitle", _resourceFileDoc.FileAttach.FileName);

                //Carga los datos
                _dt.Rows.Add(Resources.CommonListManage.CatalogType, Resources.CommonListManage.CatalogDoc);
                _dt.Rows.Add(Resources.CommonListManage.FileName, _resourceFileDoc.FileAttach.FileName);
                _dt.Rows.Add(Resources.CommonListManage.Extension, _resourceFileDoc.FileAttach.FileName.Substring(_resourceFileDoc.FileAttach.FileName.LastIndexOf(".") + 1));
                _dt.Rows.Add(Resources.CommonListManage.DocSize, _resourceFileDoc.DocSize);
                _dt.Rows.Add(Resources.CommonListManage.DocType, _resourceFileDoc.DocType);
            }
            else
            {
                _resourceFileUrl = (Condesus.EMS.Business.KC.Entities.VersionURL)_resourceFile;

                //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
                _dt.ExtendedProperties.Add("PageTitle", _resourceFileUrl.Url);

                //Carga los datos
                _dt.Rows.Add(Resources.CommonListManage.CatalogType, Resources.CommonListManage.CatalogUrl);
                _dt.Rows.Add(Resources.CommonListManage.Name, _resourceFileUrl.Url);
            }

            _dt.Rows.Add(Resources.CommonListManage.ValidFrom, _resourceFile.ValidFrom);
            _dt.Rows.Add(Resources.CommonListManage.ValidThrough, _resourceFile.ValidThrough);
            _dt.Rows.Add(Resources.CommonListManage.Version, _resourceFile.VersionNumber);

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        #region Catalog
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del Catalog.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable Catalog(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("CatalogDoc");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

            Int64 _idResource = Convert.ToInt64(param["IdResource"]);
            Int64 _idResourceFile = Convert.ToInt64(param["IdResourceFile"]);

            Condesus.EMS.Business.KC.Entities.Catalog _catalog = ((Condesus.EMS.Business.KC.Entities.ResourceCatalog)EMSLibrary.User.KnowledgeCollaboration.Map.Resource(_idResource)).Catalog(_idResourceFile);

            Condesus.EMS.Business.KC.Entities.CatalogDoc _catalogDoc = null;
            Condesus.EMS.Business.KC.Entities.CatalogURL _catalogUrl = null;

            //Registros comunes
            //_dt.Rows.Add(Resources.CommonListManage.IdResource, _idResource);
            //_dt.Rows.Add(Resources.CommonListManage.IdResourceFile, _idResourceFile);
            //Ahora verifica si es Doc o URL...
            if (_catalog.GetType().Name == "CatalogDoc")
            {
                _catalogDoc = (Condesus.EMS.Business.KC.Entities.CatalogDoc)_catalog;

                //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
                _dt.ExtendedProperties.Add("PageTitle", _catalogDoc.FileAttach.FileName);

                //Carga los datos
                _dt.Rows.Add(Resources.CommonListManage.CatalogType, Resources.CommonListManage.CatalogDoc);
                _dt.Rows.Add(Resources.CommonListManage.FileName, _catalogDoc.FileAttach.FileName);
                _dt.Rows.Add(Resources.CommonListManage.Extension, _catalogDoc.FileAttach.FileName.Substring(_catalogDoc.FileAttach.FileName.LastIndexOf(".") + 1));
                _dt.Rows.Add(Resources.CommonListManage.DocSize, _catalogDoc.DocSize);
                _dt.Rows.Add(Resources.CommonListManage.DocType, _catalogDoc.DocType);
            }
            else
            {
                _catalogUrl = (Condesus.EMS.Business.KC.Entities.CatalogURL)_catalog;

                //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
                _dt.ExtendedProperties.Add("PageTitle", _catalogUrl.Url);

                //Carga los datos
                _dt.Rows.Add(Resources.CommonListManage.CatalogType, Resources.CommonListManage.CatalogUrl);
                _dt.Rows.Add(Resources.CommonListManage.Name, _catalogUrl.Url);
            }

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        #region Version File
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del Version File.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable VersionFile(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("VersionFile");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

            Int64 _idResource = Convert.ToInt64(param["IdResource"]);
            Int64 _idResourceFile = Convert.ToInt64(param["IdResourceFile"]);

            Condesus.EMS.Business.KC.Entities.Version _versionFile = ((Condesus.EMS.Business.KC.Entities.ResourceVersion)EMSLibrary.User.KnowledgeCollaboration.Map.Resource(_idResource)).Version(_idResourceFile);

            Condesus.EMS.Business.KC.Entities.VersionDoc _versionFileDoc = null;
            Condesus.EMS.Business.KC.Entities.VersionURL _versionFileUrl = null;

            //Registros comunes
            //_dt.Rows.Add(Resources.CommonListManage.IdResource, _idResource);
            //_dt.Rows.Add(Resources.CommonListManage.IdResourceFile, _idResourceFile);
            _dt.Rows.Add(Resources.CommonListManage.ValidFrom, _versionFile.ValidFrom);
            _dt.Rows.Add(Resources.CommonListManage.ValidThrough, _versionFile.ValidThrough);
            _dt.Rows.Add(Resources.CommonListManage.Version, _versionFile.VersionNumber);

            //Ahora verifica si es Doc o URL...
            if (_versionFile.GetType().Name == "VersionDoc")
            {
                _versionFileDoc = (Condesus.EMS.Business.KC.Entities.VersionDoc)_versionFile;

                //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
                _dt.ExtendedProperties.Add("PageTitle", _versionFileDoc.FileAttach.FileName);

                //Carga los datos
                _dt.Rows.Add(Resources.CommonListManage.CatalogType, Resources.CommonListManage.CatalogDoc);
                _dt.Rows.Add(Resources.CommonListManage.FileName, _versionFileDoc.FileAttach.FileName);
                _dt.Rows.Add(Resources.CommonListManage.Extension, _versionFileDoc.FileAttach.FileName.Substring(_versionFileDoc.FileAttach.FileName.LastIndexOf(".") + 1));
                _dt.Rows.Add(Resources.CommonListManage.DocSize, _versionFileDoc.DocSize);
                _dt.Rows.Add(Resources.CommonListManage.DocType, _versionFileDoc.DocType);
            }
            else
            {
                _versionFileUrl = (Condesus.EMS.Business.KC.Entities.VersionURL)_versionFile;

                //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
                _dt.ExtendedProperties.Add("PageTitle", _versionFileUrl.Url);

                //Carga los datos
                _dt.Rows.Add(Resources.CommonListManage.CatalogType, Resources.CommonListManage.CatalogUrl);
                _dt.Rows.Add(Resources.CommonListManage.Name, _versionFileUrl.Url);
            }

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        #region Resources
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion KCResources.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable KCResources(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("Resource");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdResource;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdResource", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdResourceType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdResourceType", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdResourceFile;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdResourceFile", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Type;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "Type", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Title;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Title", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Description;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "Description", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Version;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "Version", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.ResourceType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "ResourceType", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Name;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = false;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Status;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "ResourceStatus", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                String _permissionType = String.Empty;
                //Obtiene el permiso que tiene el usuario para esa organizacion.
                if (EMSLibrary.User.KnowledgeCollaboration.Map.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                { _permissionType = Common.Constants.PermissionManageName; }
                else
                { _permissionType = Common.Constants.PermissionViewName; }

                if (param.ContainsKey("IdResourceClassification"))
                {
                    Int64 _idResourceClassification = Convert.ToInt64(param["IdResourceClassification"]);
                    //Ya esta armado el DataTable, ahora lo carga
                    foreach (Condesus.EMS.Business.KC.Entities.Resource _resource in EMSLibrary.User.KnowledgeCollaboration.Map.ResourceClassification(_idResourceClassification).ChildrenElements.Values)
                    {
                        String _version = String.Empty;
                        String _fileUrl = String.Empty;
                        String _resourceType = String.Empty;
                        Boolean _inserted = false; 
                        //Si es de tipo File, entonces saco la version del current...sino queda vacio.
                        if (_resource.GetType().Name == "ResourceVersion")
                        {
                            Condesus.EMS.Business.KC.Entities.ResourceVersion _resourceFile = (Condesus.EMS.Business.KC.Entities.ResourceVersion)_resource;
                            if (_resourceFile.CurrentVersion!= null)
                            {
                                _version = _resourceFile.CurrentVersion.VersionNumber.ToString();

                                //Solo deberia mostrar el file que corresponde al Activo.
                                if (_resourceFile.CurrentVersion.GetType().Name == "VersionURL")
                                {
                                    _fileUrl = ((Condesus.EMS.Business.KC.Entities.VersionURL)_resourceFile.CurrentVersion).Url;
                                    _resourceType = "URL";  // Resources.CommonListManage.URL + " - " + _processResource.Resource.ResourceType.LanguageOption.Name;
                                }
                                else
                                {
                                    _fileUrl = ((Condesus.EMS.Business.KC.Entities.VersionDoc)_resourceFile.CurrentVersion).FileAttach.FileName;
                                    _resourceType = "DOC";   //Resources.CommonListManage.File + " - " + _processResource.Resource.ResourceType.LanguageOption.Name;
                                }
                                
                                _inserted = true;
                                String _status = "OK";
                                var _lnqResourceFileExce = from resourceFileExce in _resourceFile.Exceptions.Values
                                                           where resourceFileExce.ExceptionState.IdExceptionState != 3
                                                           select resourceFileExce;
                                if (_lnqResourceFileExce.Count() > 0)
                                {
                                    _status = "Overdue";
                                }
                                _dt.Rows.Add(_resource.IdResource, _resource.ResourceType.IdResourceType, _resourceFile.CurrentVersion.IdResourceFile,
                                    _resourceFile.ResourceType.LanguageOption.Name, _resource.LanguageOption.Title,
                                    _resource.LanguageOption.Description, _version, _resource.ResourceType.LanguageOption.Name, _fileUrl, _permissionType, _status);

                            }

                        }
                        if (!_inserted)
                        {
                            _dt.Rows.Add(_resource.IdResource, _resource.ResourceType.IdResourceType, 0, String.Empty, _resource.LanguageOption.Title,
                                _resource.LanguageOption.Description, _version, _resource.ResourceType.LanguageOption.Name, String.Empty, _permissionType, "OK");
                        }
                        _inserted = false;
                    }
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del KCResource.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable KCResource(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("Resource");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

            Int64 _idResource = Convert.ToInt64(param["IdResource"]);

            Condesus.EMS.Business.KC.Entities.Resource _resource = EMSLibrary.User.KnowledgeCollaboration.Map.Resource(_idResource);

            Condesus.EMS.Business.KC.Entities.ResourceVersion _resourceFile = null;
            Condesus.EMS.Business.KC.Entities.ResourceCatalog _resourceCatalog = null;


            if (_resource.GetType().Name == "ResourceVersion")
            {
                _resourceFile = (Condesus.EMS.Business.KC.Entities.ResourceVersion)_resource;

                //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
                _dt.ExtendedProperties.Add("PageTitle", _resourceFile.LanguageOption.Title);

                _dt.Rows.Add(Resources.CommonListManage.ResourceType, Resources.CommonListManage.ResourceVersion);
                _dt.Rows.Add(Resources.CommonListManage.Title, _resourceFile.LanguageOption.Title);
                _dt.Rows.Add(Resources.CommonListManage.Description, _resourceFile.LanguageOption.Description);

                Condesus.EMS.Business.KC.Entities.Version _versionFile = _resourceFile.CurrentVersion;

                if (_versionFile != null)
                {
                    if (_versionFile.GetType().Name == "VersionURL")
                    {
                        _dt.Rows.Add(Resources.CommonListManage.FileName, ((Condesus.EMS.Business.KC.Entities.VersionURL)_versionFile).Url);
                    }
                    else
                    {
                        _dt.Rows.Add(Resources.CommonListManage.FileName, ((Condesus.EMS.Business.KC.Entities.VersionDoc)_versionFile).FileAttach.FileName);
                    }
                }
            }
            else
            {
                _resourceCatalog = (Condesus.EMS.Business.KC.Entities.ResourceCatalog)_resource;

                //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
                _dt.ExtendedProperties.Add("PageTitle", _resourceCatalog.LanguageOption.Title);

                //Carga los datos
                _dt.Rows.Add(Resources.CommonListManage.ResourceType, Resources.CommonListManage.ResourceCatalog);
                _dt.Rows.Add(Resources.CommonListManage.Title, _resourceCatalog.LanguageOption.Title);
                _dt.Rows.Add(Resources.CommonListManage.Description, _resourceCatalog.LanguageOption.Description);
            }

            //Retorna el DataTable.
            return _dt;
        }
        /// <summary>
        /// Indica si ese Resource tiene hijos o no.(Los elementos no tienen hijos...)
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un<c>Boolean</c></returns>
        public Boolean KCResourcesHasChildren(Dictionary<String, Object> param)
        {
            return false;
        }
        #endregion

        #region Resource Extended Properties
            /// <summary>
            /// Construye el DataTable a modo List con los datos de la Coleccion Resource Extended Properties.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable ResourceExtendedProperties(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable("ResourceExtendedProperty");

                //Contruye las columnas y sus atributos.
                ColumnOptions _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdExtendedProperty;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdExtendedProperty", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdResource;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdResource", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdExtendedPropertyClassification;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdExtendedPropertyClassification", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Classification;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = true;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = true;
                _columnOptions.IsSortedBy = true;
                BuildColumnsDataTable(ref _dt, "Classification", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.ExtendedProperty;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = true;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = true;
                _columnOptions.IsContextMenuCaption = true;
                _columnOptions.IsSortedBy = true;
                BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Value;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = true;
                BuildColumnsDataTable(ref _dt, "Value", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

                //Cuando implementemos la opcion de traer todo en un filtro.
                if (param.ContainsKey("IdResource"))
                {
                    Int64 _idResource = Convert.ToInt64(param["IdResource"]);
                    Condesus.EMS.Business.KC.Entities.Resource _resource = (Condesus.EMS.Business.KC.Entities.Resource)EMSLibrary.User.KnowledgeCollaboration.Map.Resource(_idResource);
                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (EMSLibrary.User.KnowledgeCollaboration.Map.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    //Ya esta armado el DataTable, ahora lo carga
                    foreach (ExtendedPropertyValue _resourceExtendedProperty in _resource.ExtendedPropertyValues)
                    {
                        _dt.Rows.Add(_resourceExtendedProperty.ExtendedProperty.IdExtendedProperty, _idResource,
                            _resourceExtendedProperty.ExtendedProperty.ExtendedPropertyClassification.IdExtendedPropertyClassification,
                            _resourceExtendedProperty.ExtendedProperty.ExtendedPropertyClassification.LanguageOption.Name,
                            _resourceExtendedProperty.ExtendedProperty.LanguageOption.Name, _resourceExtendedProperty.Value, _permissionType);
                    }
                }
                //Retorna el DataTable
                return _dt;
            }
            /// <summary>
            /// Construye el DataTable a modo Property con los datos del Resource Extended Property.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable ResourceExtendedProperty(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable("ResourceExtendedProperty");

                //Contruye las columnas y sus atributos.
                BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
                BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
                BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

                Int64 _idResource = Convert.ToInt64(param["IdResource"]);
                Int64 _idResourceExtendedProperty = Convert.ToInt64(param["IdExtendedProperty"]);

                ExtendedPropertyValue _resourceExtendedProperty = EMSLibrary.User.KnowledgeCollaboration.Map.Resource(_idResource).ExtendedPropertyValue(_idResourceExtendedProperty);

                _dt.ExtendedProperties.Add("PageTitle", Common.Functions.ReplaceIndexesTags(_resourceExtendedProperty.ExtendedProperty.LanguageOption.Name));

                Int16 i = 0;//Se genera este contador, para evitar claves duplicadas, es porque no todos los registros tienen link.            
                Dictionary<String, Object> _valueLink = new Dictionary<String, Object>();
                _valueLink.Add("IdExtendedPropertyClassification", _resourceExtendedProperty.ExtendedProperty.ExtendedPropertyClassification.IdExtendedPropertyClassification);

                //Carga los datos
                _dt.Rows.Add(Resources.CommonListManage.ExtendedPropertyClassification, _resourceExtendedProperty.ExtendedProperty.ExtendedPropertyClassification.LanguageOption.Name,
                    GetValueLink(Common.ConstantsEntitiesName.PF.ExtendedPropertyClassification, _valueLink));
                _dt.Rows.Add(Resources.CommonListManage.Name, _resourceExtendedProperty.ExtendedProperty.LanguageOption.Name, "#" + i++);
                _dt.Rows.Add(Resources.CommonListManage.Value, _resourceExtendedProperty.Value, "#" + i++);

                //Retorna el DataTable.
                return _dt;
            }
            /// <summary>
            /// Construye el List de Propiedades Extendidas para la Resource
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public ExtendedPropertyValue ResourceExtendedPropertyValues(Dictionary<String, Object> param)
            {
                Int64 _idResource = Convert.ToInt64(param["IdResource"]);
                Int64 _idExtendedProperty = Convert.ToInt64(param["IdExtendedProperty"]);

                return EMSLibrary.User.KnowledgeCollaboration.Map.Resource(_idResource).ExtendedPropertyValue(_idExtendedProperty);
            }
        #endregion

        #endregion

        #region Performance Assessment

            #region Constant
                /// <summary>
                /// Construye el DataTable a modo List con los datos de la Coleccion Constants.
                /// </summary>
                /// <param name="param">Parametros opcionales para filtrar</param>
                /// <returns>Un <c>DataTable</c></returns>
                public DataTable Constants(Dictionary<String, Object> param)
                {
                    //Construye el datatable
                    DataTable _dt = BuildDataTable("Constants");

                    //Contruye las columnas y sus atributos.
                    ColumnOptions _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.IdConstant;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                    _columnOptions.IsPrimaryKey = true;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = false;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    BuildColumnsDataTable(ref _dt, "IdConstant", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.IdConstantClassification;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                    _columnOptions.IsPrimaryKey = true;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = false;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    BuildColumnsDataTable(ref _dt, "IdConstantClassification", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.Constant;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = true;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = true;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = true;
                    _columnOptions.IsSortedBy = true;
                    BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.Description;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = true;
                    _columnOptions.AllowNull = false;
                    BuildColumnsDataTable(ref _dt, "Description", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.MeasurementUnit;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = true;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = true;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = true;
                    _columnOptions.IsSortedBy = true;
                    BuildColumnsDataTable(ref _dt, "MeasurementUnit", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.Symbol;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    BuildColumnsDataTable(ref _dt, "Symbol", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.Value;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.Double");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    BuildColumnsDataTable(ref _dt, "Value", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = false;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

                    //Cuando implementemos la opcion de traer todo en un filtro.
                    Boolean _showAll = false;
                    if (ValidateSelectedItemComboBox(param, ref _showAll))
                    {
                        if (param.ContainsKey("IdConstantClassification"))
                        {
                            //Obtiene el Applicability
                            Int64 _idConstantClassification = Convert.ToInt64(param["IdConstantClassification"]);
                            String _permissionType = String.Empty;
                            //Obtiene el permiso que tiene el usuario para esa organizacion.
                            if (EMSLibrary.User.PerformanceAssessments.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                            { _permissionType = Common.Constants.PermissionManageName; }
                            else
                            { _permissionType = Common.Constants.PermissionViewName; }

                            if (_idConstantClassification > 0)
                            {
                                //Ya esta armado el DataTable, ahora lo carga
                                foreach (Constant _constant in EMSLibrary.User.PerformanceAssessments.Configuration.ConstantClassification(_idConstantClassification).Constants.Values)
                                {

                                    _dt.Rows.Add(_constant.IdConstant, _idConstantClassification, 
                                        Common.Functions.ReplaceIndexesTags(_constant.LanguageOption.Name), 
                                        _constant.LanguageOption.Description, 
                                        Common.Functions.ReplaceIndexesTags(_constant.MeasurementUnit.LanguageOption.Name), 
                                        Common.Functions.ReplaceIndexesTags(_constant.Symbol), 
                                        _constant.Value, _permissionType);
                                }
                            }
                        }
                    }
                    //Retorna el DataTable
                    return _dt;
                }
                /// <summary>
                /// Construye el DataTable a modo Property con los datos del Constants.
                /// </summary>
                /// <param name="param">Parametros opcionales para filtrar</param>
                /// <returns>Un <c>DataTable</c></returns>
                public DataTable Constant(Dictionary<String, Object> param)
                {
                    //Construye el datatable
                    DataTable _dt = BuildDataTable("Constant");

                    //Contruye las columnas y sus atributos.
                    BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
                    BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
                    BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

                    Int64 _idConstantClassification = Convert.ToInt64(param["IdConstantClassification"]); 
                    Int64 _idConstant = Convert.ToInt64(param["IdConstant"]);

                    ConstantClassification _constantClassification = EMSLibrary.User.PerformanceAssessments.Configuration.ConstantClassification(_idConstantClassification);
                    Constant _constant = _constantClassification.Constant(_idConstant);

                    //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
                    _dt.ExtendedProperties.Add("PageTitle", Common.Functions.ReplaceIndexesTags(_constant.LanguageOption.Name));

                    Int16 i = 0;//Se genera este contador, para evitar claves duplicadas, es porque no todos los registros tienen link.            
                    Dictionary<String, Object> _valueLink = new Dictionary<String, Object>();
                    _valueLink.Add("IdConstantClassification", _idConstantClassification);
                    _valueLink.Add("IdMagnitud", _constant.MeasurementUnit.Magnitud.IdMagnitud);
                    _valueLink.Add("IdMeasurementUnit", _constant.MeasurementUnit.IdMeasurementUnit);            
                    
                    //Carga los datos
                    _dt.Rows.Add(Resources.CommonListManage.ConstantClassification, Common.Functions.ReplaceIndexesTags(_constantClassification.LanguageOption.Name),
                        GetValueLink(Common.ConstantsEntitiesName.PA.ConstantClassification, _valueLink));
                    _dt.Rows.Add(Resources.CommonListManage.Name, Common.Functions.ReplaceIndexesTags(_constant.LanguageOption.Name), "#" + i++);
                    _dt.Rows.Add(Resources.CommonListManage.LanguageName, _constant.LanguageOption.Language.Name, "#" + i++);
                    _dt.Rows.Add(Resources.CommonListManage.Description, _constant.LanguageOption.Description, "#" + i++);
                    _dt.Rows.Add(Resources.CommonListManage.MeasurementUnit, Common.Functions.ReplaceIndexesTags(_constant.MeasurementUnit.LanguageOption.Name),
                        GetValueLink(Common.ConstantsEntitiesName.PA.MeasurementUnit, _valueLink));

                    _dt.Rows.Add(Resources.CommonListManage.Symbol, Common.Functions.ReplaceIndexesTags(_constant.Symbol), "#" + i++);
                    _dt.Rows.Add(Resources.CommonListManage.Value, _constant.Value, "#" + i++);

                    //Retorna el DataTable.
                    return _dt;
                }
            #endregion

            #region AccountingScenario
                /// <summary>
                /// Construye el DataTable a modo List con los datos de la Coleccion AccountingScenario.
                /// </summary>
                /// <param name="param">Parametros opcionales para filtrar</param>
                /// <returns>Un <c>DataTable</c></returns>
                public DataTable AccountingScenarios(Dictionary<String, Object> param)
                {
                    //Construye el datatable
                    DataTable _dt = BuildDataTable("AccountingScenarios");

                    //Contruye las columnas y sus atributos.
                    ColumnOptions _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.IdScenario;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                    _columnOptions.IsPrimaryKey = true;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = false;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    BuildColumnsDataTable(ref _dt, "IdScenario", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.AccountingScenario;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = true;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = true;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = true;
                    _columnOptions.IsSortedBy = true;
                    BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.Description;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = true;
                    _columnOptions.AllowNull = false;
                    BuildColumnsDataTable(ref _dt, "Description", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = false;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

                    //Obtiene el Applicability
                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (EMSLibrary.User.PerformanceAssessments.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    //Ya esta armado el DataTable, ahora lo carga
                    foreach (AccountingScenario _accountingScenario in EMSLibrary.User.PerformanceAssessments.Configuration.AccountingScenarios().Values)
                    {
                        _dt.Rows.Add(_accountingScenario.IdScenario, Common.Functions.ReplaceIndexesTags(_accountingScenario.LanguageOption.Name), _accountingScenario.LanguageOption.Description, _permissionType);
                    }

                    //Retorna el DataTable
                    return _dt;
                }
                /// <summary>
                /// Construye el DataTable a modo Property con los datos del AccountingScenario.
                /// </summary>
                /// <param name="param">Parametros opcionales para filtrar</param>
                /// <returns>Un <c>DataTable</c></returns>
                public DataTable AccountingScenario(Dictionary<String, Object> param)
                {
                    //Construye el datatable
                    DataTable _dt = BuildDataTable("AccountingScenario");

                    //Contruye las columnas y sus atributos.
                    BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
                    BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

                    Int64 _idScenario = Convert.ToInt64(param["IdScenario"]);

                    AccountingScenario _accountingScenario = EMSLibrary.User.PerformanceAssessments.Configuration.AccountingScenario(_idScenario);

                    //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
                    _dt.ExtendedProperties.Add("PageTitle", Common.Functions.ReplaceIndexesTags(_accountingScenario.LanguageOption.Name));

                    //Carga los datos
                    _dt.Rows.Add(Resources.CommonListManage.Name, _accountingScenario.LanguageOption.Name);
                    _dt.Rows.Add(Resources.CommonListManage.LanguageName, _accountingScenario.LanguageOption.Language.Name);
                    _dt.Rows.Add(Resources.CommonListManage.Description, _accountingScenario.LanguageOption.Description);

                    //Retorna el DataTable.
                    return _dt;
                }
            #endregion

            #region AccountingScope
                /// <summary>
                /// Construye el DataTable a modo List con los datos de la Coleccion AccountingScopes.
                /// </summary>
                /// <param name="param">Parametros opcionales para filtrar</param>
                /// <returns>Un <c>DataTable</c></returns>
                public DataTable AccountingScopes(Dictionary<String, Object> param)
                {
                    //Construye el datatable
                    DataTable _dt = BuildDataTable("AccountingScopes");

                    //Contruye las columnas y sus atributos.
                    ColumnOptions _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.IdScope;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                    _columnOptions.IsPrimaryKey = true;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = false;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    BuildColumnsDataTable(ref _dt, "IdScope", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.AccountingScope;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = true;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = true;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = true;
                    _columnOptions.IsSortedBy = true;
                    BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.Description;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = true;
                    _columnOptions.AllowNull = false;
                    BuildColumnsDataTable(ref _dt, "Description", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = false;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

                    //Obtiene el Applicability
                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (EMSLibrary.User.PerformanceAssessments.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    //Ya esta armado el DataTable, ahora lo carga
                    foreach (AccountingScope _accountingScope in EMSLibrary.User.PerformanceAssessments.Configuration.AccountingScopes().Values)
                    {
                        _dt.Rows.Add(_accountingScope.IdScope, Common.Functions.ReplaceIndexesTags(_accountingScope.LanguageOption.Name), _accountingScope.LanguageOption.Description, _permissionType);
                    }

                    //Retorna el DataTable
                    return _dt;
                }
                /// <summary>
                /// Construye el DataTable a modo Property con los datos del AccountingScope.
                /// </summary>
                /// <param name="param">Parametros opcionales para filtrar</param>
                /// <returns>Un <c>DataTable</c></returns>
                public DataTable AccountingScope(Dictionary<String, Object> param)
                {
                    //Construye el datatable
                    DataTable _dt = BuildDataTable("AccountingScope");

                    //Contruye las columnas y sus atributos.
                    BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
                    BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

                    Int64 _idScope = Convert.ToInt64(param["IdScope"]);

                    AccountingScope _accountingScope = EMSLibrary.User.PerformanceAssessments.Configuration.AccountingScope(_idScope);

                    //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
                    _dt.ExtendedProperties.Add("PageTitle", Common.Functions.ReplaceIndexesTags(_accountingScope.LanguageOption.Name));

                    //Carga los datos
                    _dt.Rows.Add(Resources.CommonListManage.Name, _accountingScope.LanguageOption.Name);
                    _dt.Rows.Add(Resources.CommonListManage.LanguageName, _accountingScope.LanguageOption.Language.Name);
                    _dt.Rows.Add(Resources.CommonListManage.Description, _accountingScope.LanguageOption.Description);

                    //Retorna el DataTable.
                    return _dt;
                }
            #endregion

            #region Methodology
                /// <summary>
                /// Construye el DataTable a modo List con los datos de la Coleccion Methodology.
                /// </summary>
                /// <param name="param">Parametros opcionales para filtrar</param>
                /// <returns>Un <c>DataTable</c></returns>
                public DataTable Methodologies(Dictionary<String, Object> param)
                {
                    //Construye el datatable
                    DataTable _dt = BuildDataTable("Methodology");
                    
                    //Contruye las columnas y sus atributos.
                    ColumnOptions _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.IdMethodology;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                    _columnOptions.IsPrimaryKey = true;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = false;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    BuildColumnsDataTable(ref _dt, "IdMethodology", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.Methodology;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = true;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = true;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = true;
                    _columnOptions.IsSortedBy = true;
                    BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.Description;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = true;
                    _columnOptions.AllowNull = false;
                    BuildColumnsDataTable(ref _dt, "Description", _columnOptions);
                    
                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.MethodType;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = true;
                    _columnOptions.AllowNull = false;
                    BuildColumnsDataTable(ref _dt, "MethodType", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = false;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

                    //Obtiene el Applicability
                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (EMSLibrary.User.PerformanceAssessments.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    //Ya esta armado el DataTable, ahora lo carga
                    foreach (Methodology _methodology in EMSLibrary.User.PerformanceAssessments.Configuration.Methodologies().Values)
                    {
                        _dt.Rows.Add(_methodology.IdMethodology, Common.Functions.ReplaceIndexesTags(_methodology.LanguageOption.MethodName), _methodology.LanguageOption.Description, _methodology.LanguageOption.MethodType, _permissionType);
                    }

                    //Retorna el DataTable
                    return _dt;
                }
                /// <summary>
                /// Construye el DataTable a modo Property con los datos del Methodology.
                /// </summary>
                /// <param name="param">Parametros opcionales para filtrar</param>
                /// <returns>Un <c>DataTable</c></returns>
                public DataTable Methodology(Dictionary<String, Object> param)
                {
                    //Construye el datatable
                    DataTable _dt = BuildDataTable("Methodology");

                    //Contruye las columnas y sus atributos.
                    BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
                    BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

                    Int64 _idMethodology = Convert.ToInt64(param["IdMethodology"]);

                    Methodology _methodology = EMSLibrary.User.PerformanceAssessments.Configuration.Methodology(_idMethodology);

                    //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
                    _dt.ExtendedProperties.Add("PageTitle", Common.Functions.ReplaceIndexesTags(_methodology.LanguageOption.MethodName));

                    //Carga los datos
                    _dt.Rows.Add(Resources.CommonListManage.Name, _methodology.LanguageOption.MethodName);
                    _dt.Rows.Add(Resources.CommonListManage.LanguageName, _methodology.LanguageOption.Language.Name);
                    _dt.Rows.Add(Resources.CommonListManage.Description, _methodology.LanguageOption.Description);
                    _dt.Rows.Add(Resources.CommonListManage.MethodType, _methodology.LanguageOption.MethodType);

                    //Retorna el DataTable.
                    return _dt;
                }
            #endregion

            #region Quality
                /// <summary>
                /// Construye el DataTable a modo List con los datos de la Coleccion Quality.
                /// </summary>
                /// <param name="param">Parametros opcionales para filtrar</param>
                /// <returns>Un <c>DataTable</c></returns>
                public DataTable Qualities(Dictionary<String, Object> param)
                {
                    //Construye el datatable
                    DataTable _dt = BuildDataTable("Quality");

                    //Contruye las columnas y sus atributos.
                    ColumnOptions _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.IdQuality;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                    _columnOptions.IsPrimaryKey = true;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = false;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    BuildColumnsDataTable(ref _dt, "IdQuality", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.Quality;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = true;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = true;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = true;
                    _columnOptions.IsSortedBy = true;
                    BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.Description;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = true;
                    _columnOptions.AllowNull = false;
                    BuildColumnsDataTable(ref _dt, "Description", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = false;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

                    //Obtiene el Applicability
                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (EMSLibrary.User.PerformanceAssessments.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    //Ya esta armado el DataTable, ahora lo carga
                    foreach (Quality _quality in EMSLibrary.User.PerformanceAssessments.Configuration.Qualities().Values)
                    {
                        _dt.Rows.Add(_quality.IdQuality, Common.Functions.ReplaceIndexesTags(_quality.LanguageOption.Name), _quality.LanguageOption.Description, _permissionType);
                    }

                    //Retorna el DataTable
                    return _dt;
                }
                /// <summary>
                /// Construye el DataTable a modo Property con los datos del Quality.
                /// </summary>
                /// <param name="param">Parametros opcionales para filtrar</param>
                /// <returns>Un <c>DataTable</c></returns>
                public DataTable Quality(Dictionary<String, Object> param)
                {
                    //Construye el datatable
                    DataTable _dt = BuildDataTable("Quality");

                    //Contruye las columnas y sus atributos.
                    BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
                    BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

                    Int64 _idQuality = Convert.ToInt64(param["IdQuality"]);

                    Quality _quality = EMSLibrary.User.PerformanceAssessments.Configuration.Quality(_idQuality);

                    //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
                    _dt.ExtendedProperties.Add("PageTitle", Common.Functions.ReplaceIndexesTags(_quality.LanguageOption.Name));

                    //Carga los datos
                    _dt.Rows.Add(Resources.CommonListManage.Name, _quality.LanguageOption.Name);
                    _dt.Rows.Add(Resources.CommonListManage.LanguageName, _quality.LanguageOption.Language.Name);
                    _dt.Rows.Add(Resources.CommonListManage.Description, _quality.LanguageOption.Description);

                    //Retorna el DataTable.
                    return _dt;
                }
            #endregion

            #region Config Excel File
                /// <summary>
                /// Construye el DataTable a modo List con los datos de la Coleccion Config Excel File.
                /// </summary>
                /// <param name="param">Parametros opcionales para filtrar</param>
                /// <returns>Un <c>DataTable</c></returns>
                public DataTable ConfigurationExcelFiles(Dictionary<String, Object> param)
                {
                    //Construye el datatable
                    DataTable _dt = BuildDataTable("ConfigurationExcelFiles");

                    //Contruye las columnas y sus atributos.
                    ColumnOptions _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.IdExcelFile;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                    _columnOptions.IsPrimaryKey = true;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = false;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    BuildColumnsDataTable(ref _dt, "IdExcelFile", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.Name;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = true;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = true;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = true;
                    _columnOptions.IsSortedBy = true;
                    BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = false;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

                    //Obtiene el Applicability
                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (EMSLibrary.User.PerformanceAssessments.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    //Ya esta armado el DataTable, ahora lo carga
                    foreach (ConfigurationExcelFile _configurationExcelFile in EMSLibrary.User.PerformanceAssessments.Configuration.ConfigurationExcelFiles().Values)
                    {
                        _dt.Rows.Add(_configurationExcelFile.IdExcelFile, Common.Functions.ReplaceIndexesTags(_configurationExcelFile.Name), _permissionType);
                    }

                    //Retorna el DataTable
                    return _dt;
                }
                /// <summary>
                /// Construye el DataTable a modo Property con los datos del Config Excel File.
                /// </summary>
                /// <param name="param">Parametros opcionales para filtrar</param>
                /// <returns>Un <c>DataTable</c></returns>
                public DataTable ConfigurationExcelFile(Dictionary<String, Object> param)
                {
                    //Construye el datatable
                    DataTable _dt = BuildDataTable("ConfigurationExcelFile");

                    //Contruye las columnas y sus atributos.
                    BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
                    BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

                    Int64 _idExcelFile = Convert.ToInt64(param["IdExcelFile"]);

                    ConfigurationExcelFile _configurationExcelFile = EMSLibrary.User.PerformanceAssessments.Configuration.ConfigurationExcelFile(_idExcelFile);

                    //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
                    _dt.ExtendedProperties.Add("PageTitle", Common.Functions.ReplaceIndexesTags(_configurationExcelFile.Name));

                    //Carga los datos
                    _dt.Rows.Add(Resources.CommonListManage.Name, _configurationExcelFile.Name);

                    //Retorna el DataTable.
                    return _dt;
                }
            #endregion


        #region Calculation Scenario Types
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion CalculationScenarioTypes.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable CalculationScenarioTypes(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("CalculationScenarioType");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdScenarioType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdScenarioType", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.ScenarioTypeName;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Description;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Description", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                if (param.ContainsKey("IdProcessClassification"))
                {
                    //Obtiene el Applicability
                    Int64 _idProcessClassification = Convert.ToInt64(param["IdProcessClassification"]);
                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (EMSLibrary.User.PerformanceAssessments.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    if (_idProcessClassification > 0)
                    {
                        //Ya esta armado el DataTable, ahora lo carga
                        foreach (CalculationScenarioType _calculationScenarioType in EMSLibrary.User.ProcessFramework.Map.ProcessClassification(_idProcessClassification).CalculationScenarioTypes().Values)
                        {
                            _dt.Rows.Add(_calculationScenarioType.IdScenarioType, Common.Functions.ReplaceIndexesTags(_calculationScenarioType.LanguageOption.Name), _calculationScenarioType.LanguageOption.Description, _permissionType);
                        }
                    }
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del CalculationScenarioType.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable CalculationScenarioType(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("CalculationScenarioType");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

            Int64 _idScenarioType = Convert.ToInt64(param["IdScenarioType"]);

            CalculationScenarioType _calculationScenarioType = EMSLibrary.User.PerformanceAssessments.Configuration.CalculationScenarioType(_idScenarioType);

            //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
            _dt.ExtendedProperties.Add("PageTitle", Common.Functions.ReplaceIndexesTags(_calculationScenarioType.LanguageOption.Name));

            //Carga los datos
            //_dt.Rows.Add(Resources.CommonListManage.IdScenarioType, _calculationScenarioType.IdScenarioType);
            _dt.Rows.Add(Resources.CommonListManage.Name, _calculationScenarioType.LanguageOption.Name);
            _dt.Rows.Add(Resources.CommonListManage.LanguageName, _calculationScenarioType.LanguageOption.Language.Name);
            _dt.Rows.Add(Resources.CommonListManage.Description, _calculationScenarioType.LanguageOption.Description);

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        #region Calculations
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion Calculations.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable Calculations(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("Calculation");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdCalculation;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdCalculation", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Calculation;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Description;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Description", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Formula;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Formula", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.DateLastResult;
            _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "DateLastResult", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Result;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Result", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.MeasurementUnit;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "MeasurementUnit", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            String _permissionType = String.Empty;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                if (param.ContainsKey("IdProcess"))
                {
                    //Agrega la columna el IdProcess
                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.IdProcess;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                    _columnOptions.IsPrimaryKey = true;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = false;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    BuildColumnsDataTable(ref _dt, "IdProcess", _columnOptions);

                    Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
                    ProcessGroupProcess _processGroupProcess = (ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess).Parent; //EMSLibrary.User.ProcessFramework.Map.ProcessGroupProcess(_idProcess);
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (_processGroupProcess.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    foreach (Calculation _calculation in _processGroupProcess.AssociatedCalculations.Values)
                    {
                        _dt.Rows.Add(_calculation.IdCalculation, Common.Functions.ReplaceIndexesTags(_calculation.LanguageOption.Name),
                            _calculation.LanguageOption.Description, Common.Functions.ReplaceIndexesTags(_calculation.Formula.LanguageOption.Name),
                            _calculation.DateLastResult, _calculation.LastResult,
                            Common.Functions.ReplaceIndexesTags(_calculation.MeasurementUnit.LanguageOption.Name), _permissionType, _idProcess);
                    }
                }
                else
                {
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (EMSLibrary.User.PerformanceAssessments.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    //Ya esta armado el DataTable, ahora lo carga
                    foreach (Calculation _calculation in EMSLibrary.User.PerformanceAssessments.Configuration.Calculations().Values)
                    {
                        _dt.Rows.Add(_calculation.IdCalculation, Common.Functions.ReplaceIndexesTags(_calculation.LanguageOption.Name),
                            _calculation.LanguageOption.Description, Common.Functions.ReplaceIndexesTags(_calculation.Formula.LanguageOption.Name),
                            _calculation.DateLastResult, _calculation.LastResult,
                            Common.Functions.ReplaceIndexesTags(_calculation.MeasurementUnit.LanguageOption.Name), _permissionType);
                    }
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del Calculation.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable Calculation(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("Calculation");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            Int64 _idCalculation = Convert.ToInt64(param["IdCalculation"]);

            Calculation _calculation = EMSLibrary.User.PerformanceAssessments.Configuration.Calculation(_idCalculation);

            _dt.ExtendedProperties.Add("PageTitle", Common.Functions.ReplaceIndexesTags(_calculation.LanguageOption.Name));

            Int16 i = 0;//Se genera este contador, para evitar claves duplicadas, es porque no todos los registros tienen link.            
            Dictionary<String, Object> _valueLink = new Dictionary<String, Object>();
            _valueLink.Add("IdTimeUnit", _calculation.TimeUnitFrequency.IdTimeUnit);
            _valueLink.Add("IdMeasurementUnit", _calculation.MeasurementUnit.IdMeasurementUnit);
            _valueLink.Add("IdMagnitud", _calculation.MeasurementUnit.Magnitud.IdMagnitud);
            _valueLink.Add("IdFormula", _calculation.Formula.IdFormula);            

            //Carga los datos
            //_dt.Rows.Add(Resources.CommonListManage.IdCalculation, _calculation.IdCalculation, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.Name, Common.Functions.ReplaceIndexesTags(_calculation.LanguageOption.Name), "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.LanguageName, _calculation.LanguageOption.Language.Name, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.Description, _calculation.LanguageOption.Description, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.TimeUnitFrequency, _calculation.TimeUnitFrequency.LanguageOption.Name,
                GetValueLink(Common.ConstantsEntitiesName.PF.TimeUnit, _valueLink));
            _dt.Rows.Add(Resources.CommonListManage.MeasurementUnit, Common.Functions.ReplaceIndexesTags(_calculation.MeasurementUnit.LanguageOption.Name),
                GetValueLink(Common.ConstantsEntitiesName.PA.MeasurementUnit, _valueLink));
            _dt.Rows.Add(Resources.CommonListManage.Frequency, _calculation.Frequency, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.Formula, Common.Functions.ReplaceIndexesTags(_calculation.Formula.LanguageOption.Name),
                GetValueLink(Common.ConstantsEntitiesName.PA.Formula, _valueLink));
            _dt.Rows.Add(Resources.CommonListManage.CreationDate, _calculation.CreationDate, "#" + i++);

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        #region Calculation Estimates
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion Calculation Estimates.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable CalculationEstimates(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("CalculationEstimate");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdCalculation;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdCalculation", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdEstimated;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdEstimated", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdScenarioType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdScenarioType", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.ScenarioTypeName;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "ScenarioTypeName", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.CalculateName;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "CalculateName", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.StartDate;
            _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "StartDate", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.EndDate;
            _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "EndDate", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Value;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Value", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                if (param.ContainsKey("IdCalculation"))
                {
                    Int64 _idCalculation = Convert.ToInt64(param["IdCalculation"]);
                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (EMSLibrary.User.PerformanceAssessments.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    //Ya esta armado el DataTable, ahora lo carga
                    foreach (CalculationEstimated _calculationEstimated in EMSLibrary.User.PerformanceAssessments.Configuration.Calculation(_idCalculation).CalculationEstimates)
                    {
                        _dt.Rows.Add(_calculationEstimated.Calculation.IdCalculation,
                            _calculationEstimated.IdEstimated,
                            _calculationEstimated.CalculationScenarioType.IdScenarioType,
                            Common.Functions.ReplaceIndexesTags(_calculationEstimated.CalculationScenarioType.LanguageOption.Name),
                            Common.Functions.ReplaceIndexesTags(_calculationEstimated.Calculation.LanguageOption.Name),
                            _calculationEstimated.StartDate,
                            _calculationEstimated.EndDate,
                            _calculationEstimated.Value, _permissionType);
                    }
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del Calculation Estimate.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable CalculationEstimate(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("CalculationEstimate");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            Int64 _idCalculation = Convert.ToInt64(param["IdCalculation"]);
            Int64 _idCalculationEstimated = Convert.ToInt64(param["IdEstimated"]);

            CalculationEstimated _calculationEstimated = EMSLibrary.User.PerformanceAssessments.Configuration.Calculation(_idCalculation).CalculationEstimated(_idCalculationEstimated);

            _dt.ExtendedProperties.Add("PageTitle", Common.Functions.ReplaceIndexesTags(_calculationEstimated.Calculation.LanguageOption.Name));

            Int16 i = 0;//Se genera este contador, para evitar claves duplicadas, es porque no todos los registros tienen link.            
            Dictionary<String, Object> _valueLink = new Dictionary<String, Object>();
            _valueLink.Add("IdCalculation", _calculationEstimated.Calculation.IdCalculation);
            _valueLink.Add("IdScenarioType", _calculationEstimated.CalculationScenarioType.IdScenarioType);

            //Carga los datos
            //_dt.Rows.Add(Resources.CommonListManage.IdEstimated, _calculationEstimated.IdEstimated, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.CalculateName, Common.Functions.ReplaceIndexesTags(_calculationEstimated.Calculation.LanguageOption.Name),
                GetValueLink(Common.ConstantsEntitiesName.PA.Calculation, _valueLink));
            _dt.Rows.Add(Resources.CommonListManage.ScenarioTypeName, Common.Functions.ReplaceIndexesTags(_calculationEstimated.CalculationScenarioType.LanguageOption.Name),
                GetValueLink(Common.ConstantsEntitiesName.PA.CalculationScenarioType, _valueLink));
            _dt.Rows.Add(Resources.CommonListManage.StartDate, _calculationEstimated.StartDate, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.EndDate, _calculationEstimated.EndDate, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.Value, _calculationEstimated.Value, "#" + i++);

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        #region Calculation Certificates
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion Calculation Certificates.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable CalculationCertificates(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("CalculationCertificate");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdCalculation;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdCalculation", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdCertificated;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdCertificated", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdOrganizationDOE;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdOrganizationDOE", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.OrganizationNameDOE;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "OrganizationNameDOE", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.CalculateName;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "CalculateName", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.StartDate;
            _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "StartDate", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.EndDate;
            _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "EndDate", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Value;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Value", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                if (param.ContainsKey("IdCalculation"))
                {
                    Int64 _idCalculation = Convert.ToInt64(param["IdCalculation"]);
                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (EMSLibrary.User.PerformanceAssessments.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    //Ya esta armado el DataTable, ahora lo carga
                    foreach (CalculationCertificated _calculationCertificated in EMSLibrary.User.PerformanceAssessments.Configuration.Calculation(_idCalculation).CalculationCertificates)
                    {
                        _dt.Rows.Add(_calculationCertificated.Calculation.IdCalculation,
                            _calculationCertificated.IdCertificated,
                            _calculationCertificated.IdOrganizationDOE,
                            EMSLibrary.User.DirectoryServices.Map.Organization(_calculationCertificated.IdOrganizationDOE).CorporateName,
                            Common.Functions.ReplaceIndexesTags(_calculationCertificated.Calculation.LanguageOption.Name),
                            _calculationCertificated.StartDate,
                            _calculationCertificated.EndDate,
                            _calculationCertificated.Value, _permissionType);
                    }
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del Calculation Certificate.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable CalculationCertificate(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("CalculationCertificate");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            Int64 _idCalculation = Convert.ToInt64(param["IdCalculation"]);
            Int64 _idCertificated = Convert.ToInt64(param["IdCertificated"]);

            CalculationCertificated _calculationCertificated = EMSLibrary.User.PerformanceAssessments.Configuration.Calculation(_idCalculation).CalculationCertificated(_idCertificated);

            _dt.ExtendedProperties.Add("PageTitle", Common.Functions.ReplaceIndexesTags(_calculationCertificated.Calculation.LanguageOption.Name));

            Int16 i = 0;//Se genera este contador, para evitar claves duplicadas, es porque no todos los registros tienen link.            
            Dictionary<String, Object> _valueLink = new Dictionary<String, Object>();
            _valueLink.Add("IdCalculation", _calculationCertificated.Calculation.IdCalculation);
            _valueLink.Add("IdOrganization", _calculationCertificated.IdOrganizationDOE);           

            //Carga los datos
            //_dt.Rows.Add(Resources.CommonListManage.IdCertificated, _calculationCertificated.IdCertificated, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.CalculateName, Common.Functions.ReplaceIndexesTags(_calculationCertificated.Calculation.LanguageOption.Name),
                GetValueLink(Common.ConstantsEntitiesName.PA.Calculation, _valueLink));
            _dt.Rows.Add(Resources.CommonListManage.OrganizationNameDOE, EMSLibrary.User.DirectoryServices.Map.Organization(_calculationCertificated.IdOrganizationDOE).CorporateName,
                GetValueLink(Common.ConstantsEntitiesName.DS.Organization, _valueLink));
            _dt.Rows.Add(Resources.CommonListManage.StartDate, _calculationCertificated.StartDate, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.EndDate, _calculationCertificated.EndDate, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.Value, _calculationCertificated.Value, "#" + i++);

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        #region Formulas
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion Formulas.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable Formulas(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("Formula");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdFormula;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdFormula", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Formula;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Description;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "Description", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.LiteralFormula;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "LiteralFormula", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            _columnOptions.ColumnCaption = Resources.CommonListManage.ResourceType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "ResourceType", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdResource;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdResource", _columnOptions);

            _columnOptions.ColumnCaption = Resources.CommonListManage.IdResourceFile;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdResourceFile", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            String _resourceType = "DOC";
            Int64 _idResource = 0;
            Int64 _idResourceFile = 0;
            Boolean _showAll = false;
            String _permissionType = String.Empty;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                if (param.ContainsKey("IdIndicator"))
                {
                    //Obtiene el Applicability
                    Int64 _idIndicator = Convert.ToInt64(param["IdIndicator"]);
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    Indicator _indicator = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator);
                    if (EMSLibrary.User.PerformanceAssessments.Map.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    var _formulaByIndicator = from f in EMSLibrary.User.PerformanceAssessments.Configuration.Formulas().Values
                                              where f.Indicator.IdIndicator == _idIndicator
                                              select f;

                    //Ya esta armado el DataTable, ahora lo carga
                    foreach (Formula _formula in _formulaByIndicator)
                    {
                        if (_formula.ResourceVersion != null)
                        {
                            //Mas estas columnas...
                            if (_formula.ResourceVersion.CurrentVersion.GetType().Name == "VersionURL")
                            {
                                _resourceType = "URL";
                            }
                            else
                            {
                                _resourceType = "DOC";
                            }
                            _idResource = _formula.ResourceVersion.IdResource;
                            _idResourceFile = _formula.ResourceVersion.CurrentVersion.IdResourceFile;

                            _dt.Rows.Add(_formula.IdFormula, Common.Functions.ReplaceIndexesTags(_formula.LanguageOption.Name), Common.Functions.ReplaceIndexesTags(_formula.LanguageOption.Desciption), Common.Functions.ReplaceIndexesTags(_formula.LiteralFormula), _permissionType, _resourceType, _idResource, _idResourceFile);
                        }
                        else
                        {
                            //_dt.Rows.Add(_formula.IdFormula, Common.Functions.ReplaceIndexesTags(_formula.LanguageOption.Name), Common.Functions.ReplaceIndexesTags(_formula.LanguageOption.Desciption), Common.Functions.ReplaceIndexesTags(_formula.LiteralFormula), _permissionType);
                            _dt.Rows.Add(_formula.IdFormula, Common.Functions.ReplaceIndexesTags(_formula.LanguageOption.Name), Common.Functions.ReplaceIndexesTags(_formula.LanguageOption.Desciption), Common.Functions.ReplaceIndexesTags(_formula.LiteralFormula), _permissionType, _resourceType, _idResource, _idResourceFile);
                        }
                    }
                }
                else
                {
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (EMSLibrary.User.PerformanceAssessments.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    //Ya esta armado el DataTable, ahora lo carga
                    foreach (Formula _formula in EMSLibrary.User.PerformanceAssessments.Configuration.Formulas().Values)
                    {
                        if (_formula.ResourceVersion != null)
                        {
                            
                            //Mas estas columnas...
                            //Mas estas columnas...
                            if (_formula.ResourceVersion.CurrentVersion.GetType().Name == "VersionURL")
                            {
                                _resourceType = "URL";
                            }
                            else
                            {
                                _resourceType = "DOC";
                            }
                            _idResource = _formula.ResourceVersion.IdResource;
                            _idResourceFile = _formula.ResourceVersion.CurrentVersion.IdResourceFile;
                            
                            _dt.Rows.Add(_formula.IdFormula, Common.Functions.ReplaceIndexesTags(_formula.LanguageOption.Name), Common.Functions.ReplaceIndexesTags(_formula.LanguageOption.Desciption), Common.Functions.ReplaceIndexesTags(_formula.LiteralFormula), _permissionType, _resourceType, _formula.ResourceVersion.IdResource, _formula.ResourceVersion.CurrentVersion.IdResourceFile);
                        }
                        else
                        {
                            //_dt.Rows.Add(_formula.IdFormula, Common.Functions.ReplaceIndexesTags(_formula.LanguageOption.Name), Common.Functions.ReplaceIndexesTags(_formula.LanguageOption.Desciption), Common.Functions.ReplaceIndexesTags(_formula.LiteralFormula), _permissionType);
                            _dt.Rows.Add(_formula.IdFormula, Common.Functions.ReplaceIndexesTags(_formula.LanguageOption.Name), Common.Functions.ReplaceIndexesTags(_formula.LanguageOption.Desciption), Common.Functions.ReplaceIndexesTags(_formula.LiteralFormula), _permissionType, _resourceType, _idResource, _idResourceFile);
                        }
                    }
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del Formula.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable Formula(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("Formula");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

            Int64 _idFormula = Convert.ToInt64(param["IdFormula"]);

            Formula _formula = EMSLibrary.User.PerformanceAssessments.Configuration.Formula(_idFormula);

            _dt.ExtendedProperties.Add("PageTitle", Common.Functions.ReplaceIndexesTags(_formula.LanguageOption.Name));

            //Carga los datos
            //_dt.Rows.Add(Resources.CommonListManage.IdFormula, _formula.IdFormula);
            _dt.Rows.Add(Resources.CommonListManage.Name, _formula.LanguageOption.Name);
            _dt.Rows.Add(Resources.CommonListManage.LanguageName, _formula.LanguageOption.Language.Name);
            _dt.Rows.Add(Resources.CommonListManage.Description, _formula.LanguageOption.Desciption);
            _dt.Rows.Add(Resources.CommonListManage.LiteralFormula, _formula.LiteralFormula);

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        #region Indicators
            /// <summary>
            /// Construye el DataTable a modo List con los datos de la Coleccion Indicators.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable Indicators(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable("Indicator");

                //Contruye las columnas y sus atributos.
                ColumnOptions _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdIndicator;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdIndicator", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Indicator;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = true;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = true;
                _columnOptions.IsSortedBy = true;
                BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Description;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = true;
                BuildColumnsDataTable(ref _dt, "Description", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Scope;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = true;
                BuildColumnsDataTable(ref _dt, "Scope", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Limitation;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = true;
                BuildColumnsDataTable(ref _dt, "Limitation", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Definition;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = true;
                BuildColumnsDataTable(ref _dt, "Definition", _columnOptions);
                
                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

                //Cuando implementemos la opcion de traer todo en un filtro.
                Boolean _showAll = false;
                String _permissionType = String.Empty;
                if (ValidateSelectedItemComboBox(param, ref _showAll))
                {
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (EMSLibrary.User.PerformanceAssessments.Map.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    Dictionary<Int64, Indicator> _indicators = new Dictionary<Int64, Indicator>();
                    Int64 _idIndicatorClassification = 0;
                    if (param.ContainsKey("IdIndicatorClassification"))
                    {
                        _idIndicatorClassification = Convert.ToInt64(param["IdIndicatorClassification"]);
                        _indicators = EMSLibrary.User.PerformanceAssessments.Map.IndicatorClassification(_idIndicatorClassification).ChildrenElements;
                        ////Ya esta armado el DataTable, ahora lo carga
                        //foreach (Indicator _indicator in EMSLibrary.User.PerformanceAssessments.Map.IndicatorClassification(_idIndicatorClassification).ChildrenElements.Values)
                        //{
                        //    _dt.Rows.Add(_indicator.IdIndicator, Common.Functions.ReplaceIndexesTags(_indicator.LanguageOption.Name), _indicator.LanguageOption.Description, _indicator.LanguageOption.Scope, _indicator.LanguageOption.Limitation, _indicator.LanguageOption.Definition, _permissionType);
                        //}
                    }
                    else
                    {
                        _indicators = EMSLibrary.User.PerformanceAssessments.Map.IndicatorRoots();
                        //Trae los indicadores que no tienen clasificacion
                        //foreach (Indicator _indicator in EMSLibrary.User.PerformanceAssessments.Map.IndicatorRoots().Values)
                        //{
                        //    _dt.Rows.Add(_indicator.IdIndicator, Common.Functions.ReplaceIndexesTags(_indicator.LanguageOption.Name), _indicator.LanguageOption.Description, _indicator.LanguageOption.Scope, _indicator.LanguageOption.Limitation, _indicator.LanguageOption.Definition, _permissionType);
                        //}
                    }

                    var _lnqIndicator = from indicator in _indicators.Values
                                        orderby indicator.LanguageOption.Name ascending
                                        select indicator;
                    //Trae los indicadores que no tienen clasificacion
                    foreach (Indicator _indicator in _lnqIndicator)
                    {
                        _dt.Rows.Add(_indicator.IdIndicator, Common.Functions.ReplaceIndexesTags(_indicator.LanguageOption.Name), _indicator.LanguageOption.Description, _indicator.LanguageOption.Scope, _indicator.LanguageOption.Limitation, _indicator.LanguageOption.Definition, _permissionType);
                    }
                }
                //Retorna el DataTable
                return _dt;
            }
            /// <summary>
            /// Construye el DataTable a modo Property con los datos del Indicator.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable Indicator(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable("Indicator");

                //Contruye las columnas y sus atributos.
                BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
                BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

                Int64 _idIndicator = Convert.ToInt64(param["IdIndicator"]);

                Indicator _indicator = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator);

                _dt.ExtendedProperties.Add("PageTitle", Common.Functions.ReplaceIndexesTags(_indicator.LanguageOption.Name));

                //Carga los datos
                //_dt.Rows.Add(Resources.CommonListManage.IdIndicator, _indicator.IdIndicator);
                _dt.Rows.Add(Resources.CommonListManage.Name, Common.Functions.ReplaceIndexesTags(_indicator.LanguageOption.Name));
                _dt.Rows.Add(Resources.CommonListManage.LanguageName, _indicator.LanguageOption.Language.Name);
                _dt.Rows.Add(Resources.CommonListManage.Description, _indicator.LanguageOption.Description);
                _dt.Rows.Add(Resources.CommonListManage.Scope, _indicator.LanguageOption.Scope);
                _dt.Rows.Add(Resources.CommonListManage.Limitation, _indicator.LanguageOption.Limitation);
                _dt.Rows.Add(Resources.CommonListManage.Definition, _indicator.LanguageOption.Definition);
                _dt.Rows.Add(Resources.CommonListManage.Magnitud, _indicator.Magnitud.LanguageOption.Name);
                _dt.Rows.Add(Resources.CommonListManage.IsCumulative, _indicator.IsCumulative);

                //Retorna el DataTable.
                return _dt;
            }
            /// <summary>
            /// Indica si esa Indicator tiene hijos o no.(Los elementos no tienen hijos...)
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un<c>Boolean</c></returns>
            public Boolean IndicatorsHasChildren(Dictionary<String, Object> param)
            {
                return false;
            }
            /// <summary>
            /// Indica si esa Indicator tiene ParameterGroup.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un<c>Boolean</c></returns>
            public Boolean IndicatorsHasParameterGroup(Dictionary<String, Object> param)
            {
                Int64 _idIndicator = Convert.ToInt64(param["IdIndicator"]);
                if (EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator).ParameterGroups.Count > 0)
                { return true; }

                return false;
            }
        #endregion

        #region Magnitudes
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion Magnitudes.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable Magnitudes(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("Magnitud");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdMagnitud;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdMagnitud", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Magnitud;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                String _permissionType = String.Empty;
                //Obtiene el permiso que tiene el usuario para esa organizacion.
                if (EMSLibrary.User.PerformanceAssessments.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                { _permissionType = Common.Constants.PermissionManageName; }
                else
                { _permissionType = Common.Constants.PermissionViewName; }

                //Ya esta armado el DataTable, ahora lo carga
                foreach (Magnitud _magnitud in EMSLibrary.User.PerformanceAssessments.Configuration.Magnitudes().Values)
                {
                    _dt.Rows.Add(_magnitud.IdMagnitud, Common.Functions.ReplaceIndexesTags(_magnitud.LanguageOption.Name), _permissionType);
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del Magnitud.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable Magnitud(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("Magnitud");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

            Int64 _idMagnitud = Convert.ToInt64(param["IdMagnitud"]);

            Magnitud _magnitud = EMSLibrary.User.PerformanceAssessments.Configuration.Magnitud(_idMagnitud);

            _dt.ExtendedProperties.Add("PageTitle", Common.Functions.ReplaceIndexesTags(_magnitud.LanguageOption.Name));

            //Carga los datos
            //_dt.Rows.Add(Resources.CommonListManage.IdMagnitud, _magnitud.IdMagnitud);
            _dt.Rows.Add(Resources.CommonListManage.Name, _magnitud.LanguageOption.Name);
            _dt.Rows.Add(Resources.CommonListManage.LanguageName, _magnitud.LanguageOption.Language.Name);

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        #region Measurement Devices
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion Measurement Devices.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable MeasurementDevices(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("MeasurementDevice");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdMeasurementDevice;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdMeasurementDevice", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdMeasurementDeviceType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdMeasurementDeviceType", _columnOptions);

            //_columnOptions = new ColumnOptions();
            //_columnOptions.ColumnCaption = Resources.CommonListManage.Image;
            //_columnOptions.ColumnDataType = System.Type.GetType("System.Byte[]");
            //_columnOptions.IsPrimaryKey = false;
            //_columnOptions.DisplayInCombo = false;
            //_columnOptions.DisplayInManage = true;
            //_columnOptions.IsSearchable = false;
            //_columnOptions.AllowNull = true;
            //_columnOptions.IsContextMenuCaption = false;
            //_columnOptions.IsSortedBy = false;
            //_columnOptions.IsBinaryImage = true;
            //BuildColumnsDataTable(ref _dt, "Image", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Brand;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Brand", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Model;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Model", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.SerialNumber;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "SerialNumber", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                if (param.ContainsKey("IdMeasurementDeviceType"))
                {
                    Int64 _idMeasurementDeviceType = Convert.ToInt64(param["IdMeasurementDeviceType"]);
                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (EMSLibrary.User.PerformanceAssessments.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    //Ya esta armado el DataTable, ahora lo carga
                    foreach (MeasurementDevice _measurementDevice in EMSLibrary.User.PerformanceAssessments.Configuration.MeasurementDeviceType(_idMeasurementDeviceType).MeasurementDevices.Values)
                    {
                        //byte[] _fileStream = null;
                        //if ((_measurementDevice.Pictures != null) && (_measurementDevice.Pictures.Count > 0))
                        //{
                        //    _fileStream = _measurementDevice.Pictures.First().Value.FileAttach.FileStream;
                        //}

                        _dt.Rows.Add(_measurementDevice.IdMeasurementDevice, _idMeasurementDeviceType,
                            //_fileStream,
                            Common.Functions.ReplaceIndexesTags(_measurementDevice.Brand), Common.Functions.ReplaceIndexesTags(_measurementDevice.Model), _measurementDevice.SerialNumber, _permissionType);
                    }
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del MeasurementDevice.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable MeasurementDevice(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("MeasurementDevice");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            Int64 _idMeasurementDevice = Convert.ToInt64(param["IdMeasurementDevice"]);
            Int64 _idMeasurementDeviceType = Convert.ToInt64(param["IdMeasurementDeviceType"]);

            MeasurementDevice _measurementDevice = EMSLibrary.User.PerformanceAssessments.Configuration.MeasurementDeviceType(_idMeasurementDeviceType).MeasurementDevice(_idMeasurementDevice);

            _dt.ExtendedProperties.Add("PageTitle", Common.Functions.ReplaceIndexesTags(_measurementDevice.DeviceType.LanguageOption.Name));

            Int16 i = 0;//Se genera este contador, para evitar claves duplicadas, es porque no todos los registros tienen link.            
            Dictionary<String, Object> _valueLink = new Dictionary<String, Object>();
            _valueLink.Add("IdMeasurementDeviceType", _measurementDevice.DeviceType.IdMeasurementDeviceType);            

            //Carga los datos
            //_dt.Rows.Add(Resources.CommonListManage.IdMeasurementDevice, _measurementDevice.IdMeasurementDevice, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.Brand, _measurementDevice.Brand, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.Model, _measurementDevice.Model, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.SerialNumber, _measurementDevice.SerialNumber, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.CalibrationPeriodicity, _measurementDevice.CalibrationPeriodicity, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.MeasurementDeviceType, _measurementDevice.DeviceType.LanguageOption.Name,
                GetValueLink(Common.ConstantsEntitiesName.PA.MeasurementDeviceType, _valueLink));
            _dt.Rows.Add(Resources.CommonListManage.Reference, _measurementDevice.Reference, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.Maintenance, _measurementDevice.Maintenance, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.InstallationDate, _measurementDevice.InstallationDate, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.UpperLimit, _measurementDevice.UpperLimit, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.LowerLimit, _measurementDevice.LowerLimit, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.Uncertainty, _measurementDevice.Uncertainty, "#" + i++);

            String _buffMeasurementUnits = String.Empty;
            foreach (MeasurementUnit _measurementUnit in _measurementDevice.MeasurementUnits.Values)
            {
                _buffMeasurementUnits += Common.Functions.ReplaceIndexesTags(_measurementUnit.LanguageOption.Name) + "<br />";
            }
            _dt.Rows.Add(Resources.CommonListManage.MeasurementUnit, _buffMeasurementUnits, "#" + i++);

            //Retorna el DataTable.
            return _dt;
        }
        /// <summary>
        /// Construye el Dictionary de catalogos para el Measurement Device
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public Dictionary<Int64, Condesus.EMS.Business.KC.Entities.CatalogDoc> MeasurementDevicePictures(Dictionary<String, Object> param)
        {
            Int64 _idMeasurementDevice = Convert.ToInt64(param["IdMeasurementDevice"]);

            return EMSLibrary.User.PerformanceAssessments.Configuration.MeasurementDevice(_idMeasurementDevice).Pictures;
        }
        #endregion

        #region Measurement Device Types
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion Measurement Device Types.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable MeasurementDeviceTypes(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("MeasurementDeviceType");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdMeasurementDeviceType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdMeasurementDeviceType", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.MeasurementDeviceType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Description;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "Description", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                String _permissionType = String.Empty;
                //Obtiene el permiso que tiene el usuario para esa organizacion.
                if (EMSLibrary.User.PerformanceAssessments.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                { _permissionType = Common.Constants.PermissionManageName; }
                else
                { _permissionType = Common.Constants.PermissionViewName; }

                //Ya esta armado el DataTable, ahora lo carga
                foreach (MeasurementDeviceType _measurementDeviceType in EMSLibrary.User.PerformanceAssessments.Configuration.MeasurementDeviceTypes().Values)
                {
                    _dt.Rows.Add(_measurementDeviceType.IdMeasurementDeviceType, Common.Functions.ReplaceIndexesTags(_measurementDeviceType.LanguageOption.Name), Common.Functions.ReplaceIndexesTags(_measurementDeviceType.LanguageOption.Description), _permissionType);
                }

            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del MeasurementDeviceType.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable MeasurementDeviceType(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("MeasurementDeviceType");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

            Int64 _idMeasurementDeviceType = Convert.ToInt64(param["IdMeasurementDeviceType"]);

            MeasurementDeviceType _measurementDeviceType = EMSLibrary.User.PerformanceAssessments.Configuration.MeasurementDeviceType(_idMeasurementDeviceType);

            _dt.ExtendedProperties.Add("PageTitle", Common.Functions.ReplaceIndexesTags(_measurementDeviceType.LanguageOption.Name));

            //Carga los datos
            //_dt.Rows.Add(Resources.CommonListManage.IdMeasurementDeviceType, _measurementDeviceType.IdMeasurementDeviceType);
            _dt.Rows.Add(Resources.CommonListManage.Name, _measurementDeviceType.LanguageOption.Name);
            _dt.Rows.Add(Resources.CommonListManage.LanguageName, _measurementDeviceType.LanguageOption.Language.Name);
            _dt.Rows.Add(Resources.CommonListManage.Description, _measurementDeviceType.LanguageOption.Description);

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        #region Measurement Units
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion Measurement Units.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable MeasurementUnits(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("MeasurementUnit");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdMeasurementUnit;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdMeasurementUnit", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdMagnitud;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdMagnitud", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.MeasurementUnit;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Description;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "Description", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IsPattern;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Boolean");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IsPattern", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                if (param.ContainsKey("IdMagnitud"))
                {
                    Int64 _idMagnitud = Convert.ToInt64(param["IdMagnitud"]);
                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (EMSLibrary.User.PerformanceAssessments.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    //Ya esta armado el DataTable, ahora lo carga
                    Magnitud _magnitud = EMSLibrary.User.PerformanceAssessments.Configuration.Magnitud(_idMagnitud);
                    if (_magnitud != null)
                    {
                        foreach (MeasurementUnit _measurementUnit in EMSLibrary.User.PerformanceAssessments.Configuration.Magnitud(_idMagnitud).MeasurementUnits.Values)
                        {
                            _dt.Rows.Add(_measurementUnit.IdMeasurementUnit, _idMagnitud, Common.Functions.ReplaceIndexesTags(_measurementUnit.LanguageOption.Name), Common.Functions.ReplaceIndexesTags(_measurementUnit.LanguageOption.Description), _measurementUnit.IsPattern, _permissionType);
                        }
                    }
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del MeasurementUnit.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable MeasurementUnit(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("MeasurementUnit");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

            Int64 _idMeasurementUnit = Convert.ToInt64(param["IdMeasurementUnit"]);
            Int64 _idMagnitud = Convert.ToInt64(param["IdMagnitud"]);

            MeasurementUnit _measurementUnit = EMSLibrary.User.PerformanceAssessments.Configuration.Magnitud(_idMagnitud).MeasurementUnit(_idMeasurementUnit);

            _dt.ExtendedProperties.Add("PageTitle", Common.Functions.ReplaceIndexesTags(_measurementUnit.LanguageOption.Name));

            //Carga los datos
            //_dt.Rows.Add(Resources.CommonListManage.IdMeasurementUnit, _measurementUnit.IdMeasurementUnit);
            _dt.Rows.Add(Resources.CommonListManage.Name, _measurementUnit.LanguageOption.Name);
            _dt.Rows.Add(Resources.CommonListManage.LanguageName, _measurementUnit.LanguageOption.Language.Name);
            _dt.Rows.Add(Resources.CommonListManage.Description, _measurementUnit.LanguageOption.Description);
            _dt.Rows.Add(Resources.CommonListManage.IsPattern, _measurementUnit.IsPattern);

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        #region Measurements
            /// <summary>
            /// Construye el DataTable a modo List con los datos de la Coleccion Measurements.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable Measurements(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable("Measurement");

                //Contruye las columnas y sus atributos.
                ColumnOptions _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdMeasurement;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdMeasurement", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Measurement;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = true;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = true;
                _columnOptions.IsSortedBy = true;
                BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Description;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "Description", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

                //Cuando implementemos la opcion de traer todo en un filtro.
                Boolean _showAll = false;
                if (ValidateSelectedItemComboBox(param, ref _showAll))
                {
                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (EMSLibrary.User.PerformanceAssessments.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    Dictionary<Int64, Measurement> _measurements = new Dictionary<Int64, Measurement>();
                    //Si viene el parametro del Process, cargo todas las mediciones para un process
                    if (param.ContainsKey("IdProcess"))
                    {
                        Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
                        if (EMSLibrary.User.ProcessFramework.Map.Process(_idProcess) != null)
                        {
                            _measurements = ((ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess)).Measurements;
                        }
                        else
                        {
                            //Retorna el DataTable Vacio!!!
                            return _dt;
                        }
                    }
                    else
                    {
                        //Caso contrario, muestro todas las mediciones!!
                        _measurements = EMSLibrary.User.PerformanceAssessments.Configuration.Measurements();
                    }

                    Int64 _idSite = 0;
                    if (param.ContainsKey("IdSite"))
                    {
                        _idSite = Convert.ToInt64(param["IdSite"]);

                        if (_idSite > 0)
                        {
                            var _lnqMeasurement = from m in _measurements.Values
                                                  where m.ProcessTask.Site != null && m.ProcessTask.Site.IdFacility == _idSite
                                                  orderby Common.Functions.ReplaceIndexesTags(m.LanguageOption.Name) ascending
                                                  select m;

                            //Ya esta armado el DataTable, ahora lo carga
                            foreach (Measurement _measurement in _lnqMeasurement)
                            {
                                _dt.Rows.Add(_measurement.IdMeasurement, Common.Functions.ReplaceIndexesTags(_measurement.LanguageOption.Name), _measurement.LanguageOption.Description, _permissionType);
                            }
                        }
                        else
                        {
                            //Al venir en 0 nos traemos todas las mediciones que no tienen Site asociado!!
                            var _lnqMeasurementWithoutSite = from m in _measurements.Values
                                                  where m.ProcessTask.Site == null
                                                  orderby Common.Functions.ReplaceIndexesTags(m.LanguageOption.Name) ascending
                                                  select m;

                            //Ya esta armado el DataTable, ahora lo carga
                            foreach (Measurement _measurement in _lnqMeasurementWithoutSite)
                            {
                                _dt.Rows.Add(_measurement.IdMeasurement, Common.Functions.ReplaceIndexesTags(_measurement.LanguageOption.Name), _measurement.LanguageOption.Description, _permissionType);
                            }
                        }
                    }
                    else
                    {
                        var _lnqMeasurement = from m in _measurements.Values
                                          orderby Common.Functions.ReplaceIndexesTags(m.LanguageOption.Name) ascending
                                          select m;

                        //Ya esta armado el DataTable, ahora lo carga
                        foreach (Measurement _measurement in _lnqMeasurement)
                        {
                            _dt.Rows.Add(_measurement.IdMeasurement, Common.Functions.ReplaceIndexesTags(_measurement.LanguageOption.Name), _measurement.LanguageOption.Description, _permissionType);
                        }

                    }
                }
                //Retorna el DataTable
                return _dt;
            }
            /// <summary>
            /// Construye el DataTable a modo List con los datos de la Coleccion Measurements.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable MeasurementsOfTransformation(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable("MeasurementsOfTransformation");

                //Contruye las columnas y sus atributos.
                ColumnOptions _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdMeasurement;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdMeasurement", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Measurement;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = true;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = true;
                _columnOptions.IsSortedBy = true;
                BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Description;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "Description", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

                //Cuando implementemos la opcion de traer todo en un filtro.
                Boolean _showAll = false;
                if (ValidateSelectedItemComboBox(param, ref _showAll))
                {
                    String _permissionType = String.Empty;
                    //las mediciones las dejo como solo lectura. esto es porque en el tree de transformaciones no pueden hacer nada con las mediciones
                    _permissionType = Common.Constants.PermissionViewName;

                    Dictionary<Int64, Measurement> _measurements = new Dictionary<Int64, Measurement>();
                    //Si viene el parametro del Process, cargo todas las mediciones para un process
                    if ((param.ContainsKey("IdProcess")) && (param.ContainsKey("IdActivity")))
                    {
                        Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
                        Int64 _idActivity = Convert.ToInt64(param["IdActivity"]);
                        ProcessGroupProcess _processGroupProcess = ((ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess));
                        AccountingActivity _accountingActivity = EMSLibrary.User.PerformanceAssessments.Configuration.AccountingActivity(_idActivity);

                        //_measurements = ((ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess)).Measurements;
                        //else
                        //{
                        //    //Caso contrario, muestro todas las mediciones!!
                        //    _measurements = EMSLibrary.User.PerformanceAssessments.Configuration.Measurements();
                        //}
                        var _lnqMeasurements = from m in _accountingActivity.Measurements(_processGroupProcess).Values
                                               orderby m.LanguageOption.Name ascending
                                               select m;
                        foreach (Measurement _measurement in _lnqMeasurements)
                        {
                            _dt.Rows.Add(_measurement.IdMeasurement, Common.Functions.ReplaceIndexesTags(_measurement.LanguageOption.Name), _measurement.LanguageOption.Description, _permissionType);
                        }
                    }
                }
                //Retorna el DataTable
                return _dt;
            }
            /// <summary>
            /// Construye el DataTable a modo List con los datos de la Coleccion Measurements.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable MeasurementsByTask(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable("Measurement");

                //Contruye las columnas y sus atributos.
                ColumnOptions _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdMeasurement;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdMeasurement", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Measurement;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = true;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = true;
                _columnOptions.IsSortedBy = true;
                BuildColumnsDataTable(ref _dt, "Measurement", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Indicator;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "Indicator", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Device;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "Device", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Date;
                _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "Date", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.StartDate;
                _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "StartDate", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.EndDate;
                _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "EndDate", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Value;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "Value", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.MeasurementUnit;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "MeasurementUnit", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Status;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "Status", _columnOptions);

                //Cuando implementemos la opcion de traer todo en un filtro.
                Boolean _showAll = false;
                if (ValidateSelectedItemComboBox(param, ref _showAll))
                {
                    //Ya esta armado el DataTable, ahora lo carga
                    Int64 _idTask = Convert.ToInt64(param["IdTask"]);
                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (EMSLibrary.User.PerformanceAssessments.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    Measurement _measurement = ((ProcessTaskMeasurement)EMSLibrary.User.ProcessFramework.Map.Process(_idTask)).Measurement;
                    //Una medicion puede no tener un equipo asociado, porque no todas se miden con un equipo.
                    String _deviceFullName = String.Empty;
                    if (_measurement.Device != null)
                    {
                        _deviceFullName = _measurement.Device.FullName;
                    }
                    else
                    {
                        _deviceFullName = Resources.Common.NotUsed;
                    }
                    foreach (MeasurementPoint _measurementPoint in _measurement.Series())
                    {
                        _dt.Rows.Add(_measurement.IdMeasurement,
                            Common.Functions.ReplaceIndexesTags(_measurement.LanguageOption.Name),
                            Common.Functions.ReplaceIndexesTags(_measurement.Indicator.LanguageOption.Name),
                            _deviceFullName,
                            _measurementPoint.MeasureDate,
                            _measurementPoint.StartDate, _measurementPoint.EndDate,
                            Common.Functions.CustomEMSRound(_measurementPoint.MeasureValue),
                            Common.Functions.ReplaceIndexesTags(_measurement.MeasurementUnit.LanguageOption.Name), 
                            _permissionType, _measurementPoint.Sing);
                    }
                }
                //Retorna el DataTable
                return _dt;
            }
            /// <summary>
            /// Construye el DataTable a modo Property con los datos del Measurement.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable Measurement(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable("Measurement");


                //Contruye las columnas y sus atributos.
                BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
                BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
                BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());
                BuildColumnsDataTable(ref _dt, "ColumnOrderViewer", SetColumnOrderViewer());

                Int64 _idMeasurement = Convert.ToInt64(param["IdMeasurement"]);
                Measurement _measurement = null;
                //Si viene el process, acceso al measurement a traves del process
                if (param.ContainsKey("IdProcess"))
                {
                    Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
                    _measurement = ((ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess)).Measurements[_idMeasurement];
                }
                else
                {
                    _measurement = EMSLibrary.User.PerformanceAssessments.Configuration.Measurement(_idMeasurement);
                }

                _dt.ExtendedProperties.Add("PageTitle", Common.Functions.ReplaceIndexesTags(_measurement.LanguageOption.Name));

                Int16 i = 0;//Se genera este contador, para evitar claves duplicadas, es porque no todos los registros tienen link.            
                Int16 x = 0;//Se genera este contador, para evitar claves duplicadas, es porque no todos los registros tienen link.            
                Dictionary<String, Object> _valueLink = new Dictionary<String, Object>();
                _valueLink.Add("IdIndicator", _measurement.Indicator.IdIndicator);
                _valueLink.Add("IdMeasurementUnit", _measurement.MeasurementUnit.IdMeasurementUnit);
                _valueLink.Add("IdMagnitud", _measurement.MeasurementUnit.Magnitud.IdMagnitud);
                //Una medicion puede no tener un equipo asociado, porque no todas se miden con un equipo.
                if (_measurement.Device != null)
                {
                    _valueLink.Add("IdMeasurementDevice", _measurement.Device.IdMeasurementDevice);
                }
                //_valueLink.Add("IdParameterGroup", _measurement.ParameterGroup.IdParameterGroup);

                //Carga los datos
                //Name: 
                //Indicator:  zzz [Unit] 
                //Site: 
                //Frequency: tal [timeunit] 
                //Methodology: 
                //Scope: 
                //Source 
                //Quality 
                //Task Name: 
                //Frequency at Source: 
                //_dt.Rows.Add(Resources.CommonListManage.IdMeasurement, _measurement.IdMeasurement, "#" + i++);

                _valueLink.Add("IdProcess", _measurement.ProcessTask.Parent.IdProcess);
                _valueLink.Add("IdTask", _measurement.ProcessTask.IdProcess);
                _dt.Rows.Add(Resources.CommonListManage.ProcessTaskMeasurement, Common.Functions.ReplaceIndexesTags(_measurement.ProcessTask.LanguageOption.Title),
                    GetValueLink(Common.ConstantsEntitiesName.PF.ProcessTaskMeasurement, _valueLink), "#" + x++);
                _dt.Rows.Add(Resources.CommonListManage.Name, Common.Functions.ReplaceIndexesTags(_measurement.LanguageOption.Name), "#" + i++, "#" + x++);
                _dt.Rows.Add(Resources.CommonListManage.Indicator, Common.Functions.ReplaceIndexesTags(_measurement.Indicator.LanguageOption.Name) + " [" + Common.Functions.ReplaceIndexesTags(_measurement.MeasurementUnit.LanguageOption.Name) + "]",
                    GetValueLink(Common.ConstantsEntitiesName.PA.Indicator, _valueLink), "#" + x++);
                //_dt.Rows.Add(Resources.CommonListManage.LanguageName, Common.Functions.ReplaceIndexesTags(_measurement.LanguageOption.Language.Name), "#" + i++, "#" + x++);
                if (_measurement.ProcessTask.Site != null)
                {
                    _dt.Rows.Add(Resources.CommonListManage.Site, Common.Functions.ReplaceIndexesTags(_measurement.ProcessTask.Site.LanguageOption.Name), "#" + i++, "#" + x++);
                }
                else
                {
                    _dt.Rows.Add(Resources.CommonListManage.Site, Resources.Common.Unassigned, "#" + i++, "#" + x++);
                }
                //_dt.Rows.Add(Resources.CommonListManage.Description, _measurement.LanguageOption.Description, "#" + i++);
                _dt.Rows.Add(Resources.CommonListManage.CollectionFrequency, Resources.Common.WordFrequency + " " + _measurement.ProcessTask.Interval.ToString() + " " + EMSLibrary.User.ProcessFramework.Configuration.TimeUnit(_measurement.ProcessTask.TimeUnitInterval).LanguageOption.Name, "#" + i++, "#" + x++);
                _dt.Rows.Add(Resources.CommonListManage.DataFrequency, Resources.Common.WordFrequency + " " + _measurement.Frequency.ToString() + " " + EMSLibrary.User.ProcessFramework.Configuration.TimeUnit(_measurement.TimeUnitFrequency).LanguageOption.Name, "#" + i++, "#" + x++);
                _dt.Rows.Add(Resources.CommonListManage.MeasurementFrequencyAtSource, _measurement.FrequencyAtSource, "#" + i++, "#" + x++);
                if (((ProcessTaskMeasurement)_measurement.ProcessTask).AccountingScope != null)
                {
                    _dt.Rows.Add(Resources.CommonListManage.AccountingScope, ((ProcessTaskMeasurement)_measurement.ProcessTask).AccountingScope.LanguageOption.Name, "#" + i++, "#" + x++);
                }
                else
                {
                    _dt.Rows.Add(Resources.CommonListManage.AccountingScope, Resources.Common.Unassigned, "#" + i++, "#" + x++);
                }
                if (((ProcessTaskMeasurement)_measurement.ProcessTask).AccountingActivity!= null)
                {
                    _dt.Rows.Add(Resources.CommonListManage.AccountingActivity, ((ProcessTaskMeasurement)_measurement.ProcessTask).AccountingActivity.LanguageOption.Name, "#" + i++, "#" + x++);
                }
                else
                {
                    _dt.Rows.Add(Resources.CommonListManage.AccountingActivity, Resources.CommonListManage.NoActivity, "#" + i++, "#" + x++);
                }
                if (_measurement.Methodology == null)
                {
                    _dt.Rows.Add(Resources.CommonListManage.Methodology, String.Empty, "#" + i++, "#" + x++);
                }
                else
                {
                    _valueLink.Add("IdMethodology", _measurement.Methodology.IdMethodology);
                    _dt.Rows.Add(Resources.CommonListManage.Methodology, _measurement.Methodology.LanguageOption.MethodName,
                        GetValueLink(Common.ConstantsEntitiesName.PA.Methodology, _valueLink), "#" + x++);
                }
                
                _dt.Rows.Add(Resources.CommonListManage.MeasurementSource, _measurement.Source, "#" + i++, "#" + x++);
                if (_measurement.Quality == null)
                {
                    _dt.Rows.Add(Resources.CommonListManage.Quality, String.Empty, "#" + i++, "#" + x++);
                }
                else
                {
                    _valueLink.Add("IdQuality", _measurement.Quality.IdQuality);
                    _dt.Rows.Add(Resources.CommonListManage.Quality, _measurement.Quality.LanguageOption.Name,
                        GetValueLink(Common.ConstantsEntitiesName.PA.Quality, _valueLink), "#" + x++);
                }

                //Parece que esto no lo quieren ver....
                ////Una medicion puede no tener un equipo asociado, porque no todas se miden con un equipo.
                //if (_measurement.Device != null)
                //{
                //    _dt.Rows.Add(Resources.CommonListManage.ParameterGroup, _measurement.ParameterGroup.LanguageOption.Name,
                //        GetValueLink(Common.ConstantsEntitiesName.PA.ParameterGroup, _valueLink));
                //}
                //else
                //{
                //    _dt.Rows.Add(Resources.CommonListManage.MeasurementDevice, Resources.Common.NotUsed, "#" + i++);
                //}
                //_dt.Rows.Add(Resources.CommonListManage.Uncertainty, _measurement.Uncertainty, "#" + i++);

                //Retorna el DataTable.
                return _dt;
            }
            /// <summary>
            /// Construye el DataTable a modo Property con los datos del Measurement Statistic.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable MeasurementStatistical(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable("MeasurementStatistical");

                //Contruye las columnas y sus atributos.
                BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
                BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
                BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

                Int64 _idMeasurement = Convert.ToInt64(param["IdMeasurement"]);

                DateTime? _startDate = null;
                DateTime? _endDate = null;
                //Si viene en el parametro...lo carga...sino queda null
                if (param.ContainsKey("StarDate"))
                {
                    _startDate = Convert.ToDateTime(param["StartDate"]);
                    _endDate = Convert.ToDateTime(param["EndDate"]);
                }
                Measurement _measurement = EMSLibrary.User.PerformanceAssessments.Configuration.Measurement(_idMeasurement);
                Condesus.EMS.Business.PA.Entities.MeasurementStatistics _stats = _measurement.Statistics(_startDate, _endDate);

                _dt.ExtendedProperties.Add("PageTitle", Common.Functions.ReplaceIndexesTags(_measurement.LanguageOption.Name));

                Int16 i = 0;//Se genera este contador, para evitar claves duplicadas, es porque no todos los registros tienen link.            

                //Carga los datos
                //_dt.Rows.Add(Resources.CommonListManage.IdMeasurement, _measurement.IdMeasurement, "#" + i++);
                _dt.Rows.Add(Resources.CommonListManage.Period, _stats.FirstDate.ToString() + " - " + _stats.LastDate.ToString(), "#" + i++);
                _dt.Rows.Add(Resources.CommonListManage.StatFirstValue, _stats.FirstValue.ToString(), "#" + i++);
                _dt.Rows.Add(Resources.CommonListManage.StatLastValue, _stats.LastValue.ToString(), "#" + i++);
                _dt.Rows.Add(Resources.CommonListManage.StatMinValue, _stats.MinValue.ToString(), "#" + i++);
                _dt.Rows.Add(Resources.CommonListManage.StatMaxValue, _stats.MaxValue.ToString(), "#" + i++);
                _dt.Rows.Add(Resources.CommonListManage.StatAvgValue, _stats.AvgValue.ToString(), "#" + i++);
                _dt.Rows.Add(Resources.CommonListManage.StatCountValue, _stats.CountValue.ToString(), "#" + i++);
                _dt.Rows.Add(Resources.CommonListManage.StatSumValue, _stats.SumValue.ToString(), "#" + i++);
                _dt.Rows.Add(Resources.CommonListManage.StatStdDevValue, _stats.StdDevValue.ToString(), "#" + i++);
                _dt.Rows.Add(Resources.CommonListManage.StatStdDevPValue, _stats.StdDevPValue.ToString(), "#" + i++);
                _dt.Rows.Add(Resources.CommonListManage.StatVarValue, _stats.VarValue.ToString(), "#" + i++);
                _dt.Rows.Add(Resources.CommonListManage.StatVarPValue, _stats.VarPValue.ToString(), "#" + i++);

                //Retorna el DataTable.
                return _dt;
            }
            /// <summary>
            /// Construye el DataTable a modo Property con los datos del Measurement Statistics.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable StatisticsOfMeasurements(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable("MeasurementStatistical");

                //Contruye las columnas y sus atributos.
                ColumnOptions _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Period;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = true;
                BuildColumnsDataTable(ref _dt, "Period", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.StatFirstValue;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Double");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "StatFirstValue", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.StatLastValue;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Double");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "StatLastValue", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.StatMinValue;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Double");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "StatMinValue", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.StatMaxValue;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Double");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "StatMaxValue", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.StatAvgValue;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Double");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "StatAvgValue", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.StatCountValue;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "StatCountValue", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.StatSumValue;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Double");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "StatSumValue", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.StatStdDevValue;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Double");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "StatStdDevValue", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.StatStdDevPValue;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Double");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "StatStdDevPValue", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.StatVarValue;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Double");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "StatVarValue", _columnOptions);


                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.StatVarPValue;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Double");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "StatVarPValue", _columnOptions);
                
                Int64 _idMeasurement = Convert.ToInt64(param["IdMeasurement"]);

                DateTime? _startDate = null;
                DateTime? _endDate = null;
                //Si viene en el parametro...lo carga...sino queda null
                if (param.ContainsKey("StarDate"))
                {
                    _startDate = Convert.ToDateTime(param["StartDate"]);
                    _endDate = Convert.ToDateTime(param["EndDate"]);
                }
                Measurement _measurement = EMSLibrary.User.PerformanceAssessments.Configuration.Measurement(_idMeasurement);
                Condesus.EMS.Business.PA.Entities.MeasurementStatistics _stats = _measurement.Statistics(_startDate, _endDate);

                //Carga los datos
                _dt.Rows.Add(_stats.FirstDate.ToString() + " - " + _stats.LastDate.ToString(), 
                    _stats.FirstValue.ToString(),
                    _stats.LastValue.ToString(),
                    _stats.MinValue.ToString(),
                    _stats.MaxValue.ToString(),
                    _stats.AvgValue.ToString(),
                    _stats.CountValue.ToString(),
                    _stats.SumValue.ToString(),
                    _stats.StdDevValue.ToString(),
                    _stats.StdDevPValue.ToString(),
                    _stats.VarValue.ToString(),
                    _stats.VarPValue.ToString());

                //Retorna el DataTable.
                return _dt;
            }
            /// <summary>
            /// Construye el DataTable a modo List con los datos de la Coleccion MeasurementDataSeries.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable MeasurementDataSeries(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable("Measurement");

                //Contruye las columnas y sus atributos.
                ColumnOptions _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.MeasurementDate;
                _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "MeasurementDate", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.StartDate;
                _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "StartDate", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.EndDate;
                _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "EndDate", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.MeasurementValue;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "MeasurementValue", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Status;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "Status", _columnOptions);

                Int64 _idMeasurement = Convert.ToInt64(param["IdMeasurement"]);
                Measurement _measurement = null;
                //Si viene el parametro del Process, entonces accedo a travez del process
                if (param.ContainsKey("IdProcess"))
                {
                    Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
                    _measurement = ((ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess)).Measurements[_idMeasurement];
                }
                else
                {
                    //Caso contrario, acceso directo
                    _measurement = EMSLibrary.User.PerformanceAssessments.Configuration.Measurement(_idMeasurement);
                }

                DateTime? _startDate = null;
                DateTime? _endDate = null;
                if (param.ContainsKey("StartDate"))
                {
                    if (param["StartDate"] != null)
                    { _startDate = Convert.ToDateTime(param["StartDate"]); }
                    if (param["EndDate"] != null)
                    { _endDate = Convert.ToDateTime(param["EndDate"]); }
                }

                //Cuando implementemos la opcion de traer todo en un filtro.
                List<MeasurementPoint> _measurementPoints = _measurement.Series(_startDate, _endDate);
                foreach (MeasurementPoint _measurementPoint in _measurementPoints)
                {
                    _dt.Rows.Add(_measurementPoint.MeasureDate, 
                        _measurementPoint.StartDate, 
                        _measurementPoint.EndDate, 
                        Common.Functions.CustomEMSRound(_measurementPoint.MeasureValue),
                        _measurementPoint.Sing);
                }

                //Retorna el DataTable
                return _dt;
            }

            #region 3 Tablas que no existen y que devuelven un DT vacio!!! (Relaciones de un Measurement)
                public DataTable Components(Dictionary<String, Object> param)
                {
                    //Construye el datatable
                    DataTable _dt = BuildDataTable("Components");

                    return _dt;
                }
                public DataTable Logs(Dictionary<String, Object> param)
                {
                    //Construye el datatable
                    DataTable _dt = BuildDataTable("Logs");

                    return _dt;
                }
                public DataTable AnalysisCenter(Dictionary<String, Object> param)
                {
                    //Construye el datatable
                    DataTable _dt = BuildDataTable("AnalysisCenter");

                    return _dt;
                }
            #endregion
        #endregion

        #region Transformation
            /// <summary>
            /// Construye el DataTable a modo List con los datos de la Coleccion Transformation.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable Transformations(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable("Transformation");

                //Contruye las columnas y sus atributos.
                ColumnOptions _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdTransformation;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdTransformation", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdMeasurement;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdMeasurement", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdProcess;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdProcess", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdIndicator;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = true;
                _columnOptions.IsContextMenuCaption = false;
                _columnOptions.IsSortedBy = false;
                BuildColumnsDataTable(ref _dt, "IdIndicator", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdMeasurementUnit;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = true;
                _columnOptions.IsContextMenuCaption = false;
                _columnOptions.IsSortedBy = false;
                BuildColumnsDataTable(ref _dt, "IdMeasurementUnit", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Name;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = true;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Description;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "Description", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.MeasurementUnit;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = false;
                _columnOptions.IsCellLink = true;
                _columnOptions.EntityName = Common.ConstantsEntitiesName.PA.MeasurementUnit;
                _columnOptions.EntityNameGrid = Common.ConstantsEntitiesName.PA.MeasurementUnits;
                BuildColumnsDataTable(ref _dt, "MeasurementUnit", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Indicator;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = false;
                _columnOptions.IsCellLink = true;
                _columnOptions.EntityName = Common.ConstantsEntitiesName.PA.Indicator;
                _columnOptions.EntityNameGrid = Common.ConstantsEntitiesName.PA.Indicators;
                BuildColumnsDataTable(ref _dt, "Indicator", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Base;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "Base", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Formula;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "Formula", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Operands;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "Operands", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

                //Cuando implementemos la opcion de traer todo en un filtro.
                Boolean _showAll = false;
                if (ValidateSelectedItemComboBox(param, ref _showAll))
                {
                    if (param.ContainsKey("IdMeasurement") || param.ContainsKey("IdProcess"))
                    {
                        String _permissionType = String.Empty;
                        //Obtiene el permiso que tiene el usuario para esa organizacion.
                        if (EMSLibrary.User.PerformanceAssessments.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                        { _permissionType = Common.Constants.PermissionManageName; }
                        else
                        { _permissionType = Common.Constants.PermissionViewName; }

                        Int64 _idMeasurement = 0;
                        Int64 _idProcess = 0;
                        Dictionary<Int64, CalculateOfTransformation> _transformations = new Dictionary<Int64, CalculateOfTransformation>();
                        //Si viene el idtask, quiere decir que viene desde una tarea de medicion (del element map)
                        if (param.ContainsKey("IdTask"))
                        {
                            Int64 _idTask = Convert.ToInt64(param["IdTask"]);
                            Measurement _measurement = ((ProcessTaskMeasurement)EMSLibrary.User.ProcessFramework.Map.Process(_idTask)).Measurement;
                            _idProcess = _measurement.ProcessTask.Parent.IdProcess;
                            _transformations = _measurement.Transformations;
                        }
                        else
                        {
                            if (param.ContainsKey("IdProcess"))
                            {
                                _idProcess = Convert.ToInt64(param["IdProcess"]);
                                _transformations = EMSLibrary.User.ProcessFramework.Map.ProcessGroupProcess(_idProcess).CalculateOfTransformations;
                            }
                            else
                            {
                                _idMeasurement = Convert.ToInt64(param["IdMeasurement"]);
                                Measurement _measurement = EMSLibrary.User.PerformanceAssessments.Configuration.Measurement(_idMeasurement);
                                _idProcess = _measurement.ProcessTask.Parent.IdProcess;
                                _transformations = _measurement.Transformations;
                            }
                        }

                        //Ya esta armado el DataTable, ahora lo carga
                        foreach (CalculateOfTransformation _calculateOfTransformation in _transformations.Values)
                        {
                            String _operands = String.Empty;
                            foreach (KeyValuePair<String, CalculateOfTransformationParameter> _item in _calculateOfTransformation.Parameters)
                            {
                                //Hay que acceder al name desde el Language option. (ver si se puede acceder igual para todos los casos)
                                _operands += _item.Key + "&nbsp; = &nbsp;" +
                                        Common.Functions.ReplaceIndexesTags(_item.Value.Operand.Name) + "<br/>";
                            }

                            if (_calculateOfTransformation.BaseTransformer.GetType().Name.Contains(Common.ConstantsEntitiesName.PA.Measurement))
                            {
                                _idMeasurement = ((Measurement)_calculateOfTransformation.BaseTransformer).IdMeasurement;
                            }
                            else
                            {
                                Condesus.EMS.Business.ITransformer _calcOfTransf = _calculateOfTransformation.BaseTransformer;
                                //Mientras no sea una medicion....
                                while (!_calcOfTransf.GetType().Name.Contains(Common.ConstantsEntitiesName.PA.Measurement))
                                {
                                    if (((CalculateOfTransformation)_calcOfTransf).BaseTransformer.GetType().Name.Contains(Common.ConstantsEntitiesName.PA.Measurement))
                                    {
                                        _idMeasurement = ((Measurement)((CalculateOfTransformation)_calcOfTransf).BaseTransformer).IdMeasurement;
                                    }
                                    _calcOfTransf = ((CalculateOfTransformation)_calcOfTransf).BaseTransformer;
                                }
                                if (_idMeasurement != 0)
                                {
                                    _idMeasurement = ((Measurement)_calcOfTransf).IdMeasurement;
                                }
                            }
                            _dt.Rows.Add(_calculateOfTransformation.IdTransformation, _idMeasurement, _idProcess, _calculateOfTransformation.Indicator.IdIndicator,
                                _calculateOfTransformation.MeasurementUnit.IdMeasurementUnit, Common.Functions.ReplaceIndexesTags(_calculateOfTransformation.LanguageOption.Name),
                                _calculateOfTransformation.LanguageOption.Description, Common.Functions.ReplaceIndexesTags(_calculateOfTransformation.MeasurementUnit.LanguageOption.Name),
                                Common.Functions.ReplaceIndexesTags(_calculateOfTransformation.Indicator.LanguageOption.Name), _calculateOfTransformation.BaseTransformer.Name,
                                Common.Functions.ReplaceIndexesTags(_calculateOfTransformation.Formula), _operands, _permissionType);
                        }
                    }
                }
                //Retorna el DataTable
                return _dt;
            }
            /// <summary>
            /// Construye el DataTable a modo Property con los datos de la Transformation de transformacion.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable TransformationByTransformation(Dictionary<String, Object> param)
            {
                return Transformation(param);
            }
            /// <summary>
            /// Construye el DataTable a modo Property con los datos del Transformation.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable Transformation(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable("Transformation");

                //Contruye las columnas y sus atributos.
                BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
                BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
                BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());
                BuildColumnsDataTable(ref _dt, "ColumnOrderViewer", SetColumnOrderViewer());

                Int64 _idTransformation = Convert.ToInt64(param["IdTransformation"]);
                Int64 _idMeasurement = Convert.ToInt64(param["IdMeasurement"]);
                Measurement _measurement = null;
                //Si viene el process, acceso al measurement a traves del process
                if (param.ContainsKey("IdProcess"))
                {
                    Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
                    _measurement = ((ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess)).Measurements[_idMeasurement];
                }
                else
                {
                    _measurement = EMSLibrary.User.PerformanceAssessments.Configuration.Measurement(_idMeasurement);
                }
                CalculateOfTransformation _calculateOfTransformation = _measurement.Transformation(_idTransformation);

                _dt.ExtendedProperties.Add("PageTitle", Common.Functions.ReplaceIndexesTags(_measurement.LanguageOption.Name));

                Int16 i = 0;//Se genera este contador, para evitar claves duplicadas, es porque no todos los registros tienen link.            
                Int16 x = 0;//Se genera este contador, para evitar claves duplicadas, es porque no todos los registros tienen link.            
                Dictionary<String, Object> _valueLink = new Dictionary<String, Object>();
                _valueLink.Add("IdIndicator", _measurement.Indicator.IdIndicator);
                _valueLink.Add("IdMeasurementUnit", _measurement.MeasurementUnit.IdMeasurementUnit);
                _valueLink.Add("IdMagnitud", _measurement.MeasurementUnit.Magnitud.IdMagnitud);
                //Una medicion puede no tener un equipo asociado, porque no todas se miden con un equipo.
                if (_measurement.Device != null)
                {
                    _valueLink.Add("IdMeasurementDevice", _measurement.Device.IdMeasurementDevice);
                }
                //_valueLink.Add("IdParameterGroup", _measurement.ParameterGroup.IdParameterGroup);

                _valueLink.Add("IdProcess", _measurement.ProcessTask.Parent.IdProcess);
                _valueLink.Add("IdTask", _measurement.ProcessTask.IdProcess);
                _dt.Rows.Add(Resources.CommonListManage.ProcessTaskMeasurement, Common.Functions.ReplaceIndexesTags(_measurement.ProcessTask.LanguageOption.Title),
                    GetValueLink(Common.ConstantsEntitiesName.PF.ProcessTaskMeasurement, _valueLink), "#" + x++);
                _dt.Rows.Add(Resources.CommonListManage.Name, Common.Functions.ReplaceIndexesTags(_measurement.LanguageOption.Name), "#" + i++, "#" + x++);
                _dt.Rows.Add(Resources.CommonListManage.Indicator, Common.Functions.ReplaceIndexesTags(_measurement.Indicator.LanguageOption.Name) + " [" + Common.Functions.ReplaceIndexesTags(_measurement.MeasurementUnit.LanguageOption.Name) + "]",
                    GetValueLink(Common.ConstantsEntitiesName.PA.Indicator, _valueLink), "#" + x++);
                if (_measurement.ProcessTask.Site != null)
                {
                    _dt.Rows.Add(Resources.CommonListManage.Site, Common.Functions.ReplaceIndexesTags(_measurement.ProcessTask.Site.LanguageOption.Name), "#" + i++, "#" + x++);
                }
                else
                {
                    _dt.Rows.Add(Resources.CommonListManage.Site, Resources.Common.Unassigned, "#" + i++, "#" + x++);
                }
                //_dt.Rows.Add(Resources.CommonListManage.Description, _measurement.LanguageOption.Description, "#" + i++);
                _dt.Rows.Add(Resources.CommonListManage.CollectionFrequency, Resources.Common.WordFrequency + " " + _measurement.ProcessTask.Interval.ToString() + " " + EMSLibrary.User.ProcessFramework.Configuration.TimeUnit(_measurement.ProcessTask.TimeUnitInterval).LanguageOption.Name, "#" + i++, "#" + x++);
                _dt.Rows.Add(Resources.CommonListManage.DataFrequency, Resources.Common.WordFrequency + " " + _measurement.Frequency.ToString() + " " + EMSLibrary.User.ProcessFramework.Configuration.TimeUnit(_measurement.TimeUnitFrequency).LanguageOption.Name, "#" + i++, "#" + x++);
                _dt.Rows.Add(Resources.CommonListManage.MeasurementFrequencyAtSource, _measurement.FrequencyAtSource, "#" + i++, "#" + x++);
                if (((ProcessTaskMeasurement)_measurement.ProcessTask).AccountingScope != null)
                {
                    _dt.Rows.Add(Resources.CommonListManage.AccountingScope, ((ProcessTaskMeasurement)_measurement.ProcessTask).AccountingScope.LanguageOption.Name, "#" + i++, "#" + x++);
                }
                else
                {
                    _dt.Rows.Add(Resources.CommonListManage.AccountingScope, Resources.Common.Unassigned, "#" + i++, "#" + x++);
                }
                if (((ProcessTaskMeasurement)_measurement.ProcessTask).AccountingActivity != null)
                {
                    _dt.Rows.Add(Resources.CommonListManage.AccountingActivity, ((ProcessTaskMeasurement)_measurement.ProcessTask).AccountingActivity.LanguageOption.Name, "#" + i++, "#" + x++);
                }
                else
                {
                    _dt.Rows.Add(Resources.CommonListManage.AccountingActivity, Resources.CommonListManage.NoActivity, "#" + i++, "#" + x++);
                }
                if (_measurement.Methodology == null)
                {
                    _dt.Rows.Add(Resources.CommonListManage.Methodology, String.Empty, "#" + i++, "#" + x++);
                }
                else
                {
                    _valueLink.Add("IdMethodology", _measurement.Methodology.IdMethodology);
                    _dt.Rows.Add(Resources.CommonListManage.Methodology, _measurement.Methodology.LanguageOption.MethodName,
                        GetValueLink(Common.ConstantsEntitiesName.PA.Methodology, _valueLink), "#" + x++);
                }

                _dt.Rows.Add(Resources.CommonListManage.MeasurementSource, _measurement.Source, "#" + i++, "#" + x++);
                if (_measurement.Quality == null)
                {
                    _dt.Rows.Add(Resources.CommonListManage.Quality, String.Empty, "#" + i++, "#" + x++);
                }
                else
                {
                    _valueLink.Add("IdQuality", _measurement.Quality.IdQuality);
                    _dt.Rows.Add(Resources.CommonListManage.Quality, _measurement.Quality.LanguageOption.Name,
                        GetValueLink(Common.ConstantsEntitiesName.PA.Quality, _valueLink), "#" + x++);
                }

                //_dt.Rows.Add(Resources.CommonListManage.Name, Common.Functions.ReplaceIndexesTags(_measurement.LanguageOption.Name), "#" + i++, "#" + x++);
                //_dt.Rows.Add(Resources.CommonListManage.Indicator, Common.Functions.ReplaceIndexesTags(_measurement.Indicator.LanguageOption.Name),
                //    GetValueLink(Common.ConstantsEntitiesName.PA.Indicator, _valueLink), "#" + x++);
                //_dt.Rows.Add(Resources.CommonListManage.LanguageName, Common.Functions.ReplaceIndexesTags(_measurement.LanguageOption.Language.Name), "#" + i++, "#" + x++);
                //if (_measurement.ProcessTask.Site != null)
                //{
                //    _dt.Rows.Add(Resources.CommonListManage.Site, Common.Functions.ReplaceIndexesTags(_measurement.ProcessTask.Site.LanguageOption.Name), "#" + i++, "#" + x++);
                //}
                //else
                //{
                //    _dt.Rows.Add(Resources.CommonListManage.Site, Resources.Common.Unassigned, "#" + i++, "#" + x++);
                //}
                ////_dt.Rows.Add(Resources.CommonListManage.Description, _measurement.LanguageOption.Description, "#" + i++);
                //_dt.Rows.Add(Resources.CommonListManage.TimeUnitFrequency, Resources.Common.WordFrequency + " " + _measurement.Frequency.ToString() + " " + EMSLibrary.User.ProcessFramework.Configuration.TimeUnit(_measurement.TimeUnitFrequency).LanguageOption.Name, "#" + i++, "#" + x++);
                //if (_measurement.Methodology == null)
                //{
                //    _dt.Rows.Add(Resources.CommonListManage.Methodology, String.Empty, "#" + i++, "#" + x++);
                //}
                //else
                //{
                //    _valueLink.Add("IdMethodology", _measurement.Methodology.IdMethodology);
                //    _dt.Rows.Add(Resources.CommonListManage.Methodology, _measurement.Methodology.LanguageOption.MethodName,
                //        GetValueLink(Common.ConstantsEntitiesName.PA.Methodology, _valueLink), "#" + x++);
                //}
                //if (((ProcessTaskMeasurement)_measurement.ProcessTask).AccountingScope != null)
                //{
                //    _dt.Rows.Add(Resources.CommonListManage.AccountingScope, ((ProcessTaskMeasurement)_measurement.ProcessTask).AccountingScope.LanguageOption.Name, "#" + i++, "#" + x++);
                //}
                //else
                //{
                //    _dt.Rows.Add(Resources.CommonListManage.AccountingScope, Resources.Common.Unassigned, "#" + i++, "#" + x++);
                //}
                //_dt.Rows.Add(Resources.CommonListManage.MeasurementSource, _measurement.Source, "#" + i++, "#" + x++);
                //if (_measurement.Quality == null)
                //{
                //    _dt.Rows.Add(Resources.CommonListManage.Quality, String.Empty, "#" + i++, "#" + x++);
                //}
                //else
                //{
                //    _dt.Rows.Add(Resources.CommonListManage.Quality, _measurement.Quality.LanguageOption.Name,
                //        GetValueLink(Common.ConstantsEntitiesName.PA.Quality, _valueLink), "#" + x++);
                //}
                //_valueLink.Add("IdProcess", _measurement.ProcessTask.Parent.IdProcess);
                //_valueLink.Add("IdTask", _measurement.ProcessTask.IdProcess);
                //_dt.Rows.Add(Resources.CommonListManage.ProcessTaskMeasurement, Common.Functions.ReplaceIndexesTags(_measurement.ProcessTask.LanguageOption.Title),
                //    GetValueLink(Common.ConstantsEntitiesName.PF.ProcessTaskMeasurement, _valueLink), "#" + x++);

                //_dt.Rows.Add(Resources.CommonListManage.MeasurementFrequencyAtSource, _measurement.FrequencyAtSource, "#" + i++, "#" + x++);
                //_dt.Rows.Add(Resources.CommonListManage.MeasurementUnit, Common.Functions.ReplaceIndexesTags(_measurement.MeasurementUnit.LanguageOption.Name),
                //    GetValueLink(Common.ConstantsEntitiesName.PA.MeasurementUnit, _valueLink), "#" + x++);

                _dt.Rows.Add(Resources.CommonListManage.Formula, _calculateOfTransformation.Formula, "#" + i++, "#" + x++);

                String _operands = String.Empty;
                foreach (KeyValuePair<String, CalculateOfTransformationParameter> _item in _calculateOfTransformation.Parameters)
                {
                    //Hay que acceder al name desde el Language option. (ver si se puede acceder igual para todos los casos)
                    _operands += _item.Key + "&nbsp; = &nbsp;" +
                            Common.Functions.ReplaceIndexesTags(_item.Value.Operand.Name)+ "<br/>";
                }
                _dt.Rows.Add(Resources.CommonListManage.Operands, _operands, "#" + i++, "#" + x++);

                //Retorna el DataTable.
                return _dt;

                ////Contruye las columnas y sus atributos.
                //BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
                //BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
                //BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

                //Int64 _idMeasurement = Convert.ToInt64(param["IdMeasurement"]);
                //Int64 _idTransformation = Convert.ToInt64(param["IdTransformation"]);
                //Measurement _measurement = EMSLibrary.User.PerformanceAssessments.Configuration.Measurement(_idMeasurement);
                //CalculateOfTransformation _calculateOfTransformation = _measurement.Transformation(_idTransformation);

                //_dt.ExtendedProperties.Add("PageTitle", Common.Functions.ReplaceIndexesTags(_calculateOfTransformation.LanguageOption.Name));

                //Int16 i = 0;//Se genera este contador, para evitar claves duplicadas, es porque no todos los registros tienen link.            
                //Dictionary<String, Object> _valueLink = new Dictionary<String, Object>();
                //_valueLink.Add("IdIndicator", _measurement.ParameterGroup.Indicator.IdIndicator);
                //_valueLink.Add("IdMagnitud", _measurement.MeasurementUnit.Magnitud.IdMagnitud); 
                //_valueLink.Add("IdMeasurementUnit", _measurement.MeasurementUnit.IdMeasurementUnit);

                ////Carga los datos
                ////_dt.Rows.Add(Resources.CommonListManage.IdMeasurement, _measurement.IdMeasurement, "#" + i++);
                //String _activity = Resources.Common.Unassigned;
                //if (_calculateOfTransformation.Activity != null)
                //{
                //    _activity = Common.Functions.ReplaceIndexesTags(_calculateOfTransformation.Activity.LanguageOption.Name);
                //}
                //_dt.Rows.Add(Resources.CommonListManage.AccountingActivity, _activity, "#" + i++);
                //_dt.Rows.Add(Resources.CommonListManage.Name, Common.Functions.ReplaceIndexesTags(_calculateOfTransformation.LanguageOption.Name), "#" + i++);
                //_dt.Rows.Add(Resources.CommonListManage.LanguageName, _calculateOfTransformation.LanguageOption.Language.Name, "#" + i++);
                //_dt.Rows.Add(Resources.CommonListManage.Description, _calculateOfTransformation.LanguageOption.Description, "#" + i++);
                //_dt.Rows.Add(Resources.CommonListManage.MeasurementUnit, Common.Functions.ReplaceIndexesTags(_calculateOfTransformation.MeasurementUnit.LanguageOption.Name),
                //    GetValueLink(Common.ConstantsEntitiesName.PA.MeasurementUnit, _valueLink));
                //_dt.Rows.Add(Resources.CommonListManage.Indicator, Common.Functions.ReplaceIndexesTags(_calculateOfTransformation.Indicator.LanguageOption.Name),
                //    GetValueLink(Common.ConstantsEntitiesName.PA.Indicator, _valueLink));
                //_dt.Rows.Add(Resources.CommonListManage.Formula, _calculateOfTransformation.Formula, "#" + i++);
                
                //String _operands = String.Empty;
                //foreach (KeyValuePair<String, CalculateOfTransformationParameter> _item in _calculateOfTransformation.Parameters)
                //{
                //    //Hay que acceder al name desde el Language option. (ver si se puede acceder igual para todos los casos)
                //    _operands += Common.Functions.ReplaceIndexesTags(_item.Value.Operand.Name) + "&nbsp; = &nbsp;" +
                //            _item.Key + "<br/>";
                //}
                //_dt.Rows.Add(Resources.CommonListManage.Operands, _operands, "#" + i++);


                ////Retorna el DataTable.
                //return _dt;
            }
            /// <summary>
            /// Construye el DataTable a modo List con los datos de la Coleccion MeasurementDataSeries.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable TransformationDataSeries(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable("TransformationDataSeries");

                //Contruye las columnas y sus atributos.
                ColumnOptions _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.MeasurementDate;
                _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "MeasurementDate", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.StartDate;
                _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "StartDate", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.EndDate;
                _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "EndDate", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.MeasurementValue;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "MeasurementValue", _columnOptions);

                Int64 _idMeasurement = Convert.ToInt64(param["IdMeasurement"]);
                Int64 _idTransformation = Convert.ToInt64(param["IdTransformation"]);
                Measurement _measurement = null;
                //Si viene el parametro del Process, entonces accedo a travez del process
                if (param.ContainsKey("IdProcess"))
                {
                    Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
                    _measurement = ((ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess)).Measurements[_idMeasurement];
                }
                else
                {
                    //Caso contrario, acceso directo
                    _measurement = EMSLibrary.User.PerformanceAssessments.Configuration.Measurement(_idMeasurement);
                }

                //Cuando implementemos la opcion de traer todo en un filtro.
                List<MeasurementPoint> _measurementPoints = _measurement.Transformation(_idTransformation).Series();
                foreach (MeasurementPoint _measurementPoint in _measurementPoints)
                {
                    _dt.Rows.Add(_measurementPoint.MeasureDate, _measurementPoint.StartDate, _measurementPoint.EndDate, Common.Functions.CustomEMSRound(_measurementPoint.MeasureValue));
                }

                //Retorna el DataTable
                return _dt;
            }

        #endregion

        #region Parameter Groups O Conditions
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion ParameterGroups.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ParameterGroups(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ParameterGroup");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdParameterGroup;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdParameterGroup", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdIndicator;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdIndicator", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.ParameterGroup;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Description;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "Description", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                Indicator _indicator = null;
                if (param.ContainsKey("IdProcess"))
                {
                    Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
                    Int64 _idMeasurement = Convert.ToInt64(param["IdMeasurement"]);
                    //Accedo a la medicion desde el process
                    Measurement _measurement = ((ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess)).Measurements[_idMeasurement];
                    //Acceso al indicator desde la medicion.
                    _indicator = _measurement.Indicator;
                }
                else
                {
                    //Solo tengo la medicion...
                    if (param.ContainsKey("IdMeasurement"))
                    {
                        Int64 _idMeasurement = Convert.ToInt64(param["IdMeasurement"]);
                        //Accedo a la medicion desde el config
                        Measurement _measurement = EMSLibrary.User.PerformanceAssessments.Configuration.Measurement(_idMeasurement);
                        //Acceso al indicator desde la medicion.
                        _indicator = _measurement.Indicator;

                    }
                }
                //Forma Standard
                if (param.ContainsKey("IdIndicator"))
                {
                    Int64 _idIndicator = Convert.ToInt64(param["IdIndicator"]);
                    //Accedo al indicator desde el mapa!!!
                    _indicator = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator);
                }
                //finalmente carga el DataTable
                try
                {
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    String _permissionType = String.Empty;
                    if (EMSLibrary.User.PerformanceAssessments.Map.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    //Ya esta armado el DataTable, ahora lo carga
                    foreach (ParameterGroup _parameterGroup in _indicator.ParameterGroups.Values)
                    {
                        _dt.Rows.Add(_parameterGroup.IdParameterGroup, _indicator.IdIndicator, Common.Functions.ReplaceIndexesTags(_parameterGroup.LanguageOption.Name), Common.Functions.ReplaceIndexesTags(_parameterGroup.LanguageOption.Description), _permissionType);
                    }

                }
                catch {} //Si hay error devuelve el dt vacio!
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del ParameterGroup.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ParameterGroup(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ParameterGroup");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            Int64 _idParameterGroup = Convert.ToInt64(param["IdParameterGroup"]);
            Int64 _idIndicator = Convert.ToInt64(param["IdIndicator"]);
            Indicator _indicator = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator);
            ParameterGroup _parameterGroup = _indicator.ParameterGroup(_idParameterGroup);

            _dt.ExtendedProperties.Add("PageTitle", Common.Functions.ReplaceIndexesTags(_parameterGroup.LanguageOption.Name));

            Int16 i = 0;//Se genera este contador, para evitar claves duplicadas, es porque no todos los registros tienen link.            
            Dictionary<String, Object> _valueLink = new Dictionary<String, Object>();
            _valueLink.Add("IdIndicator", _indicator.IdIndicator);

            _dt.Rows.Add(Resources.CommonListManage.Indicator, Common.Functions.ReplaceIndexesTags(_indicator.LanguageOption.Name),
                GetValueLink(Common.ConstantsEntitiesName.PA.Indicator, _valueLink));
            //Carga los datos
            //_dt.Rows.Add(Resources.CommonListManage.IdParameterGroup, _parameterGroup.IdParameterGroup);
            _dt.Rows.Add(Resources.CommonListManage.Name, _parameterGroup.LanguageOption.Name, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.LanguageName, _parameterGroup.LanguageOption.Language.Name, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.Description, _parameterGroup.LanguageOption.Description, "#" + i++);

            //Retorna el DataTable.
            return _dt;
        }
        /// <summary>
        /// Indica si este ParameterGroup tiene Parameter.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un<c>Boolean</c></returns>
        public Boolean ParameterGroupsHasParameter(Dictionary<String, Object> param)
        {
            Int64 _idParameterGroup = Convert.ToInt64(param["IdParameterGroup"]);
            Int64 _idIndicator = Convert.ToInt64(param["IdIndicator"]);
            if (EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator).ParameterGroup(_idParameterGroup).Parameters.Count > 0)
            { return true; }

            return false;
        }
        #endregion

        #region Parameters
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion Parameters.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable Parameters(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("Parameter");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdParameter;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdParameter", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdParameterGroup;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdParameterGroup", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdIndicator;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdIndicator", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Description;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Description", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                if ((param.ContainsKey("IdIndicator")) && (param.ContainsKey("IdParameterGroup")))
                {
                    Int64 _idIndicator = Convert.ToInt64(param["IdIndicator"]);
                    Int64 _idParameterGroup = Convert.ToInt64(param["IdParameterGroup"]);
                    Indicator _indicator = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator);
                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (EMSLibrary.User.PerformanceAssessments.Map.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    //Ya esta armado el DataTable, ahora lo carga
                    foreach (Parameter _parameter in _indicator.ParameterGroup(_idParameterGroup).Parameters.Values)
                    {
                        _dt.Rows.Add(_parameter.IdParameter, _idParameterGroup, _idIndicator, Common.Functions.ReplaceIndexesTags(_parameter.LanguageOption.Description), _permissionType);
                    }
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del Parameter.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable Parameter(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("Parameter");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            Int64 _idParameterGroup = Convert.ToInt64(param["IdParameterGroup"]);
            Int64 _idIndicator = Convert.ToInt64(param["IdIndicator"]);
            Int64 _idParameter = Convert.ToInt64(param["IdParameter"]);

            Parameter _parameter = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator).ParameterGroup(_idParameterGroup).Parameter(_idParameter);


            Indicator _indicator = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator);
            ParameterGroup _parameterGroup = _indicator.ParameterGroup(_idParameterGroup);

            _dt.ExtendedProperties.Add("PageTitle", Common.Functions.ReplaceIndexesTags(_indicator.LanguageOption.Name));

            Int16 i = 0;//Se genera este contador, para evitar claves duplicadas, es porque no todos los registros tienen link.            
            Dictionary<String, Object> _valueLink = new Dictionary<String, Object>();
            _valueLink.Add("IdIndicator", _indicator.IdIndicator);
            _valueLink.Add("IdParameterGroup", _parameterGroup.IdParameterGroup);

            //Carga los datos
            _dt.Rows.Add(Resources.CommonListManage.Indicator, Common.Functions.ReplaceIndexesTags(_indicator.LanguageOption.Name),
                GetValueLink(Common.ConstantsEntitiesName.PA.Indicator, _valueLink));
            _dt.Rows.Add(Resources.CommonListManage.ParameterGroup, _parameterGroup.IdParameterGroup,
                GetValueLink(Common.ConstantsEntitiesName.PA.ParameterGroup, _valueLink));
            //_dt.Rows.Add(Resources.CommonListManage.IdParameter, _parameter.IdParameter, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.Description, _parameter.LanguageOption.Description, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.LanguageName, _parameter.LanguageOption.Language.Name, "#" + i++);

            //Retorna el DataTable.
            return _dt;
        }
        /// <summary>
        /// Indica si este Parameter tiene ParameterRanges.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un<c>Boolean</c></returns>
        public Boolean ParametersHasParameterRange(Dictionary<String, Object> param)
        {
            Int64 _idParameterGroup = Convert.ToInt64(param["IdParameterGroup"]);
            Int64 _idIndicator = Convert.ToInt64(param["IdIndicator"]);
            Int64 _idParameter = Convert.ToInt64(param["IdParameter"]);

            if (EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator).ParameterGroup(_idParameterGroup).Parameter(_idParameter).ParameterRanges.Count > 0)
            { return true; }

            return false;
        }
        #endregion

        #region Parameters Ranges
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion ParameterRanges.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ParameterRanges(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ParameterRange");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdParameter;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdParameter", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdParameterGroup;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdParameterGroup", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdIndicator;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdIndicator", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdParameterRange;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdParameterRange", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.LowValue;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "LowValue", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.HighValue;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "HighValue", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Name;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = false;
            BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                if ((param.ContainsKey("IdIndicator")) && (param.ContainsKey("IdParameterGroup")) && (param.ContainsKey("IdParameter")))
                {
                    Int64 _idIndicator = Convert.ToInt64(param["IdIndicator"]);
                    Int64 _idParameterGroup = Convert.ToInt64(param["IdParameterGroup"]);
                    Int64 _idParameter = Convert.ToInt64(param["IdParameter"]);
                    Indicator _indicator = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator);
                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (EMSLibrary.User.PerformanceAssessments.Map.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    //Ya esta armado el DataTable, ahora lo carga
                    foreach (ParameterRange _parameterRange in _indicator.ParameterGroup(_idParameterGroup).Parameter(_idParameter).ParameterRanges.Values)
                    {
                        _dt.Rows.Add(_idParameter, _idParameterGroup, _idIndicator, _parameterRange.IdParameterRange,
                            _parameterRange.LowValue, _parameterRange.HighValue,
                            _parameterRange.LowValue.ToString() + " - " + _parameterRange.HighValue.ToString(), _permissionType);
                    }
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del ParameterRange.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ParameterRange(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("Parameter");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            Int64 _idParameterGroup = Convert.ToInt64(param["IdParameterGroup"]);
            Int64 _idIndicator = Convert.ToInt64(param["IdIndicator"]);
            Int64 _idParameter = Convert.ToInt64(param["IdParameter"]);
            Int64 _idParameterRange = Convert.ToInt64(param["IdParameterRange"]);

            ParameterRange _parameterRange = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator).ParameterGroup(_idParameterGroup).Parameter(_idParameter).ParameterRange(_idParameterRange);

            _dt.ExtendedProperties.Add("PageTitle", _parameterRange.LowValue + ", " + _parameterRange.HighValue);

            Indicator _indicator = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator);
            ParameterGroup _parameterGroup = _indicator.ParameterGroup(_idParameterGroup);
            Parameter _parameter = _parameterGroup.Parameter(_idParameter);

            Int16 i = 0;//Se genera este contador, para evitar claves duplicadas, es porque no todos los registros tienen link.            
            Dictionary<String, Object> _valueLink = new Dictionary<String, Object>();
            _valueLink.Add("IdIndicator", _indicator.IdIndicator);
            _valueLink.Add("IdParameterGroup", _parameterGroup.IdParameterGroup);
            _valueLink.Add("IdParameter", _parameter.IdParameter);

            //GetValueLink(Common.ConstantsEntitiesName.PA.Calculation, _valueLink));

            //Carga los datos
            _dt.Rows.Add(Resources.CommonListManage.Indicator, Common.Functions.ReplaceIndexesTags(_indicator.LanguageOption.Name),
                GetValueLink(Common.ConstantsEntitiesName.PA.Indicator, _valueLink));
            _dt.Rows.Add(Resources.CommonListManage.ParameterGroup, _parameterGroup.LanguageOption.Name,
                GetValueLink(Common.ConstantsEntitiesName.PA.ParameterGroup, _valueLink));
            _dt.Rows.Add(Resources.CommonListManage.Parameter, _parameter.LanguageOption.Description,
                GetValueLink(Common.ConstantsEntitiesName.PA.Parameter, _valueLink));
            //_dt.Rows.Add(Resources.CommonListManage.IdParameterRange, _parameterRange.IdParameterRange, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.LowValue, _parameterRange.LowValue, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.HighValue, _parameterRange.HighValue, "#" + i++);

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        #region Key Indicators
            /// <summary>
            /// Construye el DataTable a modo List con los datos de la Coleccion Key Indicators.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable KeyIndicators(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable("KeyIndicator");

                //Contruye las columnas y sus atributos.
                ColumnOptions _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdMeasurement;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdMeasurement", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdIndicator;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdIndicator", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdProcess;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdProcess", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Measurement;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = true;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = true;
                _columnOptions.IsSortedBy = true;
                BuildColumnsDataTable(ref _dt, "Measurement", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Indicator;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "Indicator", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Device;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "Device", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Value;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Double");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "Value", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Type;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "Type", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Period;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "Period", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.MeasurementUnit;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "MeasurementUnit", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Status;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "Status", _columnOptions);

                //Cuando implementemos la opcion de traer todo en un filtro.
                Boolean _showAll = false;
                if (ValidateSelectedItemComboBox(param, ref _showAll))
                {
                    if (param.ContainsKey("IdProcess"))
                    {
                        Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
                        Condesus.EMS.Business.PF.Entities.ProcessGroupProcess _processGroupProcess = (Condesus.EMS.Business.PF.Entities.ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess).Parent;

                        String _permissionType = String.Empty;
                        //Obtiene el permiso que tiene el usuario para esa organizacion.
                        if (_processGroupProcess.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                            { _permissionType = Common.Constants.PermissionManageName; }
                        else
                            { _permissionType = Common.Constants.PermissionViewName; }

                        foreach (Condesus.EMS.Business.PA.Entities.Measurement _measurement in _processGroupProcess.Measurements.Values)
                        {
                            if (_measurement.IsRelevant)
                            {
                                String _valueType;
                                String _period;
                                Double _measureValue = 0;
                                DateTime? _firsDateSeries = null;   //Esto lo necesita para pasarlo al totalmeasurement. y esperar la primer fecha cuando es cumulative.
                                Condesus.EMS.Business.PA.Entities.MeasurementPoint _measurementPoint = _measurement.TotalMeasurement(ref _firsDateSeries);
                                DateTime? _startDate = null;
                                DateTime? _endDate = null;
                                //MeasurementStatistics _measurementStatistics = _measurement.Statistics(_startDate, _endDate);

                                if (_measurementPoint != null)
                                {
                                    _measureValue = _measurementPoint.MeasureValue;
                                    if (_measurement.GetType().Name == Common.ConstantsEntitiesName.PA.MeasurementExtensive)
                                    {
                                        _valueType = Resources.CommonListManage.Cummulative;    // "Cummulative";
                                        //_period = _measurementPoint.FirstDate.ToShortDateString() + " - " + _measurementStatistics.LastDate.ToShortDateString();
                                    }
                                    else
                                    {
                                        _valueType = Resources.CommonListManage.NonCummulative; // "Non Cummulative";
                                        //_period = _measurementPoint.LastDate.ToShortDateString();  //Solo la ultima fecha
                                    }
                                    _period = _measurementPoint.StartDate.ToShortDateString() + " - " + _measurementPoint.EndDate.ToShortDateString();
                                }
                                else
                                {   //como no hay datos, solo pongo el tipo.
                                    _valueType = (_measurement.GetType().Name == Common.ConstantsEntitiesName.PA.MeasurementExtensive) ? Resources.CommonListManage.Cummulative : Resources.CommonListManage.NonCummulative;
                                    _period = " - ";
                                    _measureValue = 0;
                                }


                                //if (_measurementPoint != null)
                                //{
                                //    _measureValue = _measurementPoint.MeasureValue;
                                //    //Cuando es Acumulativa, entonces se guarda la fecha la primer fecha de la medicion y la ultima.
                                //    if (_measurement.GetType().Name == Common.ConstantsEntitiesName.PA.MeasurementExtensive)
                                //    {
                                //        _valueType = Resources.CommonListManage.Cummulative;    // "Cummulative";
                                //        _period = _firsDateSeries.Value.ToShortDateString() + " - " + _measurementPoint.MeasureDate.ToShortDateString();
                                //    }
                                //    else
                                //    {
                                //        _valueType = Resources.CommonListManage.NonCummulative; // "Non Cummulative";
                                //        _period = _measurementPoint.MeasureDate.ToShortDateString();  //Solo la ultima fecha
                                //    }
                                //}
                                //else
                                //{
                                //    //como no hay datos, solo pongo el tipo.
                                //    _valueType = (_measurement.GetType().Name == Common.ConstantsEntitiesName.PA.MeasurementExtensive) ? Resources.CommonListManage.Cummulative : Resources.CommonListManage.NonCummulative;
                                //    _period = " - ";
                                //    _measureValue = 0;
                                //}

                                String _deviceName = (_measurement.Device != null) ? _measurement.Device.FullName : String.Empty;
                                String _indicatorName = Common.Functions.ReplaceIndexesTags(_measurement.Indicator.LanguageOption.Name);
                                String _measurementUnit = Common.Functions.ReplaceIndexesTags(_measurement.MeasurementUnit.LanguageOption.Name);

                                _dt.Rows.Add(_measurement.IdMeasurement,
                                        _measurement.Indicator.IdIndicator,
                                        _idProcess,
                                        Common.Functions.ReplaceIndexesTags(_measurement.LanguageOption.Name),
                                        _indicatorName,
                                        _deviceName,
                                        Common.Functions.CustomEMSRound(_measureValue),
                                        _valueType,
                                        _period,
                                        _measurementUnit,
                                        _permissionType,
                                        _measurementPoint.Sing);
                            }
                        }
                    }
                }
                //Retorna el DataTable
                return _dt;
            }
            /// <summary>
            /// Construye el DataTable a modo List con los datos de la Coleccion ALL Key Indicators.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable AllKeyIndicators(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable("KeyIndicator");

                //Contruye las columnas y sus atributos.
                ColumnOptions _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdMeasurement;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdMeasurement", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdIndicator;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdIndicator", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdProcess;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdProcess", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.AccountingActivity;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = true;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = true;
                _columnOptions.IsSortedBy = true;
                BuildColumnsDataTable(ref _dt, "AccountingActivity", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Measurement;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = true;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = true;
                _columnOptions.IsSortedBy = true;
                BuildColumnsDataTable(ref _dt, "Measurement", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Indicator;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "Indicator", _columnOptions);

                //_columnOptions = new ColumnOptions();
                //_columnOptions.ColumnCaption = Resources.CommonListManage.Device;
                //_columnOptions.ColumnDataType = System.Type.GetType("System.String");
                //_columnOptions.IsPrimaryKey = false;
                //_columnOptions.DisplayInCombo = false;
                //_columnOptions.DisplayInManage = true;
                //_columnOptions.IsSearchable = true;
                //_columnOptions.AllowNull = false;
                //BuildColumnsDataTable(ref _dt, "Device", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Value;
                //_columnOptions.ColumnDataType = System.Type.GetType("System.Double");
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "Value", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Type;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "Type", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Period;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "Period", _columnOptions);

                //_columnOptions = new ColumnOptions();
                //_columnOptions.ColumnCaption = Resources.CommonListManage.MeasurementUnit;
                //_columnOptions.ColumnDataType = System.Type.GetType("System.String");
                //_columnOptions.IsPrimaryKey = false;
                //_columnOptions.DisplayInCombo = false;
                //_columnOptions.DisplayInManage = true;
                //_columnOptions.IsSearchable = false;
                //_columnOptions.AllowNull = false;
                //BuildColumnsDataTable(ref _dt, "MeasurementUnit", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Status;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "Status", _columnOptions);

                //Cuando implementemos la opcion de traer todo en un filtro.
                Boolean _showAll = false;
                if (ValidateSelectedItemComboBox(param, ref _showAll))
                {
                    if ((param.ContainsKey("IdProcess")) && (param.ContainsKey("IdActivity")))
                    {
                        Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
                        Int64 _idActivity = Convert.ToInt64(param["IdActivity"]);
                        Condesus.EMS.Business.PF.Entities.ProcessGroupProcess _processGroupProcess = (Condesus.EMS.Business.PF.Entities.ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess).Parent;

                        String _permissionType = String.Empty;
                        //Obtiene el permiso que tiene el usuario para esa organizacion.
                        if (_processGroupProcess.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                        { _permissionType = Common.Constants.PermissionManageName; }
                        else
                        { _permissionType = Common.Constants.PermissionViewName; }

                        AccountingActivity _accountingActivity = EMSLibrary.User.PerformanceAssessments.Configuration.AccountingActivity(_idActivity);
                        //((ProcessTaskMeasurement)_measurement.ProcessTask).AccountingActivity
                        //var _lnqMeasurements = from m in _processGroupProcess.Measurements.Values
                        //                       where ((ProcessTaskMeasurement)m.ProcessTask).AccountingActivity.IdActivity == _idActivity
                        //                       select m;

                        var _lnqMeasurements = from m in _accountingActivity.Measurements(_processGroupProcess).Values
                                               select m;
                        foreach (Condesus.EMS.Business.PA.Entities.Measurement _measurement in _lnqMeasurements)
                        {
                            //Carga todos, sin importar la relevancia!
                            String _valueType;
                            String _period;
                            Double _measureValue = 0;
                            DateTime? _firsDateSeries = null;   //Esto lo necesita para pasarlo al totalmeasurement. y esperar la primer fecha cuando es cumulative.
                            //Condesus.EMS.Business.PA.Entities.MeasurementPoint _measurementPoint = _measurement.TotalMeasurement(ref _firsDateSeries);

                            //if (_measurementPoint != null)
                            //{
                            //    _measureValue = _measurementPoint.MeasureValue;
                            //    //Cuando es Acumulativa, entonces se guarda la fecha la primer fecha de la medicion y la ultima.
                            //    if (_measurement.GetType().Name == Common.ConstantsEntitiesName.PA.MeasurementExtensive)
                            //    {
                            //        _valueType = Resources.CommonListManage.Cummulative;    // "Cummulative";
                            //        _period = _firsDateSeries.Value.ToShortDateString() + " - " + _measurementPoint.MeasureDate.ToShortDateString();
                            //    }
                            //    else
                            //    {
                            //        _valueType = Resources.CommonListManage.NonCummulative; // "Non Cummulative";
                            //        _period = _measurementPoint.MeasureDate.ToShortDateString();  //Solo la ultima fecha
                            //    }
                            //}
                            //else
                            //{
                            //    //como no hay datos, solo pongo el tipo.
                            //    _valueType = (_measurement.GetType().Name == Common.ConstantsEntitiesName.PA.MeasurementExtensive) ? Resources.CommonListManage.Cummulative : Resources.CommonListManage.NonCummulative;
                            //    _period = " - ";
                            //    _measureValue = 0;
                            //}

                            DateTime? _startDate = null;
                            DateTime? _endDate = null;
                            MeasurementPoint _measurementPoint = _measurement.TotalMeasurement(ref _firsDateSeries);
                            //MeasurementStatistics _measurementPoint = _measurement.Statistics(_startDate, _endDate);
                            Boolean _measurementOutOfRange = false;
                            if (_measurementPoint != null)
                            {
                                _measureValue = _measurementPoint.MeasureValue;
                                //_measureValue = _measurementPoint.SumValue;
                                if (_measurement.GetType().Name == Common.ConstantsEntitiesName.PA.MeasurementExtensive)
                                {
                                    _valueType = Resources.CommonListManage.Cummulative;    // "Cummulative";
                                    //_period = _firsDateSeries.Value.ToShortDateString() + " - " + _measurementPoint.MeasureDate.ToShortDateString();
                                    //_period = _measurementPoint.StartDate.ToShortDateString() + " - " + _measurementPoint.EndDate.ToShortDateString();
                                }
                                else
                                {
                                    _valueType = Resources.CommonListManage.NonCummulative; // "Non Cummulative";
                                    //_period = _measurementPoint.LastDate.ToShortDateString();  //Solo la ultima fecha
                                }
                                _period = _measurementPoint.StartDate.ToShortDateString() + " - " + _measurementPoint.EndDate.ToShortDateString();
                                _measurementOutOfRange = _measurementPoint.Sing;
                            }
                            else
                            {   //como no hay datos, solo pongo el tipo.
                                _valueType = (_measurement.GetType().Name == Common.ConstantsEntitiesName.PA.MeasurementExtensive) ? Resources.CommonListManage.Cummulative : Resources.CommonListManage.NonCummulative;
                                _period = Resources.Common.Unexecuted;
                                _measureValue = 0;
                            }

                            String _deviceName = (_measurement.Device != null) ? _measurement.Device.FullName : String.Empty;
                            String _indicatorName = Common.Functions.ReplaceIndexesTags(_measurement.Indicator.LanguageOption.Name);
                            String _measurementUnit = Common.Functions.ReplaceIndexesTags(_measurement.MeasurementUnit.LanguageOption.Name);

                            String _activity = Resources.CommonListManage.NoActivity;
                            if (((ProcessTaskMeasurement)_measurement.ProcessTask).AccountingActivity != null)
                            {
                                _activity = ((ProcessTaskMeasurement)_measurement.ProcessTask).AccountingActivity.LanguageOption.Name;
                            }
                            _dt.Rows.Add(_measurement.IdMeasurement,
                                _measurement.Indicator.IdIndicator,
                                _idProcess,
                                _activity, 
                                Common.Functions.ReplaceIndexesTags(_measurement.LanguageOption.Name),
                                _indicatorName,
                                //_deviceName,
                                Common.Functions.CustomEMSRound(_measureValue) + " [" + _measurementUnit + "]",
                                _valueType,
                                _period,
                                //_measurementUnit,
                                _permissionType,
                                _measurementOutOfRange);
                        }
                    }
                }
                //Retorna el DataTable
                return _dt;
            }
            /// <summary>
            /// Construye el DataTable a modo Property con los datos del Key Indicator.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable KeyIndicator(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable("Measurement");

                //Contruye las columnas y sus atributos.
                BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
                BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
                BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());
                BuildColumnsDataTable(ref _dt, "ColumnOrderViewer", SetColumnOrderViewer());

                Int64 _idMeasurement = Convert.ToInt64(param["IdMeasurement"]);
                Measurement _measurement = null;
                //Si viene el process, acceso al measurement a traves del process
                if (param.ContainsKey("IdProcess"))
                {
                    Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
                    _measurement = ((ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess)).Measurements[_idMeasurement];
                }
                else
                {
                    _measurement = EMSLibrary.User.PerformanceAssessments.Configuration.Measurement(_idMeasurement);
                }

                _dt.ExtendedProperties.Add("PageTitle", Common.Functions.ReplaceIndexesTags(_measurement.LanguageOption.Name));

                Int16 i = 0;//Se genera este contador, para evitar claves duplicadas, es porque no todos los registros tienen link.            
                Int16 x = 0;//Se genera este contador, para evitar claves duplicadas, es porque no todos los registros tienen link.            
                Dictionary<String, Object> _valueLink = new Dictionary<String, Object>();
                _valueLink.Add("IdIndicator", _measurement.Indicator.IdIndicator);
                _valueLink.Add("IdMeasurementUnit", _measurement.MeasurementUnit.IdMeasurementUnit);
                _valueLink.Add("IdMagnitud", _measurement.MeasurementUnit.Magnitud.IdMagnitud);
                //Una medicion puede no tener un equipo asociado, porque no todas se miden con un equipo.
                if (_measurement.Device != null)
                {
                    _valueLink.Add("IdMeasurementDevice", _measurement.Device.IdMeasurementDevice);
                }
                //_valueLink.Add("IdParameterGroup", _measurement.ParameterGroup.IdParameterGroup);

                //Carga los datos
                //Name: 
                //Indicator:  zzz [Unit] 
                //Site: 
                //Frequency: tal [timeunit] 
                //Methodology: 
                //Scope: 
                //Source 
                //Quality 
                //Task Name: 
                //Frequency at Source: 
                //_dt.Rows.Add(Resources.CommonListManage.IdMeasurement, _measurement.IdMeasurement, "#" + i++);
                _valueLink.Add("IdProcess", _measurement.ProcessTask.Parent.IdProcess);
                _valueLink.Add("IdTask", _measurement.ProcessTask.IdProcess);
                _dt.Rows.Add(Resources.CommonListManage.ProcessTaskMeasurement, Common.Functions.ReplaceIndexesTags(_measurement.ProcessTask.LanguageOption.Title),
                    GetValueLink(Common.ConstantsEntitiesName.PF.ProcessTaskMeasurement, _valueLink), "#" + x++);
                _dt.Rows.Add(Resources.CommonListManage.Name, Common.Functions.ReplaceIndexesTags(_measurement.LanguageOption.Name), "#" + i++, "#" + x++);
                _dt.Rows.Add(Resources.CommonListManage.Indicator, Common.Functions.ReplaceIndexesTags(_measurement.Indicator.LanguageOption.Name) + " [" + Common.Functions.ReplaceIndexesTags(_measurement.MeasurementUnit.LanguageOption.Name) + "]",
                    GetValueLink(Common.ConstantsEntitiesName.PA.Indicator, _valueLink), "#" + x++);
                //_dt.Rows.Add(Resources.CommonListManage.LanguageName, Common.Functions.ReplaceIndexesTags(_measurement.LanguageOption.Language.Name), "#" + i++, "#" + x++);
                if (_measurement.ProcessTask.Site != null)
                {
                    _dt.Rows.Add(Resources.CommonListManage.Site, Common.Functions.ReplaceIndexesTags(_measurement.ProcessTask.Site.LanguageOption.Name), "#" + i++, "#" + x++);
                }
                else
                {
                    _dt.Rows.Add(Resources.CommonListManage.Site, Resources.Common.Unassigned, "#" + i++, "#" + x++);
                }
                //_dt.Rows.Add(Resources.CommonListManage.Description, _measurement.LanguageOption.Description, "#" + i++);
                _dt.Rows.Add(Resources.CommonListManage.CollectionFrequency, Resources.Common.WordFrequency + " " + _measurement.ProcessTask.Interval.ToString() + " " + EMSLibrary.User.ProcessFramework.Configuration.TimeUnit(_measurement.ProcessTask.TimeUnitInterval).LanguageOption.Name, "#" + i++, "#" + x++);
                _dt.Rows.Add(Resources.CommonListManage.DataFrequency, Resources.Common.WordFrequency + " " + _measurement.Frequency.ToString() + " " + EMSLibrary.User.ProcessFramework.Configuration.TimeUnit(_measurement.TimeUnitFrequency).LanguageOption.Name, "#" + i++, "#" + x++);
                _dt.Rows.Add(Resources.CommonListManage.MeasurementFrequencyAtSource, _measurement.FrequencyAtSource, "#" + i++, "#" + x++);
                if (((ProcessTaskMeasurement)_measurement.ProcessTask).AccountingScope != null)
                {
                    _dt.Rows.Add(Resources.CommonListManage.AccountingScope, ((ProcessTaskMeasurement)_measurement.ProcessTask).AccountingScope.LanguageOption.Name, "#" + i++, "#" + x++);
                }
                else
                {
                    _dt.Rows.Add(Resources.CommonListManage.AccountingScope, Resources.Common.Unassigned, "#" + i++, "#" + x++);
                }
                if (((ProcessTaskMeasurement)_measurement.ProcessTask).AccountingActivity != null)
                {
                    _dt.Rows.Add(Resources.CommonListManage.AccountingActivity, ((ProcessTaskMeasurement)_measurement.ProcessTask).AccountingActivity.LanguageOption.Name, "#" + i++, "#" + x++);
                }
                else
                {
                    _dt.Rows.Add(Resources.CommonListManage.AccountingActivity, Resources.CommonListManage.NoActivity, "#" + i++, "#" + x++);
                }
                if (_measurement.Methodology == null)
                {
                    _dt.Rows.Add(Resources.CommonListManage.Methodology, String.Empty, "#" + i++, "#" + x++);
                }
                else
                {
                    _valueLink.Add("IdMethodology", _measurement.Methodology.IdMethodology);
                    _dt.Rows.Add(Resources.CommonListManage.Methodology, _measurement.Methodology.LanguageOption.MethodName,
                        GetValueLink(Common.ConstantsEntitiesName.PA.Methodology, _valueLink), "#" + x++);
                }

                _dt.Rows.Add(Resources.CommonListManage.MeasurementSource, _measurement.Source, "#" + i++, "#" + x++);
                if (_measurement.Quality == null)
                {
                    _dt.Rows.Add(Resources.CommonListManage.Quality, String.Empty, "#" + i++, "#" + x++);
                }
                else
                {
                    _valueLink.Add("IdQuality", _measurement.Quality.IdQuality);
                    _dt.Rows.Add(Resources.CommonListManage.Quality, _measurement.Quality.LanguageOption.Name,
                        GetValueLink(Common.ConstantsEntitiesName.PA.Quality, _valueLink), "#" + x++);
                }

                //Parece que esto no lo quieren ver....
                ////Una medicion puede no tener un equipo asociado, porque no todas se miden con un equipo.
                //if (_measurement.Device != null)
                //{
                //    _dt.Rows.Add(Resources.CommonListManage.ParameterGroup, _measurement.ParameterGroup.LanguageOption.Name,
                //        GetValueLink(Common.ConstantsEntitiesName.PA.ParameterGroup, _valueLink));
                //}
                //else
                //{
                //    _dt.Rows.Add(Resources.CommonListManage.MeasurementDevice, Resources.Common.NotUsed, "#" + i++);
                //}
                //_dt.Rows.Add(Resources.CommonListManage.Uncertainty, _measurement.Uncertainty, "#" + i++);

                //Retorna el DataTable.
                return _dt;

                ////Construye el datatable
                //DataTable _dt = BuildDataTable("Parameter");

                ////Contruye las columnas y sus atributos.
                //BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
                //BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
                //BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

                //Int64 _idMeasurement = Convert.ToInt64(param["IdMeasurement"]);
                //Measurement _measurement = EMSLibrary.User.PerformanceAssessments.Configuration.Measurement(_idMeasurement);

                //_dt.ExtendedProperties.Add("PageTitle", Common.Functions.ReplaceIndexesTags(_measurement.LanguageOption.Name));

                //Int16 i = 0;//Se genera este contador, para evitar claves duplicadas, es porque no todos los registros tienen link.            
                //Dictionary<String, Object> _valueLink = new Dictionary<String, Object>();
                //_valueLink.Add("IdMeasurement", _measurement.IdMeasurement); 
                //_valueLink.Add("IdIndicator", _measurement.Indicator.IdIndicator);
                //if (_measurement.Device != null)
                //{
                //    _valueLink.Add("IdMeasurementDevice", _measurement.Device.IdMeasurementDevice);
                //}
                //_valueLink.Add("IdMeasurementUnit", _measurement.MeasurementUnit.IdMeasurementUnit);
                //_valueLink.Add("IdMagnitud", _measurement.MeasurementUnit.Magnitud.IdMagnitud);
                
                ////Carga los datos
                //_dt.Rows.Add(Resources.CommonListManage.Measurement, Common.Functions.ReplaceIndexesTags(_measurement.LanguageOption.Name),
                //    GetValueLink(Common.ConstantsEntitiesName.PA.Measurement, _valueLink));
                //_dt.Rows.Add(Resources.CommonListManage.Indicator, Common.Functions.ReplaceIndexesTags(_measurement.Indicator.LanguageOption.Name),
                //    GetValueLink(Common.ConstantsEntitiesName.PA.Indicator, _valueLink));
                ////Si no hay device, se pone "Not used"
                //if (_measurement.Device != null)
                //{
                //    _dt.Rows.Add(Resources.CommonListManage.Device, _measurement.Device.FullName,
                //        GetValueLink(Common.ConstantsEntitiesName.PA.MeasurementDevice, _valueLink));
                //}
                //else
                //{
                //    _dt.Rows.Add(Resources.CommonListManage.Device, Resources.Common.NotUsed, "#" + i++);
                //}
                //_dt.Rows.Add(Resources.CommonListManage.MeasurementUnit, Common.Functions.ReplaceIndexesTags(_measurement.MeasurementUnit.LanguageOption.Name),
                //    GetValueLink(Common.ConstantsEntitiesName.PA.MeasurementUnit, _valueLink));

                ////Retorna el DataTable.
                //return _dt;
            }
            /// <summary>
            /// Construye el DataTable a modo List con los datos de la Coleccion ALL Key Indicators.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable AllMeasurementByFacility(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable("KeyIndicator");

                //Contruye las columnas y sus atributos.
                ColumnOptions _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdMeasurement;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdMeasurement", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdIndicator;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdIndicator", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdProcess;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdProcess", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdTask;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdTask", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Measurement;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = true;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = true;
                _columnOptions.IsSortedBy = true;
                _columnOptions.SortOrder = Telerik.Web.UI.GridSortOrder.Ascending;
                BuildColumnsDataTable(ref _dt, "Measurement", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Value;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "Value", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Result;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false; //Lo sacamos porque es un indicador arbitrario y no esta bueno...
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "Result", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Status;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "Status", _columnOptions);


                //Cuando implementemos la opcion de traer todo en un filtro.
                Boolean _showAll = false;
                if (ValidateSelectedItemComboBox(param, ref _showAll))
                {
                    if ((param.ContainsKey("IdProcess")) && (param.ContainsKey("IdFacility")))
                    {
                        Int64 _idFacility = Convert.ToInt64(param["IdFacility"]); ;
                        Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
                        Condesus.EMS.Business.PF.Entities.ProcessGroupProcess _processGroupProcess = (Condesus.EMS.Business.PF.Entities.ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess).Parent;

                        String _permissionType = String.Empty;
                        //Obtiene el permiso que tiene el usuario para esa organizacion.
                        if (_processGroupProcess.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                        { _permissionType = Common.Constants.PermissionManageName; }
                        else
                        { _permissionType = Common.Constants.PermissionViewName; }

                        Int64 _idIndicator_tnCO2e;
                        Int64.TryParse(ConfigurationManager.AppSettings["IdIndicator_tnCO2e"], out _idIndicator_tnCO2e);

                        Indicator _indicator_tnCO2e = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_tnCO2e);
                        DateTime? _firsDateSeries = null;   //Esto lo necesita para pasarlo al totalmeasurement. y esperar la primer fecha cuando es cumulative.

                        //Solo se muestran filtrando con la fecha del CurrentCampaign que tiene el process
                        DateTime? _startDate = _processGroupProcess.CurrentCampaignStartDate;
                        DateTime? _endDate = Convert.ToDateTime(DateTime.Now.ToShortDateString());

                        //Hay que recorrer si ese facility tiene sectores hijos...
                        String _allIdSite = String.Empty;
                        GetAllSectorByFacility(ref _allIdSite, _idFacility);

                        String[] _separatorRow = new String[] { ";" };
                        String[] _idsites = _allIdSite.Split(_separatorRow, StringSplitOptions.RemoveEmptyEntries);
                        for (int i = 0; i < _idsites.Length; i++)
                        {
                            var _measurementByFacility = from m in _processGroupProcess.Measurements.Values
                                                         where m.ProcessTask.Site != null
                                                         && m.ProcessTask.Site.IdFacility == Convert.ToInt64(_idsites[i])
                                                         //&& m.TotalMeasurement(ref _firsDateSeries) != null
                                                         orderby m.LanguageOption.Name ascending
                                                         select m;
                            foreach (Condesus.EMS.Business.PA.Entities.Measurement _measurement in _measurementByFacility)
                            {
                                //Carga todos, sin importar la relevancia!
                                Double _measureValue = 0;
                                //Condesus.EMS.Business.PA.Entities.MeasurementPoint _measurementPoint = _measurement.TotalMeasurement(ref _firsDateSeries);
                                MeasurementStatistics _measurementStatistics = _measurement.Statistics(_startDate, _endDate);

                                String _indicatorName = Common.Functions.ReplaceIndexesTags(_measurement.Indicator.LanguageOption.Name);
                                String _measurementUnit = Common.Functions.ReplaceIndexesTags(_measurement.MeasurementUnit.LanguageOption.Name);

                                if (_measurementStatistics != null)
                                {
                                    if (_measurement.GetType().Name == Common.ConstantsEntitiesName.PA.MeasurementExtensive)
                                    {
                                        _measureValue = _measurementStatistics.SumValue;
                                    }
                                    else
                                    {
                                        _measureValue = _measurementStatistics.LastValue;
                                    }
                                    String _result_tnCO2e = String.Empty;
                                    if (_indicator_tnCO2e != null)
                                    {
                                        _result_tnCO2e = _measurement.ResultTransformationByIndicator(_indicator_tnCO2e, _startDate, _endDate).ToString()
                                            + " " + Common.Functions.ReplaceIndexesTags(_indicator_tnCO2e.LanguageOption.Name);
                                    }
                                    _dt.Rows.Add(_measurement.IdMeasurement, _measurement.Indicator.IdIndicator, _idProcess, 
                                        _measurement.ProcessTask.IdProcess, 
                                        Common.Functions.ReplaceIndexesTags(_measurement.LanguageOption.Name),
                                            Common.Functions.CustomEMSRound(_measureValue) + " " + _measurementUnit,
                                            _result_tnCO2e,
                                            _permissionType,
                                            ((ProcessTaskMeasurement)_measurement.ProcessTask).MeasurementStatus);
                                }
                            }
                        }
                    }
                }
                //Retorna el DataTable
                return _dt;
            }
            private void GetAllSectorByFacility(ref String allId, Int64 idFacility)
            {
                Site _site = EMSLibrary.User.GeographicInformationSystem.Site(idFacility);
                //Si no esta en el string, 
                if (!allId.Contains(idFacility.ToString()))
                {
                    allId += idFacility + ";";
                }
                foreach (Site _item in _site.Sectors.Values)
                {
                    allId += _item.IdFacility + ";";

                    GetAllSectorByFacility(ref allId, _item.IdFacility);
                }
            }
        #endregion


        #region Indicator Extended Properties
            /// <summary>
            /// Construye el DataTable a modo List con los datos de la Coleccion Indicator Extended Properties.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable IndicatorExtendedProperties(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable("IndicatorExtendedProperty");

                //Contruye las columnas y sus atributos.
                ColumnOptions _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdExtendedProperty;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdExtendedProperty", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdIndicator;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdIndicator", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdExtendedPropertyClassification;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdExtendedPropertyClassification", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Classification;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = true;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = true;
                _columnOptions.IsSortedBy = true;
                BuildColumnsDataTable(ref _dt, "Classification", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.ExtendedProperty;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = true;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = true;
                _columnOptions.IsContextMenuCaption = true;
                _columnOptions.IsSortedBy = true;
                BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Value;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = true;
                BuildColumnsDataTable(ref _dt, "Value", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

                //Cuando implementemos la opcion de traer todo en un filtro.
                if (param.ContainsKey("IdIndicator"))
                {
                    Int64 _idIndicator = Convert.ToInt64(param["IdIndicator"]);
                    Indicator _indicator = (Indicator)EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator);
                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (EMSLibrary.User.PerformanceAssessments.Map.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    //Ya esta armado el DataTable, ahora lo carga
                    foreach (ExtendedPropertyValue _indicatorExtendedProperty in _indicator.ExtendedPropertyValues)
                    {
                        _dt.Rows.Add(_indicatorExtendedProperty.ExtendedProperty.IdExtendedProperty, _idIndicator,
                            _indicatorExtendedProperty.ExtendedProperty.ExtendedPropertyClassification.IdExtendedPropertyClassification,
                            _indicatorExtendedProperty.ExtendedProperty.ExtendedPropertyClassification.LanguageOption.Name,
                            _indicatorExtendedProperty.ExtendedProperty.LanguageOption.Name, _indicatorExtendedProperty.Value, _permissionType);
                    }
                }
                //Retorna el DataTable
                return _dt;
            }
            /// <summary>
            /// Construye el DataTable a modo Property con los datos del Indicator Extended Property.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable IndicatorExtendedProperty(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable("IndicatorExtendedProperty");

                //Contruye las columnas y sus atributos.
                BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
                BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
                BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

                Int64 _idIndicator = Convert.ToInt64(param["IdIndicator"]);
                Int64 _idIndicatorExtendedProperty = Convert.ToInt64(param["IdExtendedProperty"]);

                ExtendedPropertyValue _indicatorExtendedProperty = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator).ExtendedPropertyValue(_idIndicatorExtendedProperty);

                _dt.ExtendedProperties.Add("PageTitle", Common.Functions.ReplaceIndexesTags(_indicatorExtendedProperty.ExtendedProperty.LanguageOption.Name));

                Int16 i = 0;//Se genera este contador, para evitar claves duplicadas, es porque no todos los registros tienen link.            
                Dictionary<String, Object> _valueLink = new Dictionary<String, Object>();
                _valueLink.Add("IdExtendedPropertyClassification", _indicatorExtendedProperty.ExtendedProperty.ExtendedPropertyClassification.IdExtendedPropertyClassification);

                //Carga los datos
                _dt.Rows.Add(Resources.CommonListManage.ExtendedPropertyClassification, _indicatorExtendedProperty.ExtendedProperty.ExtendedPropertyClassification.LanguageOption.Name,
                    GetValueLink(Common.ConstantsEntitiesName.PF.ExtendedPropertyClassification, _valueLink));
                _dt.Rows.Add(Resources.CommonListManage.Name, _indicatorExtendedProperty.ExtendedProperty.LanguageOption.Name, "#" + i++);
                _dt.Rows.Add(Resources.CommonListManage.Value, _indicatorExtendedProperty.Value, "#" + i++);

                //Retorna el DataTable.
                return _dt;
            }
            /// <summary>
            /// Construye el List de Propiedades Extendidas para los Parameter Group
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public ExtendedPropertyValue IndicatorExtendedPropertyValues(Dictionary<String, Object> param)
            {
                Int64 _idIndicator = Convert.ToInt64(param["IdIndicator"]);
                Int64 _idExtendedProperty = Convert.ToInt64(param["IdExtendedProperty"]);

                return EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator).ExtendedPropertyValue(_idExtendedProperty);
            }
        #endregion

        //Descomentar esto cuando tengamos las Extended Properties para FORMULA, CALCULO Y CONDICIONES!!!!!
        #region Formula Extended Properties
            /// <summary>
            /// Construye el DataTable a modo List con los datos de la Coleccion Formula Extended Properties.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable FormulaExtendedProperties(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable("FormulaExtendedProperty");

                //Contruye las columnas y sus atributos.
                ColumnOptions _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdExtendedProperty;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdExtendedProperty", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdFormula;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdFormula", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdExtendedPropertyClassification;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdExtendedPropertyClassification", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Classification;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = true;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = true;
                _columnOptions.IsSortedBy = true;
                BuildColumnsDataTable(ref _dt, "Classification", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.ExtendedProperty;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = true;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = true;
                _columnOptions.IsContextMenuCaption = true;
                _columnOptions.IsSortedBy = true;
                BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Value;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = true;
                BuildColumnsDataTable(ref _dt, "Value", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

                //Cuando implementemos la opcion de traer todo en un filtro.
                if (param.ContainsKey("IdFormula"))
                {
                    Int64 _idFormula = Convert.ToInt64(param["IdFormula"]);
                    Formula _formula = (Formula)EMSLibrary.User.PerformanceAssessments.Configuration.Formula(_idFormula);
                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (EMSLibrary.User.PerformanceAssessments.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    //Ya esta armado el DataTable, ahora lo carga
                    foreach (ExtendedPropertyValue _formulaExtendedProperty in _formula.ExtendedPropertyValues)
                    {
                        _dt.Rows.Add(_formulaExtendedProperty.ExtendedProperty.IdExtendedProperty, _idFormula,
                            _formulaExtendedProperty.ExtendedProperty.ExtendedPropertyClassification.IdExtendedPropertyClassification,
                            _formulaExtendedProperty.ExtendedProperty.ExtendedPropertyClassification.LanguageOption.Name,
                            _formulaExtendedProperty.ExtendedProperty.LanguageOption.Name, _formulaExtendedProperty.Value, _permissionType);
                    }
                }
                //Retorna el DataTable
                return _dt;
            }
            /// <summary>
            /// Construye el DataTable a modo Property con los datos del Formula Extended Property.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable FormulaExtendedProperty(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable("FormulaExtendedProperty");

                //Contruye las columnas y sus atributos.
                BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
                BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
                BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

                Int64 _idFormula = Convert.ToInt64(param["IdFormula"]);
                Int64 _idFormulaExtendedProperty = Convert.ToInt64(param["IdExtendedProperty"]);

                ExtendedPropertyValue _formulaExtendedProperty = EMSLibrary.User.PerformanceAssessments.Configuration.Formula(_idFormula).ExtendedPropertyValue(_idFormulaExtendedProperty);

                _dt.ExtendedProperties.Add("PageTitle", Common.Functions.ReplaceIndexesTags(_formulaExtendedProperty.ExtendedProperty.LanguageOption.Name));

                Int16 i = 0;//Se genera este contador, para evitar claves duplicadas, es porque no todos los registros tienen link.            
                Dictionary<String, Object> _valueLink = new Dictionary<String, Object>();
                _valueLink.Add("IdExtendedPropertyClassification", _formulaExtendedProperty.ExtendedProperty.ExtendedPropertyClassification.IdExtendedPropertyClassification);

                //Carga los datos
                _dt.Rows.Add(Resources.CommonListManage.ExtendedPropertyClassification, _formulaExtendedProperty.ExtendedProperty.ExtendedPropertyClassification.LanguageOption.Name,
                    GetValueLink(Common.ConstantsEntitiesName.PF.ExtendedPropertyClassification, _valueLink));
                _dt.Rows.Add(Resources.CommonListManage.Name, _formulaExtendedProperty.ExtendedProperty.LanguageOption.Name, "#" + i++);
                _dt.Rows.Add(Resources.CommonListManage.Value, _formulaExtendedProperty.Value, "#" + i++);

                //Retorna el DataTable.
                return _dt;
            }
            /// <summary>
            /// Construye el List de Propiedades Extendidas para las Formulas
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public ExtendedPropertyValue FormulaExtendedPropertyValues(Dictionary<String, Object> param)
            {
                Int64 _idFormula = Convert.ToInt64(param["IdFormula"]);
            Int64 _idExtendedProperty = Convert.ToInt64(param["IdExtendedProperty"]);

                return EMSLibrary.User.PerformanceAssessments.Configuration.Formula(_idFormula).ExtendedPropertyValue(_idExtendedProperty);
            }

        #endregion

        #region Calculation Extended Properties
            /// <summary>
            /// Construye el DataTable a modo List con los datos de la Coleccion Calculation Extended Properties.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable CalculationExtendedProperties(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable("CalculationExtendedProperty");

                //Contruye las columnas y sus atributos.
                ColumnOptions _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdExtendedProperty;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdExtendedProperty", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdCalculation;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdCalculation", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdExtendedPropertyClassification;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdExtendedPropertyClassification", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Classification;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = true;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = true;
                _columnOptions.IsSortedBy = true;
                BuildColumnsDataTable(ref _dt, "Classification", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.ExtendedProperty;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = true;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = true;
                _columnOptions.IsContextMenuCaption = true;
                _columnOptions.IsSortedBy = true;
                BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Value;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = true;
                BuildColumnsDataTable(ref _dt, "Value", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

                //Cuando implementemos la opcion de traer todo en un filtro.
                if (param.ContainsKey("IdCalculation"))
                {
                    Int64 _idCalculation = Convert.ToInt64(param["IdCalculation"]);
                    Calculation _calculation = (Calculation)EMSLibrary.User.PerformanceAssessments.Configuration.Calculation(_idCalculation);
                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (EMSLibrary.User.PerformanceAssessments.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    //Ya esta armado el DataTable, ahora lo carga
                    foreach (ExtendedPropertyValue _calculationExtendedProperty in _calculation.ExtendedPropertyValues)
                    {
                        _dt.Rows.Add(_calculationExtendedProperty.ExtendedProperty.IdExtendedProperty, _idCalculation,
                            _calculationExtendedProperty.ExtendedProperty.ExtendedPropertyClassification.IdExtendedPropertyClassification,
                            _calculationExtendedProperty.ExtendedProperty.ExtendedPropertyClassification.LanguageOption.Name,
                            _calculationExtendedProperty.ExtendedProperty.LanguageOption.Name, _calculationExtendedProperty.Value, _permissionType);
                    }
                }
                //Retorna el DataTable
                return _dt;
            }
            /// <summary>
            /// Construye el DataTable a modo Property con los datos del Calculation Extended Property.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable CalculationExtendedProperty(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable("CalculationExtendedProperty");

                //Contruye las columnas y sus atributos.
                BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
                BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
                BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

                Int64 _idCalculation = Convert.ToInt64(param["IdCalculation"]);
                Int64 _idCalculationExtendedProperty = Convert.ToInt64(param["IdExtendedProperty"]);

                ExtendedPropertyValue _calculationExtendedProperty = EMSLibrary.User.PerformanceAssessments.Configuration.Calculation(_idCalculation).ExtendedPropertyValue(_idCalculationExtendedProperty);

                _dt.ExtendedProperties.Add("PageTitle", Common.Functions.ReplaceIndexesTags(_calculationExtendedProperty.ExtendedProperty.LanguageOption.Name));

                Int16 i = 0;//Se genera este contador, para evitar claves duplicadas, es porque no todos los registros tienen link.            
                Dictionary<String, Object> _valueLink = new Dictionary<String, Object>();
                _valueLink.Add("IdExtendedPropertyClassification", _calculationExtendedProperty.ExtendedProperty.ExtendedPropertyClassification.IdExtendedPropertyClassification);

                //Carga los datos
                _dt.Rows.Add(Resources.CommonListManage.ExtendedPropertyClassification, _calculationExtendedProperty.ExtendedProperty.ExtendedPropertyClassification.LanguageOption.Name,
                    GetValueLink(Common.ConstantsEntitiesName.PF.ExtendedPropertyClassification, _valueLink));
                _dt.Rows.Add(Resources.CommonListManage.Name, _calculationExtendedProperty.ExtendedProperty.LanguageOption.Name, "#" + i++);
                _dt.Rows.Add(Resources.CommonListManage.Value, _calculationExtendedProperty.Value, "#" + i++);

                //Retorna el DataTable.
                return _dt;
            }
            /// <summary>
            /// Construye el List de Propiedades Extendidas para los Calculos
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public ExtendedPropertyValue CalculationExtendedPropertyValues(Dictionary<String, Object> param)
            {
                Int64 _idCalculation = Convert.ToInt64(param["IdCalculation"]);
            Int64 _idExtendedProperty = Convert.ToInt64(param["IdExtendedProperty"]);

                return EMSLibrary.User.PerformanceAssessments.Configuration.Calculation(_idCalculation).ExtendedPropertyValue(_idExtendedProperty);
            }

        #endregion

        #region Parameter Group Extended Properties
            /// <summary>
            /// Construye el DataTable a modo List con los datos de la Coleccion ParameterGroup Extended Properties.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable ParameterGroupExtendedProperties(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable("ParameterGroupExtendedProperty");

                //Contruye las columnas y sus atributos.
                ColumnOptions _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdExtendedProperty;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdExtendedProperty", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdIndicator;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdIndicator", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdParameterGroup;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdParameterGroup", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdExtendedPropertyClassification;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdExtendedPropertyClassification", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Classification;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = true;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = true;
                _columnOptions.IsSortedBy = true;
                BuildColumnsDataTable(ref _dt, "Classification", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.ExtendedProperty;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = true;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = true;
                _columnOptions.IsContextMenuCaption = true;
                _columnOptions.IsSortedBy = true;
                BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Value;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = true;
                BuildColumnsDataTable(ref _dt, "Value", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

                //Cuando implementemos la opcion de traer todo en un filtro.
                if ((param.ContainsKey("IdIndicator")) && (param.ContainsKey("IdParameterGroup")))
                {
                    Int64 _idIndicator = Convert.ToInt64(param["IdIndicator"]);
                    Int64 _idParameterGroup = Convert.ToInt64(param["IdParameterGroup"]);
                    ParameterGroup _parameterGroup = (ParameterGroup)EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator).ParameterGroup(_idParameterGroup); ;
                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (EMSLibrary.User.PerformanceAssessments.Map.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    //Ya esta armado el DataTable, ahora lo carga
                    foreach (ExtendedPropertyValue _parameterGroupExtendedProperty in _parameterGroup.ExtendedPropertyValues)
                    {
                            _dt.Rows.Add(_parameterGroupExtendedProperty.ExtendedProperty.IdExtendedProperty, _idIndicator, _idParameterGroup,
                            _parameterGroupExtendedProperty.ExtendedProperty.ExtendedPropertyClassification.IdExtendedPropertyClassification,
                            _parameterGroupExtendedProperty.ExtendedProperty.ExtendedPropertyClassification.LanguageOption.Name,
                            _parameterGroupExtendedProperty.ExtendedProperty.LanguageOption.Name, _parameterGroupExtendedProperty.Value, _permissionType);
                    }
                }
                //Retorna el DataTable
                return _dt;
            }
            /// <summary>
            /// Construye el DataTable a modo Property con los datos del ParameterGroup Extended Property.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable ParameterGroupExtendedProperty(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable("ParameterGroupExtendedProperty");

                //Contruye las columnas y sus atributos.
                BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
                BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
                BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

                Int64 _idIndicator = Convert.ToInt64(param["IdIndicator"]);
                Int64 _idParameterGroup = Convert.ToInt64(param["IdParameterGroup"]);
                Int64 _idIndicatorExtendedProperty = Convert.ToInt64(param["IdExtendedProperty"]);

                ExtendedPropertyValue _parameterGroupExtendedProperty = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator).ParameterGroup(_idParameterGroup).ExtendedPropertyValue(_idIndicatorExtendedProperty);

                _dt.ExtendedProperties.Add("PageTitle", Common.Functions.ReplaceIndexesTags(_parameterGroupExtendedProperty.ExtendedProperty.LanguageOption.Name));

                Int16 i = 0;//Se genera este contador, para evitar claves duplicadas, es porque no todos los registros tienen link.            
                Dictionary<String, Object> _valueLink = new Dictionary<String, Object>();
                _valueLink.Add("IdExtendedPropertyClassification", _parameterGroupExtendedProperty.ExtendedProperty.ExtendedPropertyClassification.IdExtendedPropertyClassification);

                //Carga los datos
                _dt.Rows.Add(Resources.CommonListManage.ExtendedPropertyClassification, _parameterGroupExtendedProperty.ExtendedProperty.ExtendedPropertyClassification.LanguageOption.Name,
                    GetValueLink(Common.ConstantsEntitiesName.PF.ExtendedPropertyClassification, _valueLink));
                _dt.Rows.Add(Resources.CommonListManage.Name, _parameterGroupExtendedProperty.ExtendedProperty.LanguageOption.Name, "#" + i++);
                _dt.Rows.Add(Resources.CommonListManage.Value, _parameterGroupExtendedProperty.Value, "#" + i++);

                //Retorna el DataTable.
                return _dt;
            }
            /// <summary>
            /// Construye el List de Propiedades Extendidas para los Parameter Group
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public ExtendedPropertyValue ParameterGroupExtendedPropertyValues(Dictionary<String, Object> param)
            {
                Int64 _idIndicator = Convert.ToInt64(param["IdIndicator"]);
                Int64 _idParameterGroup = Convert.ToInt64(param["IdParameterGroup"]);
            Int64 _idExtendedProperty = Convert.ToInt64(param["IdExtendedProperty"]);

                return EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator).ParameterGroup(_idParameterGroup).ExtendedPropertyValue(_idExtendedProperty);
            }

        #endregion

        #endregion

        #region Process Framework

        #region Extended Properties
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion ExtendedProperties.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ExtendedProperties(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ExtendedProperty");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdExtendedProperty;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdExtendedProperty", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdExtendedPropertyClassification;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdExtendedPropertyClassification", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.ExtendedProperty;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Description;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "Description", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                if (param.ContainsKey("IdExtendedPropertyClassification"))
                {
                    //Obtiene el Applicability
                    Int64 _idExtendedPropertyClassification = Convert.ToInt64(param["IdExtendedPropertyClassification"]);
                    //Contruye la ExtendedPropertyClassification y si no es null...busca las processextendedproperty.
                    ExtendedPropertyClassification _extendedPropertyClassification = EMSLibrary.User.ExtendedProperties.ExtendedPropertyClassification(_idExtendedPropertyClassification);
                    if (_extendedPropertyClassification != null)
                    {
                        String _permissionType = String.Empty;
                        //Obtiene el permiso que tiene el usuario para esa organizacion.
                        if (EMSLibrary.User.ProcessFramework.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                        { _permissionType = Common.Constants.PermissionManageName; }
                        else
                        { _permissionType = Common.Constants.PermissionViewName; }

                        //Ya esta armado el DataTable, ahora lo carga
                        foreach (ExtendedProperty _extendedProperty in _extendedPropertyClassification.ExtendedProperties.Values)
                        {
                            _dt.Rows.Add(_extendedProperty.IdExtendedProperty, _idExtendedPropertyClassification, Common.Functions.ReplaceIndexesTags(_extendedProperty.LanguageOption.Name), _extendedProperty.LanguageOption.Description, _permissionType);
                        }
                    }
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del ExtendedProperty.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ExtendedProperty(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ExtendedProperty");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

            Int64 _idExtendedProperty = Convert.ToInt64(param["IdExtendedProperty"]);
            Int64 _idExtendedPropertyClassification = Convert.ToInt64(param["IdExtendedPropertyClassification"]);

            ExtendedProperty _extendedProperty = EMSLibrary.User.ExtendedProperties.ExtendedPropertyClassification(_idExtendedPropertyClassification).ExtendedProperty(_idExtendedProperty);

            //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
            _dt.ExtendedProperties.Add("PageTitle", Common.Functions.ReplaceIndexesTags(_extendedProperty.LanguageOption.Name));

            //Carga los datos
            //_dt.Rows.Add(Resources.CommonListManage.IdExtendedProperty, _extendedProperty.IdExtendedProperty);
            _dt.Rows.Add(Resources.CommonListManage.Classification, _extendedProperty.ExtendedPropertyClassification.LanguageOption.Name);
            _dt.Rows.Add(Resources.CommonListManage.Name, _extendedProperty.LanguageOption.Name);
            _dt.Rows.Add(Resources.CommonListManage.LanguageName, _extendedProperty.LanguageOption.Language.Name);
            _dt.Rows.Add(Resources.CommonListManage.Description, _extendedProperty.LanguageOption.Description);

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        #region Extended Property Classifications
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion Extended Property Classifications.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ExtendedPropertyClassifications(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ExtendedPropertyClassification");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdExtendedProperty;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdExtendedPropertyClassification", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.ExtendedPropertyClassification;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Description;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "Description", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                String _permissionType = String.Empty;
                //Obtiene el permiso que tiene el usuario para esa organizacion.
                if (EMSLibrary.User.ProcessFramework.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                { _permissionType = Common.Constants.PermissionManageName; }
                else
                { _permissionType = Common.Constants.PermissionViewName; }

                //Ya esta armado el DataTable, ahora lo carga
                foreach (ExtendedPropertyClassification _extendedPropertyClassification in EMSLibrary.User.ExtendedProperties.ExtendedPropertyClassifications().Values)
                {
                    _dt.Rows.Add(_extendedPropertyClassification.IdExtendedPropertyClassification, Common.Functions.ReplaceIndexesTags(_extendedPropertyClassification.LanguageOption.Name), _extendedPropertyClassification.LanguageOption.Description, _permissionType);
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del ExtendedPropertyClassification.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ExtendedPropertyClassification(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ExtendedPropertyClassification");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

            Int64 _idExtendedPropertyClassification = Convert.ToInt64(param["IdExtendedPropertyClassification"]);

            ExtendedPropertyClassification _extendedPropertyClassification = EMSLibrary.User.ExtendedProperties.ExtendedPropertyClassification(_idExtendedPropertyClassification);

            _dt.ExtendedProperties.Add("PageTitle", Common.Functions.ReplaceIndexesTags(_extendedPropertyClassification.LanguageOption.Name));

            //Carga los datos
            //_dt.Rows.Add(Resources.CommonListManage.IdExtendedPropertyClassification, _extendedPropertyClassification.IdExtendedPropertyClassification);
            _dt.Rows.Add(Resources.CommonListManage.Name, _extendedPropertyClassification.LanguageOption.Name);
            _dt.Rows.Add(Resources.CommonListManage.LanguageName, _extendedPropertyClassification.LanguageOption.Language.Name);
            _dt.Rows.Add(Resources.CommonListManage.Description, _extendedPropertyClassification.LanguageOption.Description);

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        #region Participation Types
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion ParticipationTypes.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ParticipationTypes(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ParticipationType");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdParticipationType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdParticipationType", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.ParticipationType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                String _permissionType = String.Empty;
                //Obtiene el permiso que tiene el usuario para esa organizacion.
                if (EMSLibrary.User.ProcessFramework.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                { _permissionType = Common.Constants.PermissionManageName; }
                else
                { _permissionType = Common.Constants.PermissionViewName; }

                //Ya esta armado el DataTable, ahora lo carga
                foreach (ParticipationType _participationType in EMSLibrary.User.ProcessFramework.Configuration.ParticipationTypes().Values)
                {
                    _dt.Rows.Add(_participationType.IdParticipationType, Common.Functions.ReplaceIndexesTags(_participationType.LanguageOption.Name), _permissionType);
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del ParticipationType.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ParticipationType(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ParticipationType");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

            Int64 _idParticipationType = Convert.ToInt64(param["IdParticipationType"]);

            ParticipationType _participationType = EMSLibrary.User.ProcessFramework.Configuration.ParticipationType(_idParticipationType);

            _dt.ExtendedProperties.Add("PageTitle", Common.Functions.ReplaceIndexesTags(_participationType.LanguageOption.Name));

            //Carga los datos
            //_dt.Rows.Add(Resources.CommonListManage.IdParticipationType, _participationType.IdParticipationType);
            _dt.Rows.Add(Resources.CommonListManage.Name, _participationType.LanguageOption.Name);
            _dt.Rows.Add(Resources.CommonListManage.LanguageName, _participationType.LanguageOption.Language.Name);

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        #region Process Group Processes
            /// <summary>
            /// Construye el DataTable a modo List con los datos de la Coleccion Only Process Group Process.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable ProcessGroupProcessesWithoutClassification(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable(Common.ConstantsEntitiesName.PF.ProcessGroupProcessesWithoutClassification);

                //Contruye las columnas y sus atributos.
                ColumnOptions _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdProcess;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdProcess", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Process;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = true;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = true;
                _columnOptions.IsSortedBy = true;
                BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Description;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = true;
                BuildColumnsDataTable(ref _dt, "Description", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

                //Cuando implementemos la opcion de traer todo en un filtro.
                Boolean _showAll = false;
                if (ValidateSelectedItemComboBox(param, ref _showAll))
                {
                    //Obtiene el Applicability
                    String _permissionType = String.Empty;

                    //Ya esta armado el DataTable, ahora lo carga
                    foreach (ProcessGroupProcess _processGroupProject in EMSLibrary.User.ProcessFramework.Map.ProcessGroupProcesses().Values)
                    {
                        //Obtiene el permiso que tiene el usuario para esa organizacion.
                        if (_processGroupProject.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                        { _permissionType = Common.Constants.PermissionManageName; }
                        else
                        { _permissionType = Common.Constants.PermissionViewName; }

                        _dt.Rows.Add(_processGroupProject.IdProcess, Common.Functions.ReplaceIndexesTags(_processGroupProject.LanguageOption.Title), Common.Functions.ReplaceIndexesTags(_processGroupProject.LanguageOption.Description), _permissionType);
                    }

                }
                //Retorna el DataTable
                return _dt;
            }

            /// <summary>
            /// Construye el DataTable a modo List con los datos de la Coleccion ProcessGroupProjects.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable ProcessGroupProcesses(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable(Common.ConstantsEntitiesName.PF.ProcessGroupProcess);

                //Contruye las columnas y sus atributos.
                ColumnOptions _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdProcess;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdProcess", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdProcessClassification;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdProcessClassification", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Process;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = true;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = true;
                _columnOptions.IsSortedBy = true;
                BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Description;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = true;
                BuildColumnsDataTable(ref _dt, "Description", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

                //Cuando implementemos la opcion de traer todo en un filtro.
                Boolean _showAll = false;
                if (ValidateSelectedItemComboBox(param, ref _showAll))
                {
                    if (param.ContainsKey("IdProcessClassification"))
                    {
                        //Obtiene el Applicability
                        Int64 _idProcessClassification = Convert.ToInt64(param["IdProcessClassification"]);
                        String _permissionType = String.Empty;

                        //Ya esta armado el DataTable, ahora lo carga
                        foreach (ProcessGroupProcess _processGroupProject in EMSLibrary.User.ProcessFramework.Map.ProcessClassification(_idProcessClassification).ChildrenElements.Values)
                        {
                            //Obtiene el permiso que tiene el usuario para esa organizacion.
                            if (_processGroupProject.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                            { _permissionType = Common.Constants.PermissionManageName; }
                            else
                            { _permissionType = Common.Constants.PermissionViewName; }

                            _dt.Rows.Add(_processGroupProject.IdProcess, _idProcessClassification, Common.Functions.ReplaceIndexesTags(_processGroupProject.LanguageOption.Title), Common.Functions.ReplaceIndexesTags(_processGroupProject.LanguageOption.Description), _permissionType);
                        }
                    }
                }
                //Retorna el DataTable
                return _dt;
            }
            /// <summary>
            /// Construye el DataTable a modo Property con los datos del ProcessGroupProject.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable ProcessGroupProcess(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable(Common.ConstantsEntitiesName.PF.ProcessGroupProcess);

                //Contruye las columnas y sus atributos.
                BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
                BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

                Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);

                ProcessGroupProcess _processGroupProject = (ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess);

                _dt.ExtendedProperties.Add("PageTitle", Common.Functions.ReplaceIndexesTags(_processGroupProject.LanguageOption.Title));

                //Carga los datos
                //_dt.Rows.Add(Resources.CommonListManage.IdProcess, _processGroupProject.IdProcess);
                _dt.Rows.Add(Resources.CommonListManage.Name, _processGroupProject.LanguageOption.Title);
                _dt.Rows.Add(Resources.CommonListManage.LanguageName, _processGroupProject.LanguageOption.Language.Name);
                _dt.Rows.Add(Resources.CommonListManage.Description, _processGroupProject.LanguageOption.Description);
                _dt.Rows.Add(Resources.CommonListManage.Purpose, _processGroupProject.LanguageOption.Purpose);
                _dt.Rows.Add(Resources.CommonListManage.OrderNumber, _processGroupProject.OrderNumber);
                _dt.Rows.Add(Resources.CommonListManage.Weight, _processGroupProject.Weight);
                _dt.Rows.Add(Resources.CommonListManage.Threshold, _processGroupProject.Threshold);
                _dt.Rows.Add(Resources.CommonListManage.Identification, _processGroupProject.Identification);
                _dt.Rows.Add(Resources.CommonListManage.CurrentCampaignStartDate, _processGroupProject.CurrentCampaignStartDate);

                //Retorna el DataTable.
                return _dt;
            }
            /// <summary>
            /// Construye el Dictionary de catalogos para el ProcessGroup
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public Dictionary<Int64, Condesus.EMS.Business.KC.Entities.CatalogDoc> ProcessGroupProcessPictures(Dictionary<String, Object> param)
            {
                Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);

                return ((ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess)).Pictures;
            }
        #endregion

        #region Processes Participations
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion ProjectParticipations.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ProcessParticipations(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ProcessParticipation");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdProcess;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdProcess", _columnOptions);

            _columnOptions.ColumnCaption = Resources.CommonListManage.IdProcessClassification;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdProcessClassification", _columnOptions);

            _columnOptions.ColumnCaption = Resources.CommonListManage.IdParticipationType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdParticipationType", _columnOptions);

            _columnOptions.ColumnCaption = Resources.CommonListManage.CorporateName;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "CorporateName", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.ParticipationType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "ParticipationType", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Comment;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "Comment", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.ProcessParticipation;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "ProcessParticipation", _columnOptions);

            _columnOptions.ColumnCaption = Resources.CommonListManage.IdOrganization;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdOrganization", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                Int64 _idProcessClassification;

                if (param.ContainsKey("IdOrganization"))
                {
                    Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
                    Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (_organization.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    //Ya esta armado el DataTable, ahora lo carga
                    foreach (ProcessParticipation _projectParticipation in _organization.ProcessParticipations())
                    {
                        if (_projectParticipation.ProcessGroupProcess.Classifications.Count > 0)
                        {
                            _idProcessClassification = _projectParticipation.ProcessGroupProcess.Classifications.First().Value.IdProcessClassification;
                        }
                        else { _idProcessClassification = 0; }
                        _dt.Rows.Add(_projectParticipation.IdProcess, _idProcessClassification, _projectParticipation.ParticipationType.IdParticipationType,
                                _projectParticipation.Organization.CorporateName, _projectParticipation.ParticipationType.LanguageOption.Name,
                                _projectParticipation.Comment, Common.ConstantsEntitiesName.PF.ProcessParticipation, _idOrganization, _permissionType);
                    }
                }
                else
                {
                    if (param.ContainsKey("IdProcess"))
                    {
                        Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
                        ProcessGroupProcess _processGroupProcess = EMSLibrary.User.ProcessFramework.Map.ProcessGroupProcess(_idProcess);
                        String _permissionType = String.Empty;
                        //Obtiene el permiso que tiene el usuario para esa organizacion.
                        if (_processGroupProcess.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                        { _permissionType = Common.Constants.PermissionManageName; }
                        else
                        { _permissionType = Common.Constants.PermissionViewName; }

                        //Ya esta armado el DataTable, ahora lo carga
                        foreach (ProcessParticipation _processParticipation in _processGroupProcess.ProcessParticipations)
                        {
                            if (_processParticipation.ProcessGroupProcess.Classifications.Count > 0)
                            {
                                _idProcessClassification = _processParticipation.ProcessGroupProcess.Classifications.First().Value.IdProcessClassification;
                            }
                            else { _idProcessClassification = 0; }
                                _dt.Rows.Add(_processParticipation.IdProcess, _idProcessClassification, _processParticipation.ParticipationType.IdParticipationType,
                                    _processParticipation.Organization.CorporateName, _processParticipation.ParticipationType.LanguageOption.Name,
                                    _processParticipation.Comment, Common.ConstantsEntitiesName.PF.ProcessParticipation, _processParticipation.Organization.IdOrganization, _permissionType);
                            }
                    }
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del ProcessParticipation.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ProcessParticipation(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ProcessParticipation");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
            Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
            Int64 _idParticipationType = Convert.ToInt64(param["IdParticipationType"]);

            ProcessParticipation _processParticipation = ((ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess)).ProcessParticipation(_idOrganization, _idParticipationType);

            //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
            _dt.ExtendedProperties.Add("PageTitle",Common.Functions.ReplaceIndexesTags( _processParticipation.ProcessGroupProcess.LanguageOption.Title));

            Int16 i = 0;//Se genera este contador, para evitar claves duplicadas, es porque no todos los registros tienen link.
            Dictionary<String, Object> _valueLink = new Dictionary<String, Object>();
            _valueLink.Add("IdOrganization", _processParticipation.Organization.IdOrganization);
            _valueLink.Add("IdProcess", _processParticipation.IdProcess);
            _valueLink.Add("IdParticipationType", _processParticipation.ParticipationType.IdParticipationType);

            //Carga los datos
            //_dt.Rows.Add(Resources.CommonListManage.IdOrganization, _processParticipation.Organization.IdOrganization, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.Organization, _processParticipation.Organization.CorporateName,
                GetValueLink(Common.ConstantsEntitiesName.DS.Organization, _valueLink));
            //_dt.Rows.Add(Resources.CommonListManage.IdProcess, _processParticipation.IdProcess, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.ProcessGroupProcess, _processParticipation.ProcessGroupProcess.LanguageOption.Title,
                GetValueLink(Common.ConstantsEntitiesName.PF.ProcessGroupProcess, _valueLink));
            //_dt.Rows.Add(Resources.CommonListManage.IdParticipationType, _processParticipation.ParticipationType.IdParticipationType, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.ParticipationType, _processParticipation.ParticipationType.LanguageOption.Name,
                GetValueLink(Common.ConstantsEntitiesName.PF.ParticipationType, _valueLink));

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        //#region Role Types
        ///// <summary>
        ///// Construye el DataTable a modo List con los datos de la Coleccion RoleTypes.
        ///// </summary>
        ///// <param name="param">Parametros opcionales para filtrar</param>
        ///// <returns>Un <c>DataTable</c></returns>
        //public DataTable RoleTypes(Dictionary<String, Object> param)
        //{
        //    //Construye el datatable
        //    DataTable _dt = BuildDataTable("RoleType");

        //    //Contruye las columnas y sus atributos.
        //    ColumnOptions _columnOptions = new ColumnOptions();
        //    _columnOptions.ColumnCaption = Resources.CommonListManage.IdRoleType;
        //    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
        //    _columnOptions.IsPrimaryKey = true;
        //    _columnOptions.DisplayInCombo = false;
        //    _columnOptions.DisplayInManage = false;
        //    _columnOptions.IsSearchable = false;
        //    _columnOptions.AllowNull = false;
        //    BuildColumnsDataTable(ref _dt, "IdRoleType", _columnOptions);

        //    _columnOptions = new ColumnOptions();
        //    _columnOptions.ColumnCaption = Resources.CommonListManage.RoleType;
        //    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
        //    _columnOptions.IsPrimaryKey = false;
        //    _columnOptions.DisplayInCombo = true;
        //    _columnOptions.DisplayInManage = true;
        //    _columnOptions.IsSearchable = true;
        //    _columnOptions.AllowNull = false;
        //    _columnOptions.IsContextMenuCaption = true;
        //    _columnOptions.IsSortedBy = true;
        //    BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

        //    _columnOptions = new ColumnOptions();
        //    _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
        //    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
        //    _columnOptions.IsPrimaryKey = false;
        //    _columnOptions.DisplayInCombo = false;
        //    _columnOptions.DisplayInManage = false;
        //    _columnOptions.IsSearchable = false;
        //    _columnOptions.AllowNull = false;
        //    BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

        //    //Cuando implementemos la opcion de traer todo en un filtro.
        //    Boolean _showAll = false;
        //    if (ValidateSelectedItemComboBox(param, ref _showAll))
        //    {
        //        String _permissionType = String.Empty;
        //        //Obtiene el permiso que tiene el usuario para esa organizacion.
        //        if (EMSLibrary.User.DirectoryServices.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
        //        { _permissionType = Common.Constants.PermissionManageName; }
        //        else
        //        { _permissionType = Common.Constants.PermissionViewName; }

        //        //Ya esta armado el DataTable, ahora lo carga
        //        foreach (Condesus.EMS.Business.Security.Entities.RoleType _roleType in EMSLibrary.User.Security.RoleTypes().Values)
        //        {
        //            _dt.Rows.Add(_roleType.IdRoleType, Common.Functions.ReplaceIndexesTags(_roleType.LanguageOption.Name), _permissionType);
        //        }
        //    }
        //    //Retorna el DataTable
        //    return _dt;
        //}
        ///// <summary>
        ///// Construye el DataTable a modo Property con los datos del RoleType.
        ///// </summary>
        ///// <param name="param">Parametros opcionales para filtrar</param>
        ///// <returns>Un <c>DataTable</c></returns>
        //public DataTable RoleType(Dictionary<String, Object> param)
        //{
        //    //Construye el datatable
        //    DataTable _dt = BuildDataTable("RoleType");

        //    //Contruye las columnas y sus atributos.
        //    BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
        //    BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

        //    Int64 _idRoleType = Convert.ToInt64(param["IdRoleType"]);

        //    Condesus.EMS.Business.Security.Entities.RoleType _roleType = EMSLibrary.User.Security.RoleType(_idRoleType);

        //    _dt.ExtendedProperties.Add("PageTitle", _roleType.LanguageOption.Name);

        //    //Carga los datos
        //    //_dt.Rows.Add(Resources.CommonListManage.IdRoleType, _roleType.IdRoleType);
        //    _dt.Rows.Add(Resources.CommonListManage.Name, _roleType.LanguageOption.Name);
        //    _dt.Rows.Add(Resources.CommonListManage.LanguageName, _roleType.LanguageOption.Language.Name);

        //    //Retorna el DataTable.
        //    return _dt;
        //}
        //#endregion

        #region Time Units
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion TimeUnits.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable TimeUnits(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("TimeUnit");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdTimeUnit;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdTimeUnit", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.TimeUnit;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Numerator;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Numerator", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Exponent;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Exponent", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Denominator;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Denominator", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IsPattern;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Boolean");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IsPattern", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                String _permissionType = String.Empty;
                //Obtiene el permiso que tiene el usuario para esa organizacion.
                if (EMSLibrary.User.ProcessFramework.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                { _permissionType = Common.Constants.PermissionManageName; }
                else
                { _permissionType = Common.Constants.PermissionViewName; }

                //Ya esta armado el DataTable, ahora lo carga
                foreach (TimeUnit _timeUnit in EMSLibrary.User.ProcessFramework.Configuration.TimeUnits().Values)
                {
                    _dt.Rows.Add(_timeUnit.IdTimeUnit, Common.Functions.ReplaceIndexesTags(_timeUnit.LanguageOption.Name), _timeUnit.Numerator, _timeUnit.Exponent, _timeUnit.Denominator, _timeUnit.IsPattern, _permissionType);
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del TimeUnit.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable TimeUnit(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("TimeUnit");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

            Int64 _idTimeUnit = Convert.ToInt64(param["IdTimeUnit"]);

            TimeUnit _timeUnit = EMSLibrary.User.ProcessFramework.Configuration.TimeUnit(_idTimeUnit);

            _dt.ExtendedProperties.Add("PageTitle", _timeUnit.LanguageOption.Name);

            //Carga los datos
            //_dt.Rows.Add(Resources.CommonListManage.IdTimeUnit, _timeUnit.IdTimeUnit);
            _dt.Rows.Add(Resources.CommonListManage.Name, _timeUnit.LanguageOption.Name);
            _dt.Rows.Add(Resources.CommonListManage.LanguageName, _timeUnit.LanguageOption.Language.Name);
            _dt.Rows.Add(Resources.CommonListManage.Numerator, _timeUnit.Numerator);
            _dt.Rows.Add(Resources.CommonListManage.Exponent, _timeUnit.Exponent);
            _dt.Rows.Add(Resources.CommonListManage.Denominator, _timeUnit.Denominator);
            _dt.Rows.Add(Resources.CommonListManage.IsPattern, _timeUnit.IsPattern);

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        #region Process Resources
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion ProcessResources.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ProcessResources(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ProcessResource");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdResource;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdResource", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdProcess;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdProcess", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdResourceType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdResourceType", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdResourceFile;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdResourceFile", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Type;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "Type", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.ResourceType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "ResourceType", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Name;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Resource;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Resource", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Version;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "Version", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Comment;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "Comment", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                if (param.ContainsKey("IdProcess"))
                {
                    Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
                    ProcessGroupProcess _processGroupProcess = EMSLibrary.User.ProcessFramework.Map.ProcessGroupProcess(_idProcess);
                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (_processGroupProcess.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    //Ya esta armado el DataTable, ahora lo carga
                    foreach (ProcessResource _processResource in _processGroupProcess.ProcessResources)
                    {
                        if (_processResource.Resource.GetType().Name == "ResourceVersion")
                        {
                            Condesus.EMS.Business.KC.Entities.ResourceVersion _resource = (Condesus.EMS.Business.KC.Entities.ResourceVersion)_processResource.Resource;
                            String _name = Common.Functions.ReplaceIndexesTags(_resource.LanguageOption.Title);

                            String _fileUrl = String.Empty;
                            String _resourceType = String.Empty;

                            if (_resource.CurrentVersion != null)
                            {
                                //Solo deberia mostrar el file que corresponde al Activo.
                                if (_resource.CurrentVersion.GetType().Name == "VersionURL")
                                {
                                    _fileUrl = ((Condesus.EMS.Business.KC.Entities.VersionURL)_resource.CurrentVersion).Url;
                                    _resourceType = "URL";  // Resources.CommonListManage.URL + " - " + _processResource.Resource.ResourceType.LanguageOption.Name;
                                }
                                else
                                {
                                    _fileUrl = ((Condesus.EMS.Business.KC.Entities.VersionDoc)_resource.CurrentVersion).FileAttach.FileName;
                                    _resourceType = "DOC";   //Resources.CommonListManage.File + " - " + _processResource.Resource.ResourceType.LanguageOption.Name;
                                }

                                _dt.Rows.Add(_resource.IdResource, _processResource.Process.IdProcess, _resource.ResourceType.IdResourceType, _resource.CurrentVersion.IdResourceFile,
                                    _processResource.Resource.ResourceType.LanguageOption.Name,
                                    _resourceType, _fileUrl, _name, _resource.CurrentVersion.VersionNumber.ToString(), _processResource.Comment, _permissionType);
                            }
                            else
                            {
                                _dt.Rows.Add(_resource.IdResource, _processResource.Process.IdProcess, _resource.ResourceType.IdResourceType, 0,
                                    _processResource.Resource.ResourceType.LanguageOption.Name,
                                    String.Empty, String.Empty, _name, String.Empty, _processResource.Comment, _permissionType);
                            }
                        }
                        else
                        {
                            Condesus.EMS.Business.KC.Entities.ResourceCatalog _resourceCatalog = (Condesus.EMS.Business.KC.Entities.ResourceCatalog)_processResource.Resource;
                            String _name = Common.Functions.ReplaceIndexesTags(_resourceCatalog.LanguageOption.Title);

                            String _fileUrl = String.Empty;
                            String _resourceType = String.Empty;

                            //Solo deberia mostrar el file que corresponde al Activo.
                            Condesus.EMS.Business.KC.Entities.Catalog _catalog = (Condesus.EMS.Business.KC.Entities.Catalog)_resourceCatalog.Catalogues.First().Value;
                            if (_catalog.GetType().Name == "CatalogURL")
                            {
                                _name = ((Condesus.EMS.Business.KC.Entities.CatalogURL)_catalog).Url;
                                _resourceType = "URL";
                            }
                            else
                            {
                                _name = ((Condesus.EMS.Business.KC.Entities.CatalogDoc)_catalog).FileAttach.FileName;
                                _resourceType = "DOC";
                                String _docSize = ((Condesus.EMS.Business.KC.Entities.CatalogDoc)_catalog).DocSize;
                                String _docType = ((Condesus.EMS.Business.KC.Entities.CatalogDoc)_catalog).DocType;
                            }
                            
                            _dt.Rows.Add(_resourceCatalog.IdResource, _processResource.Process.IdProcess,
                                _resourceCatalog.ResourceType.IdResourceType, ((Condesus.EMS.Business.KC.Entities.CatalogDoc)_catalog).IdResourceFile,
                                _processResource.Resource.ResourceType.LanguageOption.Name,
                                _resourceType, _fileUrl, _name, String.Empty, 
                                _processResource.Comment, _permissionType);
                        }
                        //String _version = String.Empty;
                        //Int64 _idResourceFile = 0;
                        ////Si es de tipo File, entonces saco la version del current...sino queda vacio.
                        //if (_processResource.Resource.GetType().Name == "ResourceVersion")
                        //{
                        //    Condesus.EMS.Business.KC.Entities.ResourceVersion _resourceFile = (Condesus.EMS.Business.KC.Entities.ResourceVersion)_processResource.Resource;
                        //    if (_resourceFile.CurrentResourceFile != null)
                        //    {
                        //        _version = _resourceFile.CurrentResourceFile.Version.ToString();
                        //        _idResourceFile = _resourceFile.CurrentResourceFile.IdResourceFile;
                        //    }
                        //    _dt.Rows.Add(_processResource.Resource.IdResource, _idProcess, _idResourceFile, _processResource.Resource.LanguageOption.Title, _processResource.Resource.LanguageOption.Description, _version, _processResource.Resource.ResourceType.LanguageOption.Name, _processResource.Comment, _permissionType);
                        //}
                    }
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del Process Resource.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ProcessResource(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ProcessResource");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
            Int64 _idResource = Convert.ToInt64(param["IdResource"]);

            Process _process = EMSLibrary.User.ProcessFramework.Map.Process(_idProcess);
            ProcessResource _processResouce = _process.ProcessResource(_idResource);

            //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
            _dt.ExtendedProperties.Add("PageTitle", Common.Functions.ReplaceIndexesTags(_process.LanguageOption.Title));

            Int16 i = 0;//Se genera este contador, para evitar claves duplicadas, es porque no todos los registros tienen link.            
            Dictionary<String, Object> _valueLink = new Dictionary<String, Object>();
            _valueLink.Add("IdProcess", _process.IdProcess);
            _valueLink.Add("IdResource", _processResouce.Resource.IdResource);

            //Carga los datos
            //_dt.Rows.Add(Resources.CommonListManage.IdProcess, _idProcess);
            //_dt.Rows.Add(Resources.CommonListManage.IdResource, _idResource);
            _dt.Rows.Add(Resources.CommonListManage.Title, _process.LanguageOption.Title,
                GetValueLink(Common.ConstantsEntitiesName.PF.ProcessGroupProcess, _valueLink));
            _dt.Rows.Add(Resources.CommonListManage.Resource, _processResouce.Resource.LanguageOption.Title,
                GetValueLink(Common.ConstantsEntitiesName.KC.Resource, _valueLink));
            _dt.Rows.Add(Resources.CommonListManage.Comment, _processResouce.Comment, "#" + i++);

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        #region Process Extended Properties
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion Process Extended Properties.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ProcessExtendedProperties(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ProcessExtendedProperty");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdExtendedProperty;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdExtendedProperty", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdProcess;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdProcess", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdExtendedPropertyClassification;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdExtendedPropertyClassification", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Classification;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Classification", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.ExtendedProperty;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Value;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "Value", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            if (param.ContainsKey("IdProcess"))
            {
                Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
                ProcessGroupProcess _process = (ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess).Parent;
                String _permissionType = String.Empty;
                //Obtiene el permiso que tiene el usuario para esa organizacion.
                if (_process.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                { _permissionType = Common.Constants.PermissionManageName; }
                else
                { _permissionType = Common.Constants.PermissionViewName; }

                //Ya esta armado el DataTable, ahora lo carga
                //foreach (ProcessExtendedProperty _processExtendedProperty in EMSLibrary.User.ProcessFramework.Map.ProcessGroupProcess(_idProcess).ProcessExtendedProperties)
                foreach (ExtendedPropertyValue _processExtendedProperty in _process.ExtendedPropertyValues)
                {
                    _dt.Rows.Add(_processExtendedProperty.ExtendedProperty.IdExtendedProperty, _idProcess,
                        _processExtendedProperty.ExtendedProperty.ExtendedPropertyClassification.IdExtendedPropertyClassification,
                        _processExtendedProperty.ExtendedProperty.ExtendedPropertyClassification.LanguageOption.Name,
                        _processExtendedProperty.ExtendedProperty.LanguageOption.Name, _processExtendedProperty.Value, _permissionType);
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del Process Extended Property.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ProcessExtendedProperty(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ProcessExtendedProperty");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
            Int64 _idProcessExtendedProperty = Convert.ToInt64(param["IdExtendedProperty"]);

            //ProcessExtendedProperty _processExtendedProperty = EMSLibrary.User.ProcessFramework.Map.ProcessGroupProcess(_idProcess).ProcessExtendedProperty(_idProcessExtendedProperty);
            ExtendedPropertyValue _processExtendedProperty = EMSLibrary.User.ProcessFramework.Map.Process(_idProcess).ExtendedPropertyValue(_idProcessExtendedProperty);

            _dt.ExtendedProperties.Add("PageTitle", Common.Functions.ReplaceIndexesTags(_processExtendedProperty.ExtendedProperty.LanguageOption.Name));

            Int16 i = 0;//Se genera este contador, para evitar claves duplicadas, es porque no todos los registros tienen link.            
            Dictionary<String, Object> _valueLink = new Dictionary<String, Object>();
            _valueLink.Add("IdExtendedPropertyClassification", _processExtendedProperty.ExtendedProperty.ExtendedPropertyClassification.IdExtendedPropertyClassification);

            //Carga los datos
            //_dt.Rows.Add(Resources.CommonListManage.IdExtendedPropertyClassification, _processExtendedProperty.ExtendedProperty.ExtendedPropertyClassification.IdExtendedPropertyClassification);
            //_dt.Rows.Add(Resources.CommonListManage.IdExtendedProperty, _processExtendedProperty.ExtendedProperty.IdExtendedProperty, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.ExtendedPropertyClassification, _processExtendedProperty.ExtendedProperty.ExtendedPropertyClassification.LanguageOption.Name,
                GetValueLink(Common.ConstantsEntitiesName.PF.ExtendedPropertyClassification, _valueLink));
            _dt.Rows.Add(Resources.CommonListManage.Name, _processExtendedProperty.ExtendedProperty.LanguageOption.Name, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.Value, _processExtendedProperty.Value, "#" + i++);

            //Retorna el DataTable.
            return _dt;
        }
        /// <summary>
        /// Construye el List de Propiedades Extendidas para el ProcessGroup
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public ExtendedPropertyValue ProcessExtendedPropertyValues(Dictionary<String, Object> param)
        {
            Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
            Int64 _idExtendedProperty = Convert.ToInt64(param["IdExtendedProperty"]);

            return EMSLibrary.User.ProcessFramework.Map.Process(_idProcess).ExtendedPropertyValue(_idExtendedProperty);
        }
        #endregion

        #region Process Task Executions
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion ProcessTaskExecutionResources.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        //public DataTable ProcessTaskExecutionResources(Dictionary<String, Object> param)
        //{
        //    //Construye el datatable
        //    DataTable _dt = BuildDataTable("ProcessTaskExecutionResources");

        //    //Contruye las columnas y sus atributos.
        //    ColumnOptions _columnOptions = new ColumnOptions();
        //    _columnOptions.ColumnCaption = Resources.CommonListManage.IdResource;
        //    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
        //    _columnOptions.IsPrimaryKey = true;
        //    _columnOptions.DisplayInCombo = false;
        //    _columnOptions.DisplayInManage = false;
        //    _columnOptions.IsSearchable = false;
        //    _columnOptions.AllowNull = false;
        //    BuildColumnsDataTable(ref _dt, "IdResource", _columnOptions);

        //    _columnOptions = new ColumnOptions();
        //    _columnOptions.ColumnCaption = Resources.CommonListManage.IdProcess;
        //    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
        //    _columnOptions.IsPrimaryKey = true;
        //    _columnOptions.DisplayInCombo = false;
        //    _columnOptions.DisplayInManage = false;
        //    _columnOptions.IsSearchable = false;
        //    _columnOptions.AllowNull = false;
        //    BuildColumnsDataTable(ref _dt, "IdProcess", _columnOptions);

        //    _columnOptions = new ColumnOptions();
        //    _columnOptions.ColumnCaption = Resources.CommonListManage.IdExecution;
        //    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
        //    _columnOptions.IsPrimaryKey = true;
        //    _columnOptions.DisplayInCombo = false;
        //    _columnOptions.DisplayInManage = false;
        //    _columnOptions.IsSearchable = false;
        //    _columnOptions.AllowNull = false;
        //    BuildColumnsDataTable(ref _dt, "IdExecution", _columnOptions);

        //    _columnOptions = new ColumnOptions();
        //    _columnOptions.ColumnCaption = Resources.CommonListManage.IdResourceType;
        //    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
        //    _columnOptions.IsPrimaryKey = true;
        //    _columnOptions.DisplayInCombo = false;
        //    _columnOptions.DisplayInManage = false;
        //    _columnOptions.IsSearchable = false;
        //    _columnOptions.AllowNull = false;
        //    BuildColumnsDataTable(ref _dt, "IdResourceType", _columnOptions);

        //    _columnOptions = new ColumnOptions();
        //    _columnOptions.ColumnCaption = Resources.CommonListManage.IdResourceFile;
        //    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
        //    _columnOptions.IsPrimaryKey = true;
        //    _columnOptions.DisplayInCombo = false;
        //    _columnOptions.DisplayInManage = false;
        //    _columnOptions.IsSearchable = false;
        //    _columnOptions.AllowNull = false;
        //    BuildColumnsDataTable(ref _dt, "IdResourceFile", _columnOptions);

        //    _columnOptions = new ColumnOptions();
        //    _columnOptions.ColumnCaption = Resources.CommonListManage.Type;
        //    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
        //    _columnOptions.IsPrimaryKey = false;
        //    _columnOptions.DisplayInCombo = false;
        //    _columnOptions.DisplayInManage = true;
        //    _columnOptions.IsSearchable = true;
        //    _columnOptions.AllowNull = true;
        //    BuildColumnsDataTable(ref _dt, "Type", _columnOptions);

        //    _columnOptions = new ColumnOptions();
        //    _columnOptions.ColumnCaption = Resources.CommonListManage.ResourceType;
        //    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
        //    _columnOptions.IsPrimaryKey = false;
        //    _columnOptions.DisplayInCombo = false;
        //    _columnOptions.DisplayInManage = false;
        //    _columnOptions.IsSearchable = false;
        //    _columnOptions.AllowNull = true;
        //    BuildColumnsDataTable(ref _dt, "ResourceType", _columnOptions);

        //    _columnOptions = new ColumnOptions();
        //    _columnOptions.ColumnCaption = Resources.CommonListManage.Name;
        //    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
        //    _columnOptions.IsPrimaryKey = true;
        //    _columnOptions.DisplayInCombo = false;
        //    _columnOptions.DisplayInManage = true;
        //    _columnOptions.IsSearchable = false;
        //    _columnOptions.AllowNull = false;
        //    _columnOptions.IsContextMenuCaption = true;
        //    _columnOptions.IsSortedBy = true;
        //    BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

        //    _columnOptions = new ColumnOptions();
        //    _columnOptions.ColumnCaption = Resources.CommonListManage.Resource;
        //    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
        //    _columnOptions.IsPrimaryKey = false;
        //    _columnOptions.DisplayInCombo = true;
        //    _columnOptions.DisplayInManage = true;
        //    _columnOptions.IsSearchable = true;
        //    _columnOptions.AllowNull = false;
        //    BuildColumnsDataTable(ref _dt, "Resource", _columnOptions);

        //    _columnOptions = new ColumnOptions();
        //    _columnOptions.ColumnCaption = Resources.CommonListManage.Version;
        //    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
        //    _columnOptions.IsPrimaryKey = false;
        //    _columnOptions.DisplayInCombo = false;
        //    _columnOptions.DisplayInManage = true;
        //    _columnOptions.IsSearchable = false;
        //    _columnOptions.AllowNull = true;
        //    BuildColumnsDataTable(ref _dt, "Version", _columnOptions);

        //    _columnOptions = new ColumnOptions();
        //    _columnOptions.ColumnCaption = Resources.CommonListManage.Comment;
        //    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
        //    _columnOptions.IsPrimaryKey = false;
        //    _columnOptions.DisplayInCombo = false;
        //    _columnOptions.DisplayInManage = true;
        //    _columnOptions.IsSearchable = false;
        //    _columnOptions.AllowNull = true;
        //    BuildColumnsDataTable(ref _dt, "Comment", _columnOptions);

        //    _columnOptions = new ColumnOptions();
        //    _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
        //    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
        //    _columnOptions.IsPrimaryKey = false;
        //    _columnOptions.DisplayInCombo = false;
        //    _columnOptions.DisplayInManage = false;
        //    _columnOptions.IsSearchable = false;
        //    _columnOptions.AllowNull = false;
        //    BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

        //    //Cuando implementemos la opcion de traer todo en un filtro.
        //    Boolean _showAll = false;
        //    if (ValidateSelectedItemComboBox(param, ref _showAll))
        //    {
        //        if (param.ContainsKey("IdProcess"))
        //        {
        //            Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
        //            ProcessTask _processTask = (ProcessTask)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess);
        //            String _permissionType = String.Empty;
        //            //Obtiene el permiso que tiene el usuario para esa organizacion.
        //            if (_processTask.Parent.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
        //            { _permissionType = Common.Constants.PermissionManageName; }
        //            else
        //            { _permissionType = Common.Constants.PermissionViewName; }

        //            Int64 _idExecution = Convert.ToInt64(param["IdExecution"]);
        //            ProcessTaskExecution _processTaskExecution = _processTask.ProcessTaskExecution(_idExecution);

        //            //Ya esta armado el DataTable, ahora lo carga
        //            foreach (ProcessTaskExecutionFileAttach _processTaskExecutionFileAttach in _processTaskExecution.FileAttachs().Values)
        //            {
        //                String _name = Common.Functions.ReplaceIndexesTags(_processTaskExecutionFileAttach..LanguageOption.Title);
        //                String _fileUrl = String.Empty;
        //                String _resourceType = String.Empty;

        //                _fileUrl = ((Condesus.EMS.Business.KC.Entities.VersionDoc)_resource.CurrentVersion).FileAttach.FileName;
        //                _resourceType = "DOC";

        //                _dt.Rows.Add(_resource.IdResource, _processResource.Process.IdProcess, _resource.ResourceType.IdResourceType, _resource.CurrentVersion.IdResourceFile,
        //                    _processResource.Resource.ResourceType.LanguageOption.Name,
        //                    _resourceType, _fileUrl, _name, _resource.CurrentVersion.VersionNumber.ToString(), _processResource.Comment, _permissionType);
        //            }
        //        }
        //    }
            
        //    //Retorna el DataTable
        //    return _dt;
        //}

        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion Process Task Executions.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ProcessTaskExecutions(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ProcessTaskExecution");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdExecution;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdExecution", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdProcess;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdProcess", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdTask;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdTask", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Date;
            _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Date", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Post;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Post", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Comment;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "Comment", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            if (param.ContainsKey("IdProcess"))
            {
                Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
                ProcessTask _processTask;
                //Si viene el IdTask, lo usa, sino tiene que construir la medicion.
                if (param.ContainsKey("IdTask"))
                {
                    Int64 _idTask = Convert.ToInt64(param["IdTask"]);
                    _processTask = (ProcessTask)EMSLibrary.User.ProcessFramework.Map.Process(_idTask);
                }
                else
                {
                    Int64 _idMeasurement = Convert.ToInt64(param["IdMeasurement"]);
                    _processTask = (ProcessTask)EMSLibrary.User.PerformanceAssessments.Configuration.Measurement(_idMeasurement).ProcessTask;
                }
                Dictionary<Int64, ProcessTaskExecution> _processTaskExecutions = _processTask.ProcessTaskExecutionsOnly;

                //Obtiene si este usuario es operador sobre esta tarea
                Condesus.EMS.Business.DS.Entities.Post _post = _processTask.ExecutionPermission(EMSLibrary.User.Person);
                String _permissionType = String.Empty;
                //Si el puesto no es null...quiere decir que es un Operador de esta tarea. sino la dejo como view..
                if (_post != null)
                { _permissionType = Common.Constants.PermissionManageName; }
                else
                { _permissionType = Common.Constants.PermissionViewName; }


                foreach (ProcessTaskExecution _processTaskExecution in _processTaskExecutions.Values)
                {
                    //Agrega los datos al DataTable
                    if (_processTaskExecution.Post == null)
                    {
                        _dt.Rows.Add(_processTaskExecution.IdExecution, _idProcess, _processTaskExecution.ProcessTask.IdProcess, _processTaskExecution.Date, String.Empty, _processTaskExecution.Comment, _permissionType);
                    }
                    else
                    {
                        String _fullNamePost = _processTaskExecution.Post.Person.LastName
                                        + ", " + _processTaskExecution.Post.Person.FirstName
                                        + " - " + _processTaskExecution.Post.JobTitle.Name();

                        _dt.Rows.Add(_processTaskExecution.IdExecution, _idProcess, _processTask.IdProcess, _processTaskExecution.Date, _fullNamePost, _processTaskExecution.Comment, _permissionType);
                    }
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del Process Task Execution.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ProcessTaskExecution(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ProcessTaskExecution");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

            Int64 _idProcess;
            if (param.ContainsKey("IdProcess"))
            {
                _idProcess = Convert.ToInt64(param["IdProcess"]);
            }
            else
            {
                _idProcess = Convert.ToInt64(param["IdTask"]);
            }
            Int64 _idExecution = Convert.ToInt64(param["IdExecution"]);

            ProcessTaskExecution _processTaskExecution = (ProcessTaskExecution)((ProcessTask)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess)).ProcessTaskExecution(_idExecution);
            String _fullNamePost = String.Empty;
            if (_processTaskExecution.Post != null)
            {
                _fullNamePost = _processTaskExecution.Post.Person.LastName
                                + ", " + _processTaskExecution.Post.Person.FirstName
                                + " - " + _processTaskExecution.Post.JobTitle.Name();
            }
            _dt.ExtendedProperties.Add("PageTitle", _fullNamePost);

            //Carga los datos
            //_dt.Rows.Add(Resources.CommonListManage.IdProcess, _idProcess);
            //_dt.Rows.Add(Resources.CommonListManage.IdExecution, _idExecution);
            _dt.Rows.Add(Resources.CommonListManage.Date, _processTaskExecution.Date);

            _dt.Rows.Add(Resources.CommonListManage.Post, _fullNamePost);
            _dt.Rows.Add(Resources.CommonListManage.Comment, _processTaskExecution.Comment);

            //Retorna el DataTable.
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del Process Task Execution Calibration.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ProcessTaskExecutionCalibration(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ProcessTaskExecutionCalibration");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

            Int64 _idProcess;
            //Si viene el idtask lo uso, sino usa el idprocess...
            if (param.ContainsKey("IdTask"))
            {
                _idProcess = Convert.ToInt64(param["IdTask"]);
            }
            else
            {
                _idProcess = Convert.ToInt64(param["IdProcess"]);
            }
            Int64 _idExecution = Convert.ToInt64(param["IdExecution"]);

            //ProcessTaskExecution _processTaskExecution = ((ProcessTask)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess)).ProcessTaskExecution(_idExecution);
            ProcessTaskExecution _processTaskExecutionCalibration = (ProcessTaskExecution)((ProcessTask)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess)).ProcessTaskExecution(_idExecution);
            String _fullNamePost = String.Empty;
            if (_processTaskExecutionCalibration.Post != null)
            {
                _fullNamePost = _processTaskExecutionCalibration.Post.Person.LastName
                                + ", " + _processTaskExecutionCalibration.Post.Person.FirstName
                                + " - " + _processTaskExecutionCalibration.Post.JobTitle.Name();
            }
            _dt.ExtendedProperties.Add("PageTitle", _fullNamePost);

            //Carga los datos
            //_dt.Rows.Add(Resources.CommonListManage.IdProcess, _idProcess);
            //_dt.Rows.Add(Resources.CommonListManage.IdExecution, _idExecution);
            _dt.Rows.Add(Resources.CommonListManage.Date, _processTaskExecutionCalibration.Date);



            _dt.Rows.Add(Resources.CommonListManage.Post, _fullNamePost);
            _dt.Rows.Add(Resources.CommonListManage.Comment, _processTaskExecutionCalibration.Comment);

            //Retorna el DataTable.
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del Process Task Execution Measurement.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ProcessTaskExecutionMeasurement(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ProcessTaskExecutionMeasurement");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

            Int64 _idProcess;
            //Si viene el idtask lo uso, sino usa el idprocess...
            if (param.ContainsKey("IdTask"))
            {
                _idProcess = Convert.ToInt64(param["IdTask"]);
            }
            else
            {
                _idProcess = Convert.ToInt64(param["IdProcess"]);
            }
            Int64 _idExecution = Convert.ToInt64(param["IdExecution"]);

            //ProcessTaskExecution _processTaskExecution = ((ProcessTask)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess)).ProcessTaskExecution(_idExecution);
            ProcessTaskExecution _processTaskExecutionMeasurement = (ProcessTaskExecution)((ProcessTask)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess)).ProcessTaskExecution(_idExecution);

            String _fullNamePost = String.Empty;
            if (_processTaskExecutionMeasurement.Post != null)
            {
                _fullNamePost = _processTaskExecutionMeasurement.Post.Person.LastName
                                            + ", " + _processTaskExecutionMeasurement.Post.Person.FirstName
                                            + " - " + _processTaskExecutionMeasurement.Post.JobTitle.Name();
            }

            _dt.ExtendedProperties.Add("PageTitle", _fullNamePost);

            //Carga los datos
            //_dt.Rows.Add(Resources.CommonListManage.IdProcess, _idProcess);
            //_dt.Rows.Add(Resources.CommonListManage.IdExecution, _idExecution);
            _dt.Rows.Add(Resources.CommonListManage.Date, _processTaskExecutionMeasurement.Date);



            _dt.Rows.Add(Resources.CommonListManage.Post, _fullNamePost);
            _dt.Rows.Add(Resources.CommonListManage.Comment, _processTaskExecutionMeasurement.Comment);

            //Retorna el DataTable.
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del Process Task Execution Operation.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ProcessTaskExecutionOperation(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ProcessTaskExecutionOperation");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

            Int64 _idProcess;
            //Si viene el idtask lo uso, sino usa el idprocess...
            if (param.ContainsKey("IdTask"))
            {
                _idProcess = Convert.ToInt64(param["IdTask"]);
            }
            else
            {
                _idProcess = Convert.ToInt64(param["IdProcess"]);
            }
            Int64 _idExecution = Convert.ToInt64(param["IdExecution"]);

            ProcessTaskExecution _processTaskExecution = ((ProcessTask)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess)).ProcessTaskExecution(_idExecution);

            String _fullNamePost = String.Empty;

            if (_processTaskExecution.Post != null)
            {
                _fullNamePost = _processTaskExecution.Post.Person.LastName
                                + ", " + _processTaskExecution.Post.Person.FirstName
                                + " - " + _processTaskExecution.Post.JobTitle.Name();
            }

            _dt.ExtendedProperties.Add("PageTitle", _fullNamePost);

            //Carga los datos
            //_dt.Rows.Add(Resources.CommonListManage.IdProcess, _idProcess);
            //_dt.Rows.Add(Resources.CommonListManage.IdExecution, _idExecution);
            _dt.Rows.Add(Resources.CommonListManage.Date, _processTaskExecution.Date);



            _dt.Rows.Add(Resources.CommonListManage.Post, _fullNamePost);
            _dt.Rows.Add(Resources.CommonListManage.Comment, _processTaskExecution.Comment);

            //Retorna el DataTable.
            return _dt;
        }

        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion Process Task Executions Attachments.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ProcessTaskExecutionsAttachments(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ProcessTaskExecutionsAttachments");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdExecution;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdExecution", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdProcess;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdProcess", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdTask;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdTask", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Date;
            _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Date", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Post;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Post", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Comment;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "Comment", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.FileSize;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "FileSize", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            if ((param.ContainsKey("IdProcess")) || (param.ContainsKey("IdMeasurement")))
            {
                ProcessTask _processTask = null;
                Int64 _idProcess = 0;
                Int64 _idTask = 0;
                Int64 _idMeasurement = 0;
                if (param.ContainsKey("IdProcess"))
                {
                    _idProcess = Convert.ToInt64(param["IdProcess"]);
                    //Si viene el IdTask, lo usa, sino tiene que construir la medicion.
                    if (param.ContainsKey("IdTask"))
                    {
                        _idTask = Convert.ToInt64(param["IdTask"]);
                        _processTask = (ProcessTask)EMSLibrary.User.ProcessFramework.Map.Process(_idTask);
                    }
                    else
                    {
                        _idMeasurement = Convert.ToInt64(param["IdMeasurement"]);
                        _processTask = (ProcessTask)EMSLibrary.User.PerformanceAssessments.Configuration.Measurement(_idMeasurement).ProcessTask;
                    }
                }
                else
                {
                    if (param.ContainsKey("IdMeasurement"))
                    {
                        _idMeasurement = Convert.ToInt64(param["IdMeasurement"]);
                        _processTask = (ProcessTask)EMSLibrary.User.PerformanceAssessments.Configuration.Measurement(_idMeasurement).ProcessTask;
                    }
                }
                Dictionary<Int64, ProcessTaskExecution> _processTaskExecutions = _processTask.ProcessTaskExecutionsOnly;

                //Obtiene si este usuario es operador sobre esta tarea
                Condesus.EMS.Business.DS.Entities.Post _post = _processTask.ExecutionPermission(EMSLibrary.User.Person);
                String _permissionType = String.Empty;
                //Si el puesto no es null...quiere decir que es un Operador de esta tarea. sino la dejo como view..
                if (_post != null)
                { _permissionType = Common.Constants.PermissionManageName; }
                else
                { _permissionType = Common.Constants.PermissionViewName; }


                foreach (ProcessTaskExecution _processTaskExecution in _processTaskExecutions.Values)
                {
                    //Solo muestra las ejecuciones ejecutadas, que son las unicas que pueden tener algun adjunto...
                    //Agrega los datos al DataTable
                    if (_processTaskExecution.Post != null)
                    {
                        String _fullNamePost = _processTaskExecution.Post.Person.LastName
                                        + ", " + _processTaskExecution.Post.Person.FirstName
                                        + " - " + _processTaskExecution.Post.JobTitle.Name();

                        Int64 _fileSize = 0;
                        if (_processTaskExecution.Attachment != null)
                        {
                            _fileSize = _processTaskExecution.Attachment.Length;
                        }
                        _dt.Rows.Add(_processTaskExecution.IdExecution, _idProcess, _processTask.IdProcess, _processTaskExecution.Date, _fullNamePost, _processTaskExecution.Comment, _permissionType, _fileSize);
                    }
                }
            }
            //Retorna el DataTable
            return _dt;
        }

        #endregion

        #region Process Task
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion Process Tasks.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ProcessTasks(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ProcessTask");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdTask;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdTask", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdProcess;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdProcess", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Title;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Title", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Description;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "Description", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.StartDate;
            _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "StartDate", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.EndDate;
            _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "EndDate", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Duration;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Duration", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Interval;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Interval", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.MaxNumberExecution;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "MaxNumberExecution", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Result;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Result", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Completed;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Completed", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.TimeUnitDuration;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "TimeUnitDuration", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.TimeUnitInterval;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "TimeUnitInterval", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.TypeExecution;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "TypeExecution", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.State;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "State", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.TaskType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "TaskType", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.MeasurementDevice;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "MeasurementDevice", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Measurement;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "Measurement", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Indicator;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "Indicator", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            try
            {
                //Cuando implementemos la opcion de traer todo en un filtro.
                if (param.ContainsKey("IdProcess"))
                {
                    Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
                    ProcessGroupProcess _processGroupProcess = (ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess).Parent;
                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (_processGroupProcess.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    Dictionary<Int64, ProcessTask> _processTasks = ((ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess)).ChildrenTask;
                    var _lnqTasks = from t in _processTasks.Values
                                    orderby t.LanguageOption.Title
                                    select t;
                    foreach (ProcessTask _processTask in _lnqTasks)
                    {
                        String _taskType = _processTask.GetType().Name;
                        //Si es medicion...
                        if (_taskType == Resources.IconsByEntity.ProcessTaskMeasurement)
                        {
                            ProcessTaskMeasurement _processTaskMeasurement = (ProcessTaskMeasurement)_processTask;

                            _dt.Rows.Add(_processTask.IdProcess, _idProcess, Common.Functions.ReplaceIndexesTags(_processTask.LanguageOption.Title),
                                _processTask.LanguageOption.Description,
                                _processTask.StartDate, _processTask.EndDate, _processTask.Duration, _processTask.Interval,
                                _processTask.MaxNumberExecution, _processTask.Result, _processTask.Completed,
                                _processTask.TimeUnitDuration, _processTask.TimeUnitInterval, _processTask.TypeExecution,
                                _processTask.State, _taskType,
                                String.Empty,
                                Common.Functions.ReplaceIndexesTags(_processTaskMeasurement.Measurement.LanguageOption.Name),
                                Common.Functions.ReplaceIndexesTags(_processTaskMeasurement.Measurement.Indicator.LanguageOption.Name), _permissionType);
                        }
                        else
                        {
                            //Si es calibracion...
                            if (_taskType == Resources.IconsByEntity.ProcessTaskCalibration)
                            {
                                ProcessTaskCalibration _processTaskCalibration = (ProcessTaskCalibration)_processTask;

                                _dt.Rows.Add(_processTask.IdProcess, _idProcess, Common.Functions.ReplaceIndexesTags(_processTask.LanguageOption.Title),
                                    _processTask.LanguageOption.Description,
                                    _processTask.StartDate, _processTask.EndDate, _processTask.Duration, _processTask.Interval,
                                    _processTask.MaxNumberExecution, _processTask.Result, _processTask.Completed,
                                    _processTask.TimeUnitDuration, _processTask.TimeUnitInterval, _processTask.TypeExecution,
                                    _processTask.State, _taskType,
                                    Common.Functions.ReplaceIndexesTags(_processTaskCalibration.MeasurementDevice.FullName),
                                    String.Empty, String.Empty, _permissionType);
                            }
                            else
                            {
                                //Cualquier otra cosa...
                                _dt.Rows.Add(_processTask.IdProcess, _idProcess, Common.Functions.ReplaceIndexesTags(_processTask.LanguageOption.Title),
                                    _processTask.LanguageOption.Description,
                                    _processTask.StartDate, _processTask.EndDate, _processTask.Duration, _processTask.Interval,
                                    _processTask.MaxNumberExecution, _processTask.Result, _processTask.Completed,
                                    _processTask.TimeUnitDuration, _processTask.TimeUnitInterval, _processTask.TypeExecution,
                                    _processTask.State, _taskType, String.Empty, String.Empty, String.Empty, _permissionType);
                            }
                        }
                    }
                }
            }
            catch { }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Indica si esa ProcessTasksHasChildren tiene hijos o no.(Los elementos no tienen hijos...)
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un<c>Boolean</c></returns>
        public Boolean ProcessTasksHasChildren(Dictionary<String, Object> param)
        {
            return false;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del Process Task.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ProcessTask(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ProcessTask");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

            Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
            Int64 _idTask = Convert.ToInt64(param["IdTask"]);

            ProcessTask _processTask = ((ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess)).ProcessTask(_idTask);

            //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
            _dt.ExtendedProperties.Add("PageTitle", Common.Functions.ReplaceIndexesTags(_processTask.LanguageOption.Title));

            //Carga los datos
            //_dt.Rows.Add(Resources.CommonListManage.IdProcess, _idProcess);
            //_dt.Rows.Add(Resources.CommonListManage.IdTask, _idTask);
            _dt.Rows.Add(Resources.CommonListManage.Title, _processTask.LanguageOption.Title);
            _dt.Rows.Add(Resources.CommonListManage.Description, _processTask.LanguageOption.Description);
            _dt.Rows.Add(Resources.CommonListManage.StartDate, _processTask.StartDate);
            _dt.Rows.Add(Resources.CommonListManage.EndDate, _processTask.EndDate);
            _dt.Rows.Add(Resources.CommonListManage.Duration, _processTask.Duration + " " + EMSLibrary.User.ProcessFramework.Configuration.TimeUnit(_processTask.TimeUnitDuration).LanguageOption.Name);
            _dt.Rows.Add(Resources.CommonListManage.Interval, _processTask.Interval + " " + EMSLibrary.User.ProcessFramework.Configuration.TimeUnit(_processTask.TimeUnitInterval).LanguageOption.Name);
            //_dt.Rows.Add(Resources.CommonListManage.Duration, _processTask.Duration);
            //_dt.Rows.Add(Resources.CommonListManage.Interval, _processTask.Interval);
            _dt.Rows.Add(Resources.CommonListManage.MaxNumberExecution, _processTask.MaxNumberExecution);
            _dt.Rows.Add(Resources.CommonListManage.Result, _processTask.Result);
            _dt.Rows.Add(Resources.CommonListManage.Completed, _processTask.Completed);
            //_dt.Rows.Add(Resources.CommonListManage.TimeUnitDuration, _processTask.TimeUnitDuration);
            //_dt.Rows.Add(Resources.CommonListManage.TimeUnitInterval, _processTask.TimeUnitInterval);
            _dt.Rows.Add(Resources.CommonListManage.TypeExecution, _processTask.TypeExecution);

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        #region Process Task Calibration
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion Process Tasks Calibrations.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ProcessTaskCalibrations(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ProcessTaskCalibration");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdTask;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdTask", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdProcess;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdProcess", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Title;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Title", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Purpose;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "Purpose", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Description;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "Description", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.StartDate;
            _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "StartDate", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.EndDate;
            _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "EndDate", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Duration;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Duration", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Interval;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Interval", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.MaxNumberExecution;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "MaxNumberExecution", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Result;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Result", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Completed;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Completed", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.TimeUnitDuration;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "TimeUnitDuration", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.TimeUnitInterval;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "TimeUnitInterval", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.TypeExecution;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "TypeExecution", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.State;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "State", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.TaskType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "TaskType", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.MeasurementDevice;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "MeasurementDevice", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            try
            {
                //Cuando implementemos la opcion de traer todo en un filtro.
                if (param.ContainsKey("IdProcess"))
                {
                    Int64 _idProcess;
                    if (param.ContainsKey("IdTask"))
                    {
                        //Si viene el idTask, uso ese!!!
                        _idProcess = Convert.ToInt64(param["IdTask"]);
                    }
                    else
                    {
                        _idProcess = Convert.ToInt64(param["IdProcess"]);
                    }
                    ProcessGroupProcess _processGroupProcess = (ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess).Parent;
                    Dictionary<Int64, ProcessTask> _processTasks = _processGroupProcess.ChildrenTask;

                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (_processGroupProcess.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    foreach (ProcessTask _processTask in _processTasks.Values)
                    {
                        String _taskType = _processTask.GetType().Name;
                        //Si es calibracion...
                        if (_taskType == Resources.IconsByEntity.ProcessTaskCalibration)
                        {
                            ProcessTaskCalibration _processTaskCalibration = (ProcessTaskCalibration)_processTask;

                            _dt.Rows.Add(_processTask.IdProcess, _idProcess,
                                Common.Functions.ReplaceIndexesTags(_processTask.LanguageOption.Title),
                                _processTask.LanguageOption.Purpose,
                                _processTask.LanguageOption.Description,
                                _processTask.StartDate, _processTask.EndDate, _processTask.Duration, _processTask.Interval,
                                _processTask.MaxNumberExecution, _processTask.Result, _processTask.Completed,
                                _processTask.TimeUnitDuration, _processTask.TimeUnitInterval, _processTask.TypeExecution,
                                _processTask.State, _taskType,
                                Common.Functions.ReplaceIndexesTags(_processTaskCalibration.MeasurementDevice.FullName), _permissionType);
                        }
                    }
                }
            }
            catch { }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del Process Task Calibration.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ProcessTaskCalibration(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ProcessTaskCalibration");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

            Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
            Int64 _idTask = Convert.ToInt64(param["IdTask"]);

            ProcessTask _processTask = ((ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess)).ProcessTask(_idTask);

            //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
            _dt.ExtendedProperties.Add("PageTitle", Common.Functions.ReplaceIndexesTags(_processTask.LanguageOption.Title));

            //Carga los datos
            //_dt.Rows.Add(Resources.CommonListManage.IdProcess, _idProcess);
            //_dt.Rows.Add(Resources.CommonListManage.IdTask, _idTask);
            _dt.Rows.Add(Resources.CommonListManage.Title, _processTask.LanguageOption.Title);
            _dt.Rows.Add(Resources.CommonListManage.Purpose, _processTask.LanguageOption.Purpose);
            _dt.Rows.Add(Resources.CommonListManage.Description, _processTask.LanguageOption.Description);
            _dt.Rows.Add(Resources.CommonListManage.StartDate, _processTask.StartDate);
            _dt.Rows.Add(Resources.CommonListManage.EndDate, _processTask.EndDate);
            _dt.Rows.Add(Resources.CommonListManage.Duration, _processTask.Duration + " " + EMSLibrary.User.ProcessFramework.Configuration.TimeUnit(_processTask.TimeUnitDuration).LanguageOption.Name);
            _dt.Rows.Add(Resources.CommonListManage.Interval, _processTask.Interval + " " + EMSLibrary.User.ProcessFramework.Configuration.TimeUnit(_processTask.TimeUnitInterval).LanguageOption.Name);
            //_dt.Rows.Add(Resources.CommonListManage.TimeUnitDuration, _processTask.TimeUnitDuration);
            //_dt.Rows.Add(Resources.CommonListManage.Duration, _processTask.Duration);
            //_dt.Rows.Add(Resources.CommonListManage.TimeUnitInterval, _processTask.TimeUnitInterval);
            //_dt.Rows.Add(Resources.CommonListManage.Interval, _processTask.Interval);
            _dt.Rows.Add(Resources.CommonListManage.MaxNumberExecution, _processTask.MaxNumberExecution);
            _dt.Rows.Add(Resources.CommonListManage.Result, _processTask.Result);
            _dt.Rows.Add(Resources.CommonListManage.Completed, _processTask.Completed);
            _dt.Rows.Add(Resources.CommonListManage.TypeExecution, _processTask.TypeExecution);

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        #region Process Task Measurement
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion Process Tasks Measurements.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ProcessTaskMeasurements(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ProcessTaskMeasurement");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdTask;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdTask", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdProcess;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdProcess", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Title;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Title", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Purpose;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "Purpose", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Description;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "Description", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.StartDate;
            _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "StartDate", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.EndDate;
            _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "EndDate", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Duration;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Duration", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Interval;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Interval", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.MaxNumberExecution;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "MaxNumberExecution", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Result;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Result", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Completed;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Completed", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.TimeUnitDuration;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "TimeUnitDuration", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.TimeUnitInterval;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "TimeUnitInterval", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.TypeExecution;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "TypeExecution", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.State;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "State", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.TaskType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "TaskType", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Measurement;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "Measurement", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Indicator;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "Indicator", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            try
            {
                //Cuando implementemos la opcion de traer todo en un filtro.
                if (param.ContainsKey("IdProcess"))
                {
                    Int64 _idProcess;
                    if (param.ContainsKey("IdTask"))
                    {
                        //Si viene el idTask, uso ese!!!
                        _idProcess = Convert.ToInt64(param["IdTask"]);
                    }
                    else
                    {
                        _idProcess = Convert.ToInt64(param["IdProcess"]);
                    }
                    ProcessGroupProcess _processGroupProcess = (ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess);
                    Dictionary<Int64, ProcessTask> _processTasks = _processGroupProcess.ChildrenTask;
                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (_processGroupProcess.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    var _lnqTasks = from t in _processTasks.Values
                                    orderby t.LanguageOption.Title
                                    select t;
                    foreach (ProcessTask _processTask in _lnqTasks)
                    {
                        String _taskType = _processTask.GetType().Name;
                        //Si es medicion...
                        if (_taskType == Resources.IconsByEntity.ProcessTaskMeasurement)
                        {
                            ProcessTaskMeasurement _processTaskMeasurement = (ProcessTaskMeasurement)_processTask;

                            _dt.Rows.Add(_processTask.IdProcess, _idProcess, Common.Functions.ReplaceIndexesTags(_processTask.LanguageOption.Title),
                                _processTask.LanguageOption.Description,
                                _processTask.LanguageOption.Purpose,
                                _processTask.StartDate, _processTask.EndDate, _processTask.Duration, _processTask.Interval,
                                _processTask.MaxNumberExecution, _processTask.Result, _processTask.Completed,
                                _processTask.TimeUnitDuration, _processTask.TimeUnitInterval, _processTask.TypeExecution,
                                _processTask.State, _taskType,
                                Common.Functions.ReplaceIndexesTags(_processTaskMeasurement.Measurement.LanguageOption.Name),
                                Common.Functions.ReplaceIndexesTags(_processTaskMeasurement.Measurement.Indicator.LanguageOption.Name), _permissionType);
                        }
                    }
                }
            }
            catch { }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion Process Tasks Measurements.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ProcessTaskMeasurementsByOperator(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ProcessTaskMeasurement");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdTask;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdTask", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdProcess;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdProcess", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Title;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Title", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Purpose;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "Purpose", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Description;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "Description", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.StartDate;
            _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "StartDate", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.EndDate;
            _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "EndDate", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Duration;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Duration", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Interval;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Interval", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.MaxNumberExecution;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "MaxNumberExecution", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Result;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Result", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Completed;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Completed", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.TimeUnitDuration;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "TimeUnitDuration", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.TimeUnitInterval;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "TimeUnitInterval", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.TypeExecution;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "TypeExecution", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.State;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "State", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.TaskType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "TaskType", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Measurement;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "Measurement", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Indicator;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "Indicator", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            try
            {
                //Cuando implementemos la opcion de traer todo en un filtro.
                if (param.ContainsKey("IdProcess"))
                {
                    Int64 _idProcess;
                    if (param.ContainsKey("IdTask"))
                    {
                        //Si viene el idTask, uso ese!!!
                        _idProcess = Convert.ToInt64(param["IdTask"]);
                    }
                    else
                    {
                        _idProcess = Convert.ToInt64(param["IdProcess"]);
                    }
                    ProcessGroupProcess _processGroupProcess = (ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess);
                    Dictionary<Int64, ProcessTask> _processTasks = _processGroupProcess.ChildrenTask;
                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (_processGroupProcess.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    var _lnqTasks = from t in _processTasks.Values
                                    where t.ExecutionPermission(EMSLibrary.User.Person) != null
                                    && t.ProcessTaskExecutionNow() != null
                                    orderby t.LanguageOption.Title
                                    select t;
                    foreach (ProcessTask _processTask in _lnqTasks)
                    {
                        String _taskType = _processTask.GetType().Name;
                        //Si es medicion...
                        if (_taskType == Resources.IconsByEntity.ProcessTaskMeasurement)
                        {
                            ProcessTaskMeasurement _processTaskMeasurement = (ProcessTaskMeasurement)_processTask;

                            _dt.Rows.Add(_processTask.IdProcess, _idProcess, Common.Functions.ReplaceIndexesTags(_processTask.LanguageOption.Title),
                                _processTask.LanguageOption.Description,
                                _processTask.LanguageOption.Purpose,
                                _processTask.StartDate, _processTask.EndDate, _processTask.Duration, _processTask.Interval,
                                _processTask.MaxNumberExecution, _processTask.Result, _processTask.Completed,
                                _processTask.TimeUnitDuration, _processTask.TimeUnitInterval, _processTask.TypeExecution,
                                _processTask.State, _taskType,
                                Common.Functions.ReplaceIndexesTags(_processTaskMeasurement.Measurement.LanguageOption.Name),
                                Common.Functions.ReplaceIndexesTags(_processTaskMeasurement.Measurement.Indicator.LanguageOption.Name), _permissionType);
                        }
                    }
                }
            }
            catch { }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Indica si esa ProcessTasksHasChildren tiene hijos o no.(Los elementos no tienen hijos...)
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un<c>Boolean</c></returns>
        public Boolean ProcessTaskMeasurementsByOperatorHasChildren(Dictionary<String, Object> param)
        {
            return false;
        }

        /// <summary>
        /// Construye el DataTable a modo Property con los datos del Process Task Measurement.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ProcessTaskMeasurement(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("Measurement");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());
            BuildColumnsDataTable(ref _dt, "ColumnOrderViewer", SetColumnOrderViewer());

            Int64 _idMeasurement = Convert.ToInt64(param["IdMeasurement"]);
            Measurement _measurement = null;
            //Si viene el process, acceso al measurement a traves del process
            if (param.ContainsKey("IdProcess"))
            {
                Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
                _measurement = ((ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess)).Measurements[_idMeasurement];
            }
            else
            {
                _measurement = EMSLibrary.User.PerformanceAssessments.Configuration.Measurement(_idMeasurement);
            }

            _dt.ExtendedProperties.Add("PageTitle", Common.Functions.ReplaceIndexesTags(_measurement.LanguageOption.Name));

            Int16 i = 0;//Se genera este contador, para evitar claves duplicadas, es porque no todos los registros tienen link.            
            Int16 x = 0;//Se genera este contador, para evitar claves duplicadas, es porque no todos los registros tienen link.            
            Dictionary<String, Object> _valueLink = new Dictionary<String, Object>();
            _valueLink.Add("IdIndicator", _measurement.Indicator.IdIndicator);
            _valueLink.Add("IdMeasurementUnit", _measurement.MeasurementUnit.IdMeasurementUnit);
            _valueLink.Add("IdMagnitud", _measurement.MeasurementUnit.Magnitud.IdMagnitud);
            //Una medicion puede no tener un equipo asociado, porque no todas se miden con un equipo.
            if (_measurement.Device != null)
            {
                _valueLink.Add("IdMeasurementDevice", _measurement.Device.IdMeasurementDevice);
            }
            //_valueLink.Add("IdParameterGroup", _measurement.ParameterGroup.IdParameterGroup);

            //Carga los datos
            //Name: 
            //Indicator:  zzz [Unit] 
            //Site: 
            //Frequency: tal [timeunit] 
            //Methodology: 
            //Scope: 
            //Source 
            //Quality 
            //Task Name: 
            //Frequency at Source: 
            //_dt.Rows.Add(Resources.CommonListManage.IdMeasurement, _measurement.IdMeasurement, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.Name, Common.Functions.ReplaceIndexesTags(_measurement.LanguageOption.Name), "#" + i++, "#" + x++);
            _dt.Rows.Add(Resources.CommonListManage.Indicator, Common.Functions.ReplaceIndexesTags(_measurement.Indicator.LanguageOption.Name),
                GetValueLink(Common.ConstantsEntitiesName.PA.Indicator, _valueLink), "#" + x++);
            _dt.Rows.Add(Resources.CommonListManage.LanguageName, Common.Functions.ReplaceIndexesTags(_measurement.LanguageOption.Language.Name), "#" + i++, "#" + x++);
            if (_measurement.ProcessTask.Site != null)
            {
                _dt.Rows.Add(Resources.CommonListManage.Site, Common.Functions.ReplaceIndexesTags(_measurement.ProcessTask.Site.LanguageOption.Name), "#" + i++, "#" + x++);
            }
            else
            {
                _dt.Rows.Add(Resources.CommonListManage.Site, Resources.Common.Unassigned, "#" + i++, "#" + x++);
            }
            //_dt.Rows.Add(Resources.CommonListManage.Description, _measurement.LanguageOption.Description, "#" + i++);
            _dt.Rows.Add(Resources.CommonListManage.TimeUnitFrequency, Resources.Common.WordFrequency + " " + _measurement.Frequency.ToString() + " " + EMSLibrary.User.ProcessFramework.Configuration.TimeUnit(_measurement.TimeUnitFrequency).LanguageOption.Name, "#" + i++, "#" + x++);
            if (_measurement.Methodology == null)
            {
                _dt.Rows.Add(Resources.CommonListManage.Methodology, String.Empty, "#" + i++, "#" + x++);
            }
            else
            {
                _valueLink.Add("IdMethodology", _measurement.Methodology.IdMethodology);
                _dt.Rows.Add(Resources.CommonListManage.Methodology, _measurement.Methodology.LanguageOption.MethodName,
                    GetValueLink(Common.ConstantsEntitiesName.PA.Methodology, _valueLink), "#" + x++);
            }
            if (((ProcessTaskMeasurement)_measurement.ProcessTask).AccountingScope != null)
            {
                _dt.Rows.Add(Resources.CommonListManage.AccountingScope, ((ProcessTaskMeasurement)_measurement.ProcessTask).AccountingScope.LanguageOption.Name, "#" + i++, "#" + x++);
            }
            else
            {
                _dt.Rows.Add(Resources.CommonListManage.AccountingScope, Resources.Common.Unassigned, "#" + i++, "#" + x++);
            }
            _dt.Rows.Add(Resources.CommonListManage.MeasurementSource, _measurement.Source, "#" + i++, "#" + x++);
            if (_measurement.Quality == null)
            {
                _dt.Rows.Add(Resources.CommonListManage.Quality, String.Empty, "#" + i++, "#" + x++);
            }
            else
            {

                _valueLink.Add("IdQuality", _measurement.Quality.IdQuality);
                _dt.Rows.Add(Resources.CommonListManage.Quality, _measurement.Quality.LanguageOption.Name,
                    GetValueLink(Common.ConstantsEntitiesName.PA.Quality, _valueLink), "#" + x++);
            }
            _valueLink.Add("IdProcess", _measurement.ProcessTask.Parent.IdProcess);
            _valueLink.Add("IdTask", _measurement.ProcessTask.IdProcess);
            _dt.Rows.Add(Resources.CommonListManage.ProcessTaskMeasurement, Common.Functions.ReplaceIndexesTags(_measurement.ProcessTask.LanguageOption.Title),
                GetValueLink(Common.ConstantsEntitiesName.PF.ProcessTaskMeasurement, _valueLink), "#" + x++);

            _dt.Rows.Add(Resources.CommonListManage.MeasurementFrequencyAtSource, _measurement.FrequencyAtSource, "#" + i++, "#" + x++);
            _dt.Rows.Add(Resources.CommonListManage.MeasurementUnit, Common.Functions.ReplaceIndexesTags(_measurement.MeasurementUnit.LanguageOption.Name),
                GetValueLink(Common.ConstantsEntitiesName.PA.MeasurementUnit, _valueLink), "#" + x++);

            //Parece que esto no lo quieren ver....
            ////Una medicion puede no tener un equipo asociado, porque no todas se miden con un equipo.
            //if (_measurement.Device != null)
            //{
            //    _dt.Rows.Add(Resources.CommonListManage.ParameterGroup, _measurement.ParameterGroup.LanguageOption.Name,
            //        GetValueLink(Common.ConstantsEntitiesName.PA.ParameterGroup, _valueLink));
            //}
            //else
            //{
            //    _dt.Rows.Add(Resources.CommonListManage.MeasurementDevice, Resources.Common.NotUsed, "#" + i++);
            //}
            //_dt.Rows.Add(Resources.CommonListManage.Uncertainty, _measurement.Uncertainty, "#" + i++);

            //Retorna el DataTable.
            return _dt;


            ////Construye el datatable
            //DataTable _dt = BuildDataTable("ProcessTaskMeasurement");

            ////Contruye las columnas y sus atributos.
            //BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            //BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

            //ProcessTask _processTask;
            //Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
            //Int64 _idTask = 0;
            ////Puede que no venga el IdTask pero si viene el idMeasurement, en ambos casos puedo llegar al ProcessTask
            //if (param.ContainsKey("IdTask"))
            //{
            //    _idTask = Convert.ToInt64(param["IdTask"]);
            //    _processTask = ((ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess)).ProcessTask(_idTask);
            //}
            //else
            //{
            //    Int64 _idMeasurement = Convert.ToInt64(param["IdMeasurement"]);
            //    _processTask = EMSLibrary.User.PerformanceAssessments.Configuration.Measurement(614).ProcessTask;
            //}
            ////Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
            //_dt.ExtendedProperties.Add("PageTitle", Common.Functions.ReplaceIndexesTags(_processTask.LanguageOption.Title));

            ////Carga los datos
            ////_dt.Rows.Add(Resources.CommonListManage.IdProcess, _idProcess);
            ////_dt.Rows.Add(Resources.CommonListManage.IdTask, _idTask);
            //_dt.Rows.Add(Resources.CommonListManage.Title, _processTask.LanguageOption.Title);
            //_dt.Rows.Add(Resources.CommonListManage.Purpose, _processTask.LanguageOption.Purpose);
            //_dt.Rows.Add(Resources.CommonListManage.Description, _processTask.LanguageOption.Description);
            //_dt.Rows.Add(Resources.CommonListManage.StartDate, _processTask.StartDate);
            //_dt.Rows.Add(Resources.CommonListManage.EndDate, _processTask.EndDate);
            ////_dt.Rows.Add(Resources.CommonListManage.TimeUnitDuration, _processTask.TimeUnitDuration);
            //_dt.Rows.Add(Resources.CommonListManage.Duration, _processTask.Duration + " " + EMSLibrary.User.ProcessFramework.Configuration.TimeUnit(_processTask.TimeUnitDuration).LanguageOption.Name);
            ////_dt.Rows.Add(Resources.CommonListManage.TimeUnitInterval, _processTask.TimeUnitInterval);
            //_dt.Rows.Add(Resources.CommonListManage.Interval, _processTask.Interval + " " + EMSLibrary.User.ProcessFramework.Configuration.TimeUnit(_processTask.TimeUnitInterval).LanguageOption.Name);
            //_dt.Rows.Add(Resources.CommonListManage.MaxNumberExecution, _processTask.MaxNumberExecution);
            //_dt.Rows.Add(Resources.CommonListManage.Result, _processTask.Result);
            //_dt.Rows.Add(Resources.CommonListManage.Completed, _processTask.Completed);
            //_dt.Rows.Add(Resources.CommonListManage.TypeExecution, _processTask.TypeExecution);

            ////Retorna el DataTable.
            //return _dt;
        }
        #endregion

        #region Process Task Operation
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion Process Tasks Operations.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ProcessTaskOperations(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ProcessTaskOperation");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdTask;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdTask", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdProcess;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdProcess", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Title;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Title", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Purpose;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "Purpose", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Description;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            BuildColumnsDataTable(ref _dt, "Description", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.StartDate;
            _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "StartDate", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.EndDate;
            _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "EndDate", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Duration;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Duration", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Interval;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Interval", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.MaxNumberExecution;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "MaxNumberExecution", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Result;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Result", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Completed;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Completed", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.TimeUnitDuration;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "TimeUnitDuration", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.TimeUnitInterval;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "TimeUnitInterval", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.TypeExecution;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "TypeExecution", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.State;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "State", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.TaskType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "TaskType", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            try
            {
                //Cuando implementemos la opcion de traer todo en un filtro.
                if (param.ContainsKey("IdProcess"))
                {
                    Int64 _idProcess;
                    if (param.ContainsKey("IdTask"))
                    {
                        //Si viene el idTask, uso ese!!!
                        _idProcess = Convert.ToInt64(param["IdTask"]);
                    }
                    else
                    {
                        _idProcess = Convert.ToInt64(param["IdProcess"]);
                    }
                    ProcessGroupProcess _processGroupProcess = (ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess);
                    Dictionary<Int64, ProcessTask> _processTasks = _processGroupProcess.ChildrenTask;
                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (_processGroupProcess.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    foreach (ProcessTask _processTask in _processTasks.Values)
                    {
                        String _taskType = _processTask.GetType().Name;
                        if (_taskType == Resources.IconsByEntity.ProcessTaskOperation)
                        {
                            //Cualquier otra cosa...
                            _dt.Rows.Add(_processTask.IdProcess, _idProcess, Common.Functions.ReplaceIndexesTags(_processTask.LanguageOption.Title),
                                _processTask.LanguageOption.Description,
                                _processTask.LanguageOption.Purpose,
                                _processTask.StartDate, _processTask.EndDate, _processTask.Duration, _processTask.Interval,
                                _processTask.MaxNumberExecution, _processTask.Result, _processTask.Completed,
                                _processTask.TimeUnitDuration, _processTask.TimeUnitInterval, _processTask.TypeExecution,
                                _processTask.State, _taskType, _permissionType);
                        }
                    }
                }
            }
            catch { }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del Process Task Operation.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ProcessTaskOperation(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ProcessTaskOperation");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

            Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
            Int64 _idTask = Convert.ToInt64(param["IdTask"]);

            ProcessTask _processTask = ((ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess)).ProcessTask(_idTask);

            //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
            _dt.ExtendedProperties.Add("PageTitle", Common.Functions.ReplaceIndexesTags(_processTask.LanguageOption.Title));

            //Carga los datos
            //_dt.Rows.Add(Resources.CommonListManage.IdProcess, _idProcess);
            //_dt.Rows.Add(Resources.CommonListManage.IdTask, _idTask);
            _dt.Rows.Add(Resources.CommonListManage.Title, _processTask.LanguageOption.Title);
            _dt.Rows.Add(Resources.CommonListManage.Purpose, _processTask.LanguageOption.Purpose);
            _dt.Rows.Add(Resources.CommonListManage.Description, _processTask.LanguageOption.Description);
            _dt.Rows.Add(Resources.CommonListManage.StartDate, _processTask.StartDate);
            _dt.Rows.Add(Resources.CommonListManage.EndDate, _processTask.EndDate);
            _dt.Rows.Add(Resources.CommonListManage.Duration, _processTask.Duration + " " + EMSLibrary.User.ProcessFramework.Configuration.TimeUnit(_processTask.TimeUnitDuration).LanguageOption.Name);
            _dt.Rows.Add(Resources.CommonListManage.Interval, _processTask.Interval + " " + EMSLibrary.User.ProcessFramework.Configuration.TimeUnit(_processTask.TimeUnitInterval).LanguageOption.Name);
            //_dt.Rows.Add(Resources.CommonListManage.TimeUnitDuration, _processTask.TimeUnitDuration);
            //_dt.Rows.Add(Resources.CommonListManage.Duration, _processTask.Duration);
            //_dt.Rows.Add(Resources.CommonListManage.TimeUnitInterval, _processTask.TimeUnitInterval);
            //_dt.Rows.Add(Resources.CommonListManage.Interval, _processTask.Interval);
            _dt.Rows.Add(Resources.CommonListManage.MaxNumberExecution, _processTask.MaxNumberExecution);
            _dt.Rows.Add(Resources.CommonListManage.Result, _processTask.Result);
            _dt.Rows.Add(Resources.CommonListManage.Completed, _processTask.Completed);
            _dt.Rows.Add(Resources.CommonListManage.TypeExecution, _processTask.TypeExecution);

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        
            /// <summary>
            /// Construye el DataTable a modo List con los datos de la Coleccion ProcessAsociatedToFacility.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable ProcessAsociatedToFacility(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable(Common.ConstantsEntitiesName.PF.ProcessAsociatedToFacility);

                //Contruye las columnas y sus atributos.
                ColumnOptions _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdProcess;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdProcess", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdProcessClassification;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdProcessClassification", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Process;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = true;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = true;
                _columnOptions.IsSortedBy = true;
                BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Description;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = true;
                BuildColumnsDataTable(ref _dt, "Description", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

                //Cuando implementemos la opcion de traer todo en un filtro.
                Boolean _showAll = false;
                if (param.ContainsKey("IdFacility"))
                {
                    //Obtiene el Applicability
                    Int64 _idFacility = Convert.ToInt64(param["IdFacility"]);
                    String _permissionType = String.Empty;
                    Facility _facility = (Facility)EMSLibrary.User.GeographicInformationSystem.Site(_idFacility);

                    //Ya esta armado el DataTable, ahora lo carga
                    foreach (ProcessGroupProcess _processGroupProject in _facility.ProcessesAssociated.Values)
                    {
                        //Obtiene el permiso que tiene el usuario para esa organizacion.
                        if (_processGroupProject.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                        { _permissionType = Common.Constants.PermissionManageName; }
                        else
                        { _permissionType = Common.Constants.PermissionViewName; }

                        Int64 _idProccessClassification = 0;
                        if (_processGroupProject.Classifications.Count > 0)
                        { _idProccessClassification = _processGroupProject.Classifications.First().Value.IdProcessClassification; }

                        _dt.Rows.Add(_processGroupProject.IdProcess, _idProccessClassification, Common.Functions.ReplaceIndexesTags(_processGroupProject.LanguageOption.Title), Common.Functions.ReplaceIndexesTags(_processGroupProject.LanguageOption.Description), _permissionType);
                    }
                }
                //Retorna el DataTable
                return _dt;
            }

        #endregion

        #region Risk & Potencial
            #region Risks
                /// <summary>
                /// Construye el DataTable a modo List con los datos de la Coleccion Riesgos.
                /// </summary>
                /// <param name="param">Parametros opcionales para filtrar</param>
                /// <returns>Un <c>DataTable</c></returns>
                public DataTable Risks(Dictionary<String, Object> param)
                {
                    //Construye el datatable
                    DataTable _dt = BuildDataTable("Risks");

                    //Por ahora no tengo nada que mostrar...

                    //Retorna el DataTable
                    return _dt;
                }
                /// <summary>
                /// Construye el DataTable a modo List con los datos de la Coleccion riesgo.
                /// </summary>
                /// <param name="param">Parametros opcionales para filtrar</param>
                /// <returns>Un <c>DataTable</c></returns>
                public DataTable Risk(Dictionary<String, Object> param)
                {
                    //Construye el datatable
                    DataTable _dt = BuildDataTable("Risk");

                    //Por ahora no tengo nada que mostrar...

                    //Retorna el DataTable
                    return _dt;
                }
            #endregion
        #endregion

        #region Security
        private DataTable BuildRightsJobTitlesColumns()
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("RightJobTitles");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdOrganization;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdOrganization", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdGeographicArea;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdGeographicArea", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdFunctionalArea;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdFunctionalArea", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdPosition;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdPosition", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Organization;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Organization", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.JobTitle;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "JobTitle", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Permission;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Permission", _columnOptions);

            //_columnOptions = new ColumnOptions();
            //_columnOptions.ColumnCaption = Resources.CommonListManage.OwnerPermission;
            //_columnOptions.ColumnDataType = System.Type.GetType("System.String");
            //_columnOptions.IsPrimaryKey = false;
            //_columnOptions.DisplayInCombo = false;
            //_columnOptions.DisplayInManage = true;
            //_columnOptions.IsSearchable = false;
            //_columnOptions.AllowNull = false;
            //BuildColumnsDataTable(ref _dt, "OwnerPermission", _columnOptions);

            //_columnOptions = new ColumnOptions();
            //_columnOptions.ColumnCaption = Resources.CommonListManage.RoleType;
            //_columnOptions.ColumnDataType = System.Type.GetType("System.String");
            //_columnOptions.IsPrimaryKey = false;
            //_columnOptions.DisplayInCombo = false;
            //_columnOptions.DisplayInManage = true;
            //_columnOptions.IsSearchable = false;
            //_columnOptions.AllowNull = true;
            //BuildColumnsDataTable(ref _dt, "RoleType", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.ParentEntity;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "ParentEntity", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdPermission;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdPermission", _columnOptions);

            //_columnOptions = new ColumnOptions();
            //_columnOptions.ColumnCaption = Resources.CommonListManage.IdOwnerObject;
            //_columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            //_columnOptions.IsPrimaryKey = true;
            //_columnOptions.DisplayInCombo = false;
            //_columnOptions.DisplayInManage = false;
            //_columnOptions.IsSearchable = false;
            //_columnOptions.AllowNull = false;
            //BuildColumnsDataTable(ref _dt, "IdOwnerObject", _columnOptions);

            //_columnOptions = new ColumnOptions();
            //_columnOptions.ColumnCaption = Resources.CommonListManage.OwnerClassName;
            //_columnOptions.ColumnDataType = System.Type.GetType("System.String");
            //_columnOptions.IsPrimaryKey = true;
            //_columnOptions.DisplayInCombo = false;
            //_columnOptions.DisplayInManage = false;
            //_columnOptions.IsSearchable = false;
            //_columnOptions.AllowNull = false;
            //BuildColumnsDataTable(ref _dt, "OwnerClassName", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            return _dt;
        }
        private DataTable BuildRightsPostsColumns()
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("RightPersons");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdOrganization;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdOrganization", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdPerson;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdPerson", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Organization;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Organization", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Person;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Person", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Permission;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Permission", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.ParentEntity;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "ParentEntity", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdPermission;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdPermission", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            return _dt;
        }

        private void LoadRightJobTitleData(ref DataTable dt, Condesus.EMS.Business.Security.Entities.RightJobTitle rightJobTitle)
        {
            Int16 i = 0;//Se genera este contador, para evitar claves duplicadas, es porque no todos los registros tienen link.            
            Dictionary<String, Object> _valueLink = new Dictionary<String, Object>();
            _valueLink.Add("IdOrganization", rightJobTitle.JobTitle.Organization.IdOrganization);
            _valueLink.Add("IdGeographicArea", rightJobTitle.JobTitle.GeographicFunctionalAreas.GeographicArea.IdGeographicArea);
            _valueLink.Add("IdPosition", rightJobTitle.JobTitle.FunctionalPositions.Position.IdPosition);
            _valueLink.Add("IdFunctionalArea", rightJobTitle.JobTitle.GeographicFunctionalAreas.FunctionalArea.IdFunctionalArea);
            //_valueLink.Add("IdPermission", rightJobTitle.Permission.IdPermission);
            //_valueLink.Add("IdRoleType", rightJobTitle.RoleType.IdRoleType);

            //Carga los datos
            dt.Rows.Add(Resources.CommonListManage.Organization, rightJobTitle.JobTitle.Organization.CorporateName,
                GetValueLink(Common.ConstantsEntitiesName.DS.Organization, _valueLink));
            dt.Rows.Add(Resources.CommonListManage.JobTitle, rightJobTitle.JobTitle.Name(),
                GetValueLink(Common.ConstantsEntitiesName.DS.JobTitle, _valueLink));
            dt.Rows.Add(Resources.CommonListManage.Permission, rightJobTitle.Permission.LanguageOption.Name, "#" + i++);
            //GetValueLink(Common.ConstantsEntitiesName.SS.Permission, _valueLink));
            //dt.Rows.Add(Resources.CommonListManage.OwnerClassName, rightJobTitle.Permission.OwnerPermission.ClassName, "#" + i++);
            //dt.Rows.Add(Resources.CommonListManage.RoleType, rightJobTitle.RoleType.LanguageOption.Name,
            //    GetValueLink(Common.ConstantsEntitiesName.SS.RoleType, _valueLink));
        }
        private void LoadRightPersonData(ref DataTable dt, Condesus.EMS.Business.Security.Entities.RightPerson rightPerson)
        {
            Int16 i = 0;//Se genera este contador, para evitar claves duplicadas, es porque no todos los registros tienen link.            
            Dictionary<String, Object> _valueLink = new Dictionary<String, Object>();
            _valueLink.Add("IdOrganization", rightPerson.Person.Organization.IdOrganization);
            _valueLink.Add("IdPerson", rightPerson.Person.IdPerson);

            //Carga los datos
            dt.Rows.Add(Resources.CommonListManage.Organization, rightPerson.Person.Organization.CorporateName,
                GetValueLink(Common.ConstantsEntitiesName.DS.Organization, _valueLink));
            dt.Rows.Add(Resources.CommonListManage.Person, rightPerson.Person.FullName,
                GetValueLink(Common.ConstantsEntitiesName.DS.Person, _valueLink));
            dt.Rows.Add(Resources.CommonListManage.Permission, rightPerson.Permission.LanguageOption.Name, "#" + i++);
        }

        #region Security Map And Configuration

        #region Map DS
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion RightJobTitlesMapsDS.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightJobTitleMapsDS(Dictionary<String, Object> param)
        {
            DataTable _dt = BuildRightsJobTitlesColumns();

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                String _permissionType = String.Empty;
                //Obtiene el permiso que tiene el usuario para esa organizacion.
                if (EMSLibrary.User.DirectoryServices.Map.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                else
                    { _permissionType = Common.Constants.PermissionViewName; }

                //Ya esta armado el DataTable, ahora lo carga
                foreach (Condesus.EMS.Business.Security.Entities.RightJobTitle _rightJobTitle in EMSLibrary.User.DirectoryServices.Map.SecurityJobTitles())
                {
                    _dt.Rows.Add(_rightJobTitle.JobTitle.Organization.IdOrganization,
                        _rightJobTitle.JobTitle.GeographicFunctionalAreas.GeographicArea.IdGeographicArea,
                        _rightJobTitle.JobTitle.GeographicFunctionalAreas.FunctionalArea.IdFunctionalArea,
                        _rightJobTitle.JobTitle.FunctionalPositions.Position.IdPosition,
                        _rightJobTitle.JobTitle.Organization.Name,
                        _rightJobTitle.JobTitle.Name(),
                        _rightJobTitle.Permission.LanguageOption.Name,
                        //_rightJobTitle.Permission.OwnerPermission.ClassName,
                        //_rightJobTitle.RoleType.LanguageOption.Name,
                        Condesus.EMS.Business.Common.Security.MapDS.ToString(),
                        _rightJobTitle.Permission.IdPermission,
                        //_rightJobTitle.Permission.OwnerPermission.IdObject,
                        //_rightJobTitle.Permission.OwnerPermission.ClassName, 
                        _permissionType);
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del RightJobTitleMapDS.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightJobTitleMapDS(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("RightJobTitles");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            //JT
            Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
            Int64 _idGeographicArea = Convert.ToInt64(param["IdGeographicArea"]);
            Int64 _idFunctionalArea = Convert.ToInt64(param["IdFunctionalArea"]);
            Int64 _idPosition = Convert.ToInt64(param["IdPosition"]);

            //Int64 _idOwnerObject = Convert.ToInt64(param["IdOwnerObject"]);
            Int64 _idPermission = Convert.ToInt64(param["IdPermission"]);
            //String _ownerClassName = Convert.ToString(param["OwnerClassName"]);

            Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
            GeographicArea _geoArea = EMSLibrary.User.GeographicInformationSystem.GeographicArea(_idGeographicArea);
            Position _position = _organization.Position(_idPosition);
            FunctionalArea _funArea = _organization.FunctionalArea(_idFunctionalArea);
            FunctionalPosition _funPos = _organization.FunctionalPosition(_position, _funArea);
            GeographicFunctionalArea _geoFunArea = _organization.GeographicFunctionalArea(_funArea, _geoArea);
            JobTitle _jobTitle = _organization.JobTitle(_geoFunArea, _funPos);

            Condesus.EMS.Business.Security.Entities.Permission _permission = EMSLibrary.User.Security.Permission(_idPermission);
            //JobTitle _jobTitle = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization).JobTitle(_idGeographicArea, _idPosition, _idFunctionalArea);
            Condesus.EMS.Business.Security.Entities.RightJobTitle _rightJobTitle = EMSLibrary.User.DirectoryServices.Map.ReadJobTitleByID(_jobTitle, _permission);

            _dt.ExtendedProperties.Add("PageTitle", _jobTitle.Name());

            //Carga los datos
            LoadRightJobTitleData(ref _dt, _rightJobTitle);

            //Retorna el DataTable.
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion RightPersonMapsDS.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightPersonMapsDS(Dictionary<String, Object> param)
        {
            DataTable _dt = BuildRightsPostsColumns();
            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                String _permissionType = String.Empty;
                //Obtiene el permiso que tiene el usuario para esa organizacion.
                if (EMSLibrary.User.DirectoryServices.Map.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                { _permissionType = Common.Constants.PermissionManageName; }
                else
                { _permissionType = Common.Constants.PermissionViewName; }

                //Ya esta armado el DataTable, ahora lo carga
                foreach (Condesus.EMS.Business.Security.Entities.RightPerson _rightPerson in EMSLibrary.User.DirectoryServices.Map.SecurityPeople())
                {
                    _dt.Rows.Add(_rightPerson.Person.Organization.IdOrganization,
                        _rightPerson.Person.IdPerson,
                        _rightPerson.Person.Organization.Name,
                        _rightPerson.Person.FullName,
                        _rightPerson.Permission.LanguageOption.Name,
                        Condesus.EMS.Business.Common.Security.MapDS,
                        _rightPerson.Permission.IdPermission,
                        _permissionType);
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del RightPersonMapDS.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightPersonMapDS(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("RightPersons");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            //POST
            Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
            Int64 _idPerson = Convert.ToInt64(param["IdPerson"]);

            Int64 _idPermission = Convert.ToInt64(param["IdPermission"]);

            Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
            Person _person = _organization.Person(_idPerson);

            Condesus.EMS.Business.Security.Entities.Permission _permission = EMSLibrary.User.Security.Permission(_idPermission);
            Condesus.EMS.Business.Security.Entities.RightPerson _rightPerson = EMSLibrary.User.DirectoryServices.Map.ReadPersonByID(_person, _permission);

            _dt.ExtendedProperties.Add("PageTitle", _person.FullName);

            //Carga los datos
            LoadRightPersonData(ref _dt, _rightPerson);

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        #region Configuration DS
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion RightJobTitlesConfigurationsDS.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightJobTitleConfigurationsDS(Dictionary<String, Object> param)
        {
            DataTable _dt = BuildRightsJobTitlesColumns();

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                String _permissionType = String.Empty;
                //Obtiene el permiso que tiene el usuario para esa organizacion.
                if (EMSLibrary.User.DirectoryServices.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                { _permissionType = Common.Constants.PermissionManageName; }
                else
                { _permissionType = Common.Constants.PermissionViewName; }

                //Ya esta armado el DataTable, ahora lo carga
                foreach (Condesus.EMS.Business.Security.Entities.RightJobTitle _rightJobTitle in EMSLibrary.User.DirectoryServices.Configuration.SecurityJobTitles())
                {
                    _dt.Rows.Add(_rightJobTitle.JobTitle.Organization.IdOrganization,
                        _rightJobTitle.JobTitle.GeographicFunctionalAreas.GeographicArea.IdGeographicArea,
                        _rightJobTitle.JobTitle.GeographicFunctionalAreas.FunctionalArea.IdFunctionalArea,
                        _rightJobTitle.JobTitle.FunctionalPositions.Position.IdPosition,
                        _rightJobTitle.JobTitle.Organization.Name,
                        _rightJobTitle.JobTitle.Name(),
                        _rightJobTitle.Permission.LanguageOption.Name,
                        //_rightJobTitle.Permission.OwnerPermission.ClassName,
                        //_rightJobTitle.RoleType.LanguageOption.Name,
                        Condesus.EMS.Business.Common.Security.ConfigurationDS.ToString(),
                        _rightJobTitle.Permission.IdPermission,
                        //_rightJobTitle.Permission.OwnerPermission.IdObject,
                        //_rightJobTitle.Permission.OwnerPermission.ClassName, 
                        _permissionType);
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del RightJobTitleConfigurationDS.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightJobTitleConfigurationDS(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("RightJobTitles");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            //JT
            Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
            Int64 _idGeographicArea = Convert.ToInt64(param["IdGeographicArea"]);
            Int64 _idFunctionalArea = Convert.ToInt64(param["IdFunctionalArea"]);
            Int64 _idPosition = Convert.ToInt64(param["IdPosition"]);

            //Int64 _idOwnerObject = Convert.ToInt64(param["IdOwnerObject"]);
            Int64 _idPermission = Convert.ToInt64(param["IdPermission"]);
            //String _ownerClassName = Convert.ToString(param["OwnerClassName"]);

            Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
            GeographicArea _geoArea = EMSLibrary.User.GeographicInformationSystem.GeographicArea(_idGeographicArea);
            Position _position = _organization.Position(_idPosition);
            FunctionalArea _funArea = _organization.FunctionalArea(_idFunctionalArea);
            FunctionalPosition _funPos = _organization.FunctionalPosition(_position, _funArea);
            GeographicFunctionalArea _geoFunArea = _organization.GeographicFunctionalArea(_funArea, _geoArea);
            JobTitle _jobTitle = _organization.JobTitle(_geoFunArea, _funPos);

            //JobTitle _jobTitle = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization).JobTitle(_idGeographicArea, _idPosition, _idFunctionalArea);
            Condesus.EMS.Business.Security.Entities.Permission _permission = EMSLibrary.User.Security.Permission(_idPermission);
            Condesus.EMS.Business.Security.Entities.RightJobTitle _rightJobTitle = EMSLibrary.User.DirectoryServices.Configuration.ReadJobTitleByID(_jobTitle, _permission);

            _dt.ExtendedProperties.Add("PageTitle", _jobTitle.Name());

            //Carga los datos
            LoadRightJobTitleData(ref _dt, _rightJobTitle);

            //Retorna el DataTable.
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion RightPersonConfigurationsDS.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightPersonConfigurationsDS(Dictionary<String, Object> param)
        {
            DataTable _dt = BuildRightsPostsColumns();
            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                String _permissionType = String.Empty;
                //Obtiene el permiso que tiene el usuario para esa organizacion.
                if (EMSLibrary.User.DirectoryServices.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                { _permissionType = Common.Constants.PermissionManageName; }
                else
                { _permissionType = Common.Constants.PermissionViewName; }

                //Ya esta armado el DataTable, ahora lo carga
                foreach (Condesus.EMS.Business.Security.Entities.RightPerson _rightPerson in EMSLibrary.User.DirectoryServices.Configuration.SecurityPeople())
                {
                    _dt.Rows.Add(_rightPerson.Person.Organization.IdOrganization,
                        _rightPerson.Person.IdPerson,
                        _rightPerson.Person.Organization.Name,
                        _rightPerson.Person.FullName,
                        _rightPerson.Permission.LanguageOption.Name,
                        Condesus.EMS.Business.Common.Security.ConfigurationDS,
                        _rightPerson.Permission.IdPermission,
                        _permissionType);
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del RightPersonConfigurationDS.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightPersonConfigurationDS(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("RightPersons");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            //POST
            Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
            Int64 _idPerson = Convert.ToInt64(param["IdPerson"]);
            Int64 _idPermission = Convert.ToInt64(param["IdPermission"]);

            Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
            Person _person = _organization.Person(_idPerson);
            Condesus.EMS.Business.Security.Entities.Permission _permission = EMSLibrary.User.Security.Permission(_idPermission);
            Condesus.EMS.Business.Security.Entities.RightPerson _rightPerson = EMSLibrary.User.DirectoryServices.Configuration.ReadPersonByID(_person, _permission);

            _dt.ExtendedProperties.Add("PageTitle", _person.FullName);

            //Carga los datos
            LoadRightPersonData(ref _dt, _rightPerson);
            
            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        #region Map PA
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion RightJobTitlesMapsPA.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightJobTitleMapsPA(Dictionary<String, Object> param)
        {
            DataTable _dt = BuildRightsJobTitlesColumns();

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                String _permissionType = String.Empty;
                //Obtiene el permiso que tiene el usuario para esa organizacion.
                if (EMSLibrary.User.PerformanceAssessments.Map.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                { _permissionType = Common.Constants.PermissionManageName; }
                else
                { _permissionType = Common.Constants.PermissionViewName; }

                //Ya esta armado el DataTable, ahora lo carga
                foreach (Condesus.EMS.Business.Security.Entities.RightJobTitle _rightJobTitle in EMSLibrary.User.PerformanceAssessments.Map.SecurityJobTitles())
                {
                    _dt.Rows.Add(_rightJobTitle.JobTitle.Organization.IdOrganization,
                        _rightJobTitle.JobTitle.GeographicFunctionalAreas.GeographicArea.IdGeographicArea,
                        _rightJobTitle.JobTitle.GeographicFunctionalAreas.FunctionalArea.IdFunctionalArea,
                        _rightJobTitle.JobTitle.FunctionalPositions.Position.IdPosition,
                        _rightJobTitle.JobTitle.Organization.Name,
                        _rightJobTitle.JobTitle.Name(),
                        _rightJobTitle.Permission.LanguageOption.Name,
                        //_rightJobTitle.Permission.OwnerPermission.ClassName,
                        Condesus.EMS.Business.Common.Security.MapPA,
                        _rightJobTitle.Permission.IdPermission,
                        //_rightJobTitle.Permission.OwnerPermission.IdObject,
                        //_rightJobTitle.Permission.OwnerPermission.ClassName, 
                        _permissionType);
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del RightJobTitleMapPA.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightJobTitleMapPA(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("RightJobTitles");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            //JT
            Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
            Int64 _idGeographicArea = Convert.ToInt64(param["IdGeographicArea"]);
            Int64 _idFunctionalArea = Convert.ToInt64(param["IdFunctionalArea"]);
            Int64 _idPosition = Convert.ToInt64(param["IdPosition"]);

            //Int64 _idOwnerObject = Convert.ToInt64(param["IdOwnerObject"]);
            Int64 _idPermission = Convert.ToInt64(param["IdPermission"]);
            //String _ownerClassName = Convert.ToString(param["OwnerClassName"]);

            Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
            GeographicArea _geoArea = EMSLibrary.User.GeographicInformationSystem.GeographicArea(_idGeographicArea);
            Position _position = _organization.Position(_idPosition);
            FunctionalArea _funArea = _organization.FunctionalArea(_idFunctionalArea);
            FunctionalPosition _funPos = _organization.FunctionalPosition(_position, _funArea);
            GeographicFunctionalArea _geoFunArea = _organization.GeographicFunctionalArea(_funArea, _geoArea);
            JobTitle _jobTitle = _organization.JobTitle(_geoFunArea, _funPos);
            
            Condesus.EMS.Business.Security.Entities.Permission _permission = EMSLibrary.User.Security.Permission(_idPermission);
            Condesus.EMS.Business.Security.Entities.RightJobTitle _rightJobTitle = EMSLibrary.User.PerformanceAssessments.Map.ReadJobTitleByID(_jobTitle, _permission);

            _dt.ExtendedProperties.Add("PageTitle", _jobTitle.Name());

            //Carga los datos
            LoadRightJobTitleData(ref _dt, _rightJobTitle);
            
            //Retorna el DataTable.
            return _dt;
        }     
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion RightPersonMapsPA.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightPersonMapsPA(Dictionary<String, Object> param)
        {
            DataTable _dt = BuildRightsPostsColumns();
            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                String _permissionType = String.Empty;
                //Obtiene el permiso que tiene el usuario para esa organizacion.
                if (EMSLibrary.User.PerformanceAssessments.Map.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                { _permissionType = Common.Constants.PermissionManageName; }
                else
                { _permissionType = Common.Constants.PermissionViewName; }

                //Ya esta armado el DataTable, ahora lo carga
                foreach (Condesus.EMS.Business.Security.Entities.RightPerson _rightPerson in EMSLibrary.User.PerformanceAssessments.Map.SecurityPeople())
                {
                    _dt.Rows.Add(_rightPerson.Person.Organization.IdOrganization,
                        _rightPerson.Person.IdPerson,
                        _rightPerson.Person.Organization.Name,
                        _rightPerson.Person.FullName,
                        _rightPerson.Permission.LanguageOption.Name,
                        Condesus.EMS.Business.Common.Security.MapPA,
                        _rightPerson.Permission.IdPermission,
                        _permissionType);
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del RightPersonMapPA.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightPersonMapPA(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("RightPersons");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            //POST
            Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
            Int64 _idPerson = Convert.ToInt64(param["IdPerson"]);
            Int64 _idPermission = Convert.ToInt64(param["IdPermission"]);

            Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
            Person _person = _organization.Person(_idPerson);
            Condesus.EMS.Business.Security.Entities.Permission _permission = EMSLibrary.User.Security.Permission(_idPermission);
            Condesus.EMS.Business.Security.Entities.RightPerson _rightPerson = EMSLibrary.User.PerformanceAssessments.Map.ReadPersonByID(_person, _permission);

            _dt.ExtendedProperties.Add("PageTitle", _person.FullName);

            //Carga los datos
            LoadRightPersonData(ref _dt, _rightPerson);

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        #region Configuration PA
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion RightJobTitlesConfigurationsPA.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightJobTitleConfigurationsPA(Dictionary<String, Object> param)
        {
            DataTable _dt = BuildRightsJobTitlesColumns();

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                String _permissionType = String.Empty;
                //Obtiene el permiso que tiene el usuario para esa organizacion.
                if (EMSLibrary.User.PerformanceAssessments.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                { _permissionType = Common.Constants.PermissionManageName; }
                else
                { _permissionType = Common.Constants.PermissionViewName; }

                //Ya esta armado el DataTable, ahora lo carga
                foreach (Condesus.EMS.Business.Security.Entities.RightJobTitle _rightJobTitle in EMSLibrary.User.PerformanceAssessments.Configuration.SecurityJobTitles())
                {
                    _dt.Rows.Add(_rightJobTitle.JobTitle.Organization.IdOrganization,
                        _rightJobTitle.JobTitle.GeographicFunctionalAreas.GeographicArea.IdGeographicArea,
                        _rightJobTitle.JobTitle.GeographicFunctionalAreas.FunctionalArea.IdFunctionalArea,
                        _rightJobTitle.JobTitle.FunctionalPositions.Position.IdPosition,
                        _rightJobTitle.JobTitle.Organization.Name,
                        _rightJobTitle.JobTitle.Name(),
                        _rightJobTitle.Permission.LanguageOption.Name,
                        //_rightJobTitle.Permission.OwnerPermission.ClassName,
                        //_rightJobTitle.RoleType.LanguageOption.Name,
                        Condesus.EMS.Business.Common.Security.ConfigurationPA.ToString(),
                        _rightJobTitle.Permission.IdPermission,
                        //_rightJobTitle.Permission.OwnerPermission.IdObject,
                        //_rightJobTitle.Permission.OwnerPermission.ClassName, 
                        _permissionType);
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del RightJobTitleConfigurationPA.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightJobTitleConfigurationPA(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("RightJobTitles");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            //JT
            Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
            Int64 _idGeographicArea = Convert.ToInt64(param["IdGeographicArea"]);
            Int64 _idFunctionalArea = Convert.ToInt64(param["IdFunctionalArea"]);
            Int64 _idPosition = Convert.ToInt64(param["IdPosition"]);

            //Int64 _idOwnerObject = Convert.ToInt64(param["IdOwnerObject"]);
            Int64 _idPermission = Convert.ToInt64(param["IdPermission"]);
            //String _ownerClassName = Convert.ToString(param["OwnerClassName"]);

            Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
            GeographicArea _geoArea = EMSLibrary.User.GeographicInformationSystem.GeographicArea(_idGeographicArea);
            Position _position = _organization.Position(_idPosition);
            FunctionalArea _funArea = _organization.FunctionalArea(_idFunctionalArea);
            FunctionalPosition _funPos = _organization.FunctionalPosition(_position, _funArea);
            GeographicFunctionalArea _geoFunArea = _organization.GeographicFunctionalArea(_funArea, _geoArea);
            JobTitle _jobTitle = _organization.JobTitle(_geoFunArea, _funPos);

            Condesus.EMS.Business.Security.Entities.Permission _permission = EMSLibrary.User.Security.Permission(_idPermission);
            Condesus.EMS.Business.Security.Entities.RightJobTitle _rightJobTitle = EMSLibrary.User.PerformanceAssessments.Configuration.ReadJobTitleByID(_jobTitle, _permission);

            _dt.ExtendedProperties.Add("PageTitle", _jobTitle.Name());

            //Carga los datos
            LoadRightJobTitleData(ref _dt, _rightJobTitle);

            //Retorna el DataTable.
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion RightPersonConfigurationsPA.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightPersonConfigurationsPA(Dictionary<String, Object> param)
        {
            DataTable _dt = BuildRightsPostsColumns();
            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                String _permissionType = String.Empty;
                //Obtiene el permiso que tiene el usuario para esa organizacion.
                if (EMSLibrary.User.PerformanceAssessments.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                { _permissionType = Common.Constants.PermissionManageName; }
                else
                { _permissionType = Common.Constants.PermissionViewName; }

                //Ya esta armado el DataTable, ahora lo carga
                foreach (Condesus.EMS.Business.Security.Entities.RightPerson _rightPerson in EMSLibrary.User.PerformanceAssessments.Configuration.SecurityPeople())
                {
                    _dt.Rows.Add(_rightPerson.Person.Organization.IdOrganization,
                        _rightPerson.Person.IdPerson,
                        _rightPerson.Person.Organization.Name,
                        _rightPerson.Person.FullName,
                        _rightPerson.Permission.LanguageOption.Name,
                        Condesus.EMS.Business.Common.Security.ConfigurationPA,
                        _rightPerson.Permission.IdPermission,
                        _permissionType);
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del RightPersonConfigurationPA.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightPersonConfigurationPA(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("RightPersons");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            //POST
            Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
            Int64 _idPerson = Convert.ToInt64(param["IdPerson"]);
            Int64 _idPermission = Convert.ToInt64(param["IdPermission"]);

            Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
            Person _person = _organization.Person(_idPerson);
            Condesus.EMS.Business.Security.Entities.Permission _permission = EMSLibrary.User.Security.Permission(_idPermission);
            Condesus.EMS.Business.Security.Entities.RightPerson _rightPerson = EMSLibrary.User.PerformanceAssessments.Configuration.ReadPersonByID(_person, _permission);

            _dt.ExtendedProperties.Add("PageTitle", _person.FullName);

            //Carga los datos
            LoadRightPersonData(ref _dt, _rightPerson);

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        #region Map PF
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion RightJobTitlesMapsPF.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightJobTitleMapsPF(Dictionary<String, Object> param)
        {
            DataTable _dt = BuildRightsJobTitlesColumns();

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                String _permissionType = String.Empty;
                //Obtiene el permiso que tiene el usuario para esa organizacion.
                if (EMSLibrary.User.ProcessFramework.Map.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                { _permissionType = Common.Constants.PermissionManageName; }
                else
                { _permissionType = Common.Constants.PermissionViewName; }

                //Ya esta armado el DataTable, ahora lo carga
                foreach (Condesus.EMS.Business.Security.Entities.RightJobTitle _rightJobTitle in EMSLibrary.User.ProcessFramework.Map.SecurityJobTitles())
                {
                    _dt.Rows.Add(_rightJobTitle.JobTitle.Organization.IdOrganization,
                        _rightJobTitle.JobTitle.GeographicFunctionalAreas.GeographicArea.IdGeographicArea,
                        _rightJobTitle.JobTitle.GeographicFunctionalAreas.FunctionalArea.IdFunctionalArea,
                        _rightJobTitle.JobTitle.FunctionalPositions.Position.IdPosition,
                        _rightJobTitle.JobTitle.Organization.Name,
                        _rightJobTitle.JobTitle.Name(),
                        _rightJobTitle.Permission.LanguageOption.Name,
                        //_rightJobTitle.Permission.OwnerPermission.ClassName,
                        //_rightJobTitle.RoleType.LanguageOption.Name,
                        Condesus.EMS.Business.Common.Security.MapPF,
                        _rightJobTitle.Permission.IdPermission,
                        //_rightJobTitle.Permission.OwnerPermission.IdObject,
                        //_rightJobTitle.Permission.OwnerPermission.ClassName, 
                        _permissionType);
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del RightJobTitleMapPF.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightJobTitleMapPF(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("RightJobTitles");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            //JT
            Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
            Int64 _idGeographicArea = Convert.ToInt64(param["IdGeographicArea"]);
            Int64 _idFunctionalArea = Convert.ToInt64(param["IdFunctionalArea"]);
            Int64 _idPosition = Convert.ToInt64(param["IdPosition"]);

            //Int64 _idOwnerObject = Convert.ToInt64(param["IdOwnerObject"]);
            Int64 _idPermission = Convert.ToInt64(param["IdPermission"]);
            //String _ownerClassName = Convert.ToString(param["OwnerClassName"]);

            Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
            GeographicArea _geoArea = EMSLibrary.User.GeographicInformationSystem.GeographicArea(_idGeographicArea);
            Position _position = _organization.Position(_idPosition);
            FunctionalArea _funArea = _organization.FunctionalArea(_idFunctionalArea);
            FunctionalPosition _funPos = _organization.FunctionalPosition(_position, _funArea);
            GeographicFunctionalArea _geoFunArea = _organization.GeographicFunctionalArea(_funArea, _geoArea);
            JobTitle _jobTitle = _organization.JobTitle(_geoFunArea, _funPos);

            Condesus.EMS.Business.Security.Entities.Permission _permission = EMSLibrary.User.Security.Permission(_idPermission);
            Condesus.EMS.Business.Security.Entities.RightJobTitle _rightJobTitle = EMSLibrary.User.ProcessFramework.Map.ReadJobTitleByID(_jobTitle, _permission);

            _dt.ExtendedProperties.Add("PageTitle", _jobTitle.Name());

            //Carga los datos
            LoadRightJobTitleData(ref _dt, _rightJobTitle);

            //Retorna el DataTable.
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion RightPersonMapsPF.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightPersonMapsPF(Dictionary<String, Object> param)
        {
            DataTable _dt = BuildRightsPostsColumns();
            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                String _permissionType = String.Empty;
                //Obtiene el permiso que tiene el usuario para esa organizacion.
                if (EMSLibrary.User.ProcessFramework.Map.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                { _permissionType = Common.Constants.PermissionManageName; }
                else
                { _permissionType = Common.Constants.PermissionViewName; }

                //Ya esta armado el DataTable, ahora lo carga
                foreach (Condesus.EMS.Business.Security.Entities.RightPerson _rightPerson in EMSLibrary.User.ProcessFramework.Map.SecurityPeople())
                {
                    _dt.Rows.Add(_rightPerson.Person.Organization.IdOrganization,
                        _rightPerson.Person.IdPerson,
                        _rightPerson.Person.Organization.Name,
                        _rightPerson.Person.FullName,
                        _rightPerson.Permission.LanguageOption.Name,
                        Condesus.EMS.Business.Common.Security.MapPF,
                        _rightPerson.Permission.IdPermission,
                        _permissionType);
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del RightPersonMapPF.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightPersonMapPF(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("RightPersons");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            //POST
            Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
            Int64 _idPerson = Convert.ToInt64(param["IdPerson"]);
            Int64 _idPermission = Convert.ToInt64(param["IdPermission"]);

            Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
            Person _person = _organization.Person(_idPerson);
            Condesus.EMS.Business.Security.Entities.Permission _permission = EMSLibrary.User.Security.Permission(_idPermission);
            Condesus.EMS.Business.Security.Entities.RightPerson _rightPerson = EMSLibrary.User.ProcessFramework.Map.ReadPersonByID(_person, _permission);

            _dt.ExtendedProperties.Add("PageTitle", _person.FullName);

            //Carga los datos
            LoadRightPersonData(ref _dt, _rightPerson);

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        #region Configuration PF
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion RightJobTitlesConfigurationsPF.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightJobTitleConfigurationsPF(Dictionary<String, Object> param)
        {
            DataTable _dt = BuildRightsJobTitlesColumns();

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                String _permissionType = String.Empty;
                //Obtiene el permiso que tiene el usuario para esa organizacion.
                if (EMSLibrary.User.ProcessFramework.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                { _permissionType = Common.Constants.PermissionManageName; }
                else
                { _permissionType = Common.Constants.PermissionViewName; }

                //Ya esta armado el DataTable, ahora lo carga
                foreach (Condesus.EMS.Business.Security.Entities.RightJobTitle _rightJobTitle in EMSLibrary.User.ProcessFramework.Configuration.SecurityJobTitles())
                {
                    _dt.Rows.Add(_rightJobTitle.JobTitle.Organization.IdOrganization,
                        _rightJobTitle.JobTitle.GeographicFunctionalAreas.GeographicArea.IdGeographicArea,
                        _rightJobTitle.JobTitle.GeographicFunctionalAreas.FunctionalArea.IdFunctionalArea,
                        _rightJobTitle.JobTitle.FunctionalPositions.Position.IdPosition,
                        _rightJobTitle.JobTitle.Organization.Name,
                        _rightJobTitle.JobTitle.Name(),
                        _rightJobTitle.Permission.LanguageOption.Name,
                        //_rightJobTitle.Permission.OwnerPermission.ClassName,
                        //_rightJobTitle.RoleType.LanguageOption.Name,
                        Condesus.EMS.Business.Common.Security.ConfigurationPF.ToString(),
                        _rightJobTitle.Permission.IdPermission,
                        //_rightJobTitle.Permission.OwnerPermission.IdObject,
                        //_rightJobTitle.Permission.OwnerPermission.ClassName, 
                        _permissionType);
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del RightJobTitleConfigurationPF.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightJobTitleConfigurationPF(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("RightJobTitles");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            //JT
            Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
            Int64 _idGeographicArea = Convert.ToInt64(param["IdGeographicArea"]);
            Int64 _idFunctionalArea = Convert.ToInt64(param["IdFunctionalArea"]);
            Int64 _idPosition = Convert.ToInt64(param["IdPosition"]);

            //Int64 _idOwnerObject = Convert.ToInt64(param["IdOwnerObject"]);
            Int64 _idPermission = Convert.ToInt64(param["IdPermission"]);
            //String _ownerClassName = Convert.ToString(param["OwnerClassName"]);

            Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
            GeographicArea _geoArea = EMSLibrary.User.GeographicInformationSystem.GeographicArea(_idGeographicArea);
            Position _position = _organization.Position(_idPosition);
            FunctionalArea _funArea = _organization.FunctionalArea(_idFunctionalArea);
            FunctionalPosition _funPos = _organization.FunctionalPosition(_position, _funArea);
            GeographicFunctionalArea _geoFunArea = _organization.GeographicFunctionalArea(_funArea, _geoArea);
            JobTitle _jobTitle = _organization.JobTitle(_geoFunArea, _funPos);

            Condesus.EMS.Business.Security.Entities.Permission _permission = EMSLibrary.User.Security.Permission(_idPermission);
            Condesus.EMS.Business.Security.Entities.RightJobTitle _rightJobTitle = EMSLibrary.User.ProcessFramework.Configuration.ReadJobTitleByID(_jobTitle, _permission);

            _dt.ExtendedProperties.Add("PageTitle", _jobTitle.Name());

            //Carga los datos
            LoadRightJobTitleData(ref _dt, _rightJobTitle);

            //Retorna el DataTable.
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion RightPersonConfigurationsPF.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightPersonConfigurationsPF(Dictionary<String, Object> param)
        {
            DataTable _dt = BuildRightsPostsColumns();
            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                String _permissionType = String.Empty;
                //Obtiene el permiso que tiene el usuario para esa organizacion.
                if (EMSLibrary.User.ProcessFramework.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                { _permissionType = Common.Constants.PermissionManageName; }
                else
                { _permissionType = Common.Constants.PermissionViewName; }

                //Ya esta armado el DataTable, ahora lo carga
                foreach (Condesus.EMS.Business.Security.Entities.RightPerson _rightPerson in EMSLibrary.User.ProcessFramework.Configuration.SecurityPeople())
                {
                    _dt.Rows.Add(_rightPerson.Person.Organization.IdOrganization,
                        _rightPerson.Person.IdPerson,
                        _rightPerson.Person.Organization.Name,
                        _rightPerson.Person.FullName,
                        _rightPerson.Permission.LanguageOption.Name,
                        Condesus.EMS.Business.Common.Security.ConfigurationPF,
                        _rightPerson.Permission.IdPermission,
                        _permissionType);
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del RightPersonConfigurationPF.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightPersonConfigurationPF(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("RightPersons");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            //POST
            Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
            Int64 _idPerson = Convert.ToInt64(param["IdPerson"]);
            Int64 _idPermission = Convert.ToInt64(param["IdPermission"]);

            Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
            Person _person = _organization.Person(_idPerson);
            Condesus.EMS.Business.Security.Entities.Permission _permission = EMSLibrary.User.Security.Permission(_idPermission);
            Condesus.EMS.Business.Security.Entities.RightPerson _rightPerson = EMSLibrary.User.ProcessFramework.Configuration.ReadPersonByID(_person, _permission);

            _dt.ExtendedProperties.Add("PageTitle", _person.FullName);

            //Carga los datos
            LoadRightPersonData(ref _dt, _rightPerson);

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        #region Map KC
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion RightJobTitlesMapsKC.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightJobTitleMapsKC(Dictionary<String, Object> param)
        {
            DataTable _dt = BuildRightsJobTitlesColumns();

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                String _permissionType = String.Empty;
                //Obtiene el permiso que tiene el usuario para esa organizacion.
                if (EMSLibrary.User.KnowledgeCollaboration.Map.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                { _permissionType = Common.Constants.PermissionManageName; }
                else
                { _permissionType = Common.Constants.PermissionViewName; }

                //Ya esta armado el DataTable, ahora lo carga
                foreach (Condesus.EMS.Business.Security.Entities.RightJobTitle _rightJobTitle in EMSLibrary.User.KnowledgeCollaboration.Map.SecurityJobTitles())
                {
                    _dt.Rows.Add(_rightJobTitle.JobTitle.Organization.IdOrganization,
                        _rightJobTitle.JobTitle.GeographicFunctionalAreas.GeographicArea.IdGeographicArea,
                        _rightJobTitle.JobTitle.GeographicFunctionalAreas.FunctionalArea.IdFunctionalArea,
                        _rightJobTitle.JobTitle.FunctionalPositions.Position.IdPosition,
                        _rightJobTitle.JobTitle.Organization.Name,
                        _rightJobTitle.JobTitle.Name(),
                        _rightJobTitle.Permission.LanguageOption.Name,
                        //_rightJobTitle.Permission.OwnerPermission.ClassName,
                        //_rightJobTitle.RoleType.LanguageOption.Name,
                        Condesus.EMS.Business.Common.Security.MapKC,
                        _rightJobTitle.Permission.IdPermission,
                        //_rightJobTitle.Permission.OwnerPermission.IdObject,
                        //_rightJobTitle.Permission.OwnerPermission.ClassName, 
                        _permissionType);
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del RightJobTitleMapKC.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightJobTitleMapKC(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("RightJobTitles");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            //JT
            Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
            Int64 _idGeographicArea = Convert.ToInt64(param["IdGeographicArea"]);
            Int64 _idFunctionalArea = Convert.ToInt64(param["IdFunctionalArea"]);
            Int64 _idPosition = Convert.ToInt64(param["IdPosition"]);

            //Int64 _idOwnerObject = Convert.ToInt64(param["IdOwnerObject"]);
            Int64 _idPermission = Convert.ToInt64(param["IdPermission"]);
            //String _ownerClassName = Convert.ToString(param["OwnerClassName"]);

            Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
            GeographicArea _geoArea = EMSLibrary.User.GeographicInformationSystem.GeographicArea(_idGeographicArea);
            Position _position = _organization.Position(_idPosition);
            FunctionalArea _funArea = _organization.FunctionalArea(_idFunctionalArea);
            FunctionalPosition _funPos = _organization.FunctionalPosition(_position, _funArea);
            GeographicFunctionalArea _geoFunArea = _organization.GeographicFunctionalArea(_funArea, _geoArea);
            JobTitle _jobTitle = _organization.JobTitle(_geoFunArea, _funPos);

            Condesus.EMS.Business.Security.Entities.Permission _permission = EMSLibrary.User.Security.Permission(_idPermission);
            Condesus.EMS.Business.Security.Entities.RightJobTitle _rightJobTitle = EMSLibrary.User.KnowledgeCollaboration.Map.ReadJobTitleByID(_jobTitle, _permission);

            _dt.ExtendedProperties.Add("PageTitle", _jobTitle.Name());

            //Carga los datos
            LoadRightJobTitleData(ref _dt, _rightJobTitle);

            //Retorna el DataTable.
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion RightPersonMapsKC.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightPersonMapsKC(Dictionary<String, Object> param)
        {
            DataTable _dt = BuildRightsPostsColumns();
            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                String _permissionType = String.Empty;
                //Obtiene el permiso que tiene el usuario para esa organizacion.
                if (EMSLibrary.User.KnowledgeCollaboration.Map.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                { _permissionType = Common.Constants.PermissionManageName; }
                else
                { _permissionType = Common.Constants.PermissionViewName; }

                //Ya esta armado el DataTable, ahora lo carga
                foreach (Condesus.EMS.Business.Security.Entities.RightPerson _rightPerson in EMSLibrary.User.KnowledgeCollaboration.Map.SecurityPeople())
                {
                    _dt.Rows.Add(_rightPerson.Person.Organization.IdOrganization,
                        _rightPerson.Person.IdPerson,
                        _rightPerson.Person.Organization.Name,
                        _rightPerson.Person.FullName,
                        _rightPerson.Permission.LanguageOption.Name,
                        Condesus.EMS.Business.Common.Security.MapKC,
                        _rightPerson.Permission.IdPermission,
                        _permissionType);
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del RightPersonMapKC.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightPersonMapKC(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("RightPersons");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            //POST
            Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
            Int64 _idPerson = Convert.ToInt64(param["IdPerson"]);
            Int64 _idPermission = Convert.ToInt64(param["IdPermission"]);

            Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
            Person _person = _organization.Person(_idPerson);
            Condesus.EMS.Business.Security.Entities.Permission _permission = EMSLibrary.User.Security.Permission(_idPermission);
            Condesus.EMS.Business.Security.Entities.RightPerson _rightPerson = EMSLibrary.User.KnowledgeCollaboration.Map.ReadPersonByID(_person, _permission);

            _dt.ExtendedProperties.Add("PageTitle", _person.FullName);

            //Carga los datos
            LoadRightPersonData(ref _dt, _rightPerson);

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        #region Configuration KC
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion RightJobTitlesConfigurationsKC.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightJobTitleConfigurationsKC(Dictionary<String, Object> param)
        {
            DataTable _dt = BuildRightsJobTitlesColumns();

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                String _permissionType = String.Empty;
                //Obtiene el permiso que tiene el usuario para esa organizacion.
                if (EMSLibrary.User.KnowledgeCollaboration.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                { _permissionType = Common.Constants.PermissionManageName; }
                else
                { _permissionType = Common.Constants.PermissionViewName; }

                //Ya esta armado el DataTable, ahora lo carga
                foreach (Condesus.EMS.Business.Security.Entities.RightJobTitle _rightJobTitle in EMSLibrary.User.KnowledgeCollaboration.Configuration.SecurityJobTitles())
                {
                    _dt.Rows.Add(_rightJobTitle.JobTitle.Organization.IdOrganization,
                        _rightJobTitle.JobTitle.GeographicFunctionalAreas.GeographicArea.IdGeographicArea,
                        _rightJobTitle.JobTitle.GeographicFunctionalAreas.FunctionalArea.IdFunctionalArea,
                        _rightJobTitle.JobTitle.FunctionalPositions.Position.IdPosition,
                        _rightJobTitle.JobTitle.Organization.Name,
                        _rightJobTitle.JobTitle.Name(),
                        _rightJobTitle.Permission.LanguageOption.Name,
                        //_rightJobTitle.Permission.OwnerPermission.ClassName,
                        //_rightJobTitle.RoleType.LanguageOption.Name,
                        Condesus.EMS.Business.Common.Security.ConfigurationKC,
                        _rightJobTitle.Permission.IdPermission,
                        //_rightJobTitle.Permission.OwnerPermission.IdObject,
                        //_rightJobTitle.Permission.OwnerPermission.ClassName, 
                        _permissionType);
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del RightJobTitleConfigurationKC.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightJobTitleConfigurationKC(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("RightJobTitles");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            //JT
            Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
            Int64 _idGeographicArea = Convert.ToInt64(param["IdGeographicArea"]);
            Int64 _idFunctionalArea = Convert.ToInt64(param["IdFunctionalArea"]);
            Int64 _idPosition = Convert.ToInt64(param["IdPosition"]);

            //Int64 _idOwnerObject = Convert.ToInt64(param["IdOwnerObject"]);
            Int64 _idPermission = Convert.ToInt64(param["IdPermission"]);
            //String _ownerClassName = Convert.ToString(param["OwnerClassName"]);

            Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
            GeographicArea _geoArea = EMSLibrary.User.GeographicInformationSystem.GeographicArea(_idGeographicArea);
            Position _position = _organization.Position(_idPosition);
            FunctionalArea _funArea = _organization.FunctionalArea(_idFunctionalArea);
            FunctionalPosition _funPos = _organization.FunctionalPosition(_position, _funArea);
            GeographicFunctionalArea _geoFunArea = _organization.GeographicFunctionalArea(_funArea, _geoArea);
            JobTitle _jobTitle = _organization.JobTitle(_geoFunArea, _funPos);

            Condesus.EMS.Business.Security.Entities.Permission _permission = EMSLibrary.User.Security.Permission(_idPermission);
            Condesus.EMS.Business.Security.Entities.RightJobTitle _rightJobTitle = EMSLibrary.User.KnowledgeCollaboration.Configuration.ReadJobTitleByID(_jobTitle, _permission);

            _dt.ExtendedProperties.Add("PageTitle", _jobTitle.Name());

            //Carga los datos
            LoadRightJobTitleData(ref _dt, _rightJobTitle);

            //Retorna el DataTable.
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion RightPersonConfigurationsKC.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightPersonConfigurationsKC(Dictionary<String, Object> param)
        {
            DataTable _dt = BuildRightsPostsColumns();
            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                String _permissionType = String.Empty;
                //Obtiene el permiso que tiene el usuario para esa organizacion.
                if (EMSLibrary.User.KnowledgeCollaboration.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                { _permissionType = Common.Constants.PermissionManageName; }
                else
                { _permissionType = Common.Constants.PermissionViewName; }

                //Ya esta armado el DataTable, ahora lo carga
                foreach (Condesus.EMS.Business.Security.Entities.RightPerson _rightPerson in EMSLibrary.User.KnowledgeCollaboration.Configuration.SecurityPeople())
                {
                    _dt.Rows.Add(_rightPerson.Person.Organization.IdOrganization,
                        _rightPerson.Person.IdPerson,
                        _rightPerson.Person.Organization.Name,
                        _rightPerson.Person.FullName,
                        _rightPerson.Permission.LanguageOption.Name,
                        Condesus.EMS.Business.Common.Security.ConfigurationKC,
                        _rightPerson.Permission.IdPermission,
                        _permissionType);
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del RightPersonConfigurationKC.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightPersonConfigurationKC(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("RightPersons");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            //POST
            Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
            Int64 _idPerson = Convert.ToInt64(param["IdPerson"]);
            Int64 _idPermission = Convert.ToInt64(param["IdPermission"]);

            Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
            Condesus.EMS.Business.Security.Entities.Permission _permission = EMSLibrary.User.Security.Permission(_idPermission);
            Person _person = _organization.Person(_idPerson);
            Condesus.EMS.Business.Security.Entities.RightPerson _rightPerson = EMSLibrary.User.KnowledgeCollaboration.Configuration.ReadPersonByID(_person, _permission);

            _dt.ExtendedProperties.Add("PageTitle", _person.FullName);

            //Carga los datos
            LoadRightPersonData(ref _dt, _rightPerson);

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        #region Map IA
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion RightJobTitlesMapsIA.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightJobTitleMapsIA(Dictionary<String, Object> param)
        {
            DataTable _dt = BuildRightsJobTitlesColumns();

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                String _permissionType = String.Empty;
                //Obtiene el permiso que tiene el usuario para esa organizacion.
                if (EMSLibrary.User.ImprovementAction.Map.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                { _permissionType = Common.Constants.PermissionManageName; }
                else
                { _permissionType = Common.Constants.PermissionViewName; }

                //Ya esta armado el DataTable, ahora lo carga
                foreach (Condesus.EMS.Business.Security.Entities.RightJobTitle _rightJobTitle in EMSLibrary.User.ImprovementAction.Map.SecurityJobTitles())
                {
                    _dt.Rows.Add(_rightJobTitle.JobTitle.Organization.IdOrganization,
                        _rightJobTitle.JobTitle.GeographicFunctionalAreas.GeographicArea.IdGeographicArea,
                        _rightJobTitle.JobTitle.GeographicFunctionalAreas.FunctionalArea.IdFunctionalArea,
                        _rightJobTitle.JobTitle.FunctionalPositions.Position.IdPosition,
                        _rightJobTitle.JobTitle.Organization.Name,
                        _rightJobTitle.JobTitle.Name(),
                        _rightJobTitle.Permission.LanguageOption.Name,
                        //_rightJobTitle.Permission.OwnerPermission.ClassName,
                        //_rightJobTitle.RoleType.LanguageOption.Name,
                        Condesus.EMS.Business.Common.Security.MapIA,
                        _rightJobTitle.Permission.IdPermission,
                        //_rightJobTitle.Permission.OwnerPermission.IdObject,
                        //_rightJobTitle.Permission.OwnerPermission.ClassName, 
                        _permissionType);
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del RightJobTitleMapIA.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightJobTitleMapIA(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("RightJobTitles");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            //JT
            Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
            Int64 _idGeographicArea = Convert.ToInt64(param["IdGeographicArea"]);
            Int64 _idFunctionalArea = Convert.ToInt64(param["IdFunctionalArea"]);
            Int64 _idPosition = Convert.ToInt64(param["IdPosition"]);

            //Int64 _idOwnerObject = Convert.ToInt64(param["IdOwnerObject"]);
            Int64 _idPermission = Convert.ToInt64(param["IdPermission"]);
            //String _ownerClassName = Convert.ToString(param["OwnerClassName"]);

            Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
            GeographicArea _geoArea = EMSLibrary.User.GeographicInformationSystem.GeographicArea(_idGeographicArea);
            Position _position = _organization.Position(_idPosition);
            FunctionalArea _funArea = _organization.FunctionalArea(_idFunctionalArea);
            FunctionalPosition _funPos = _organization.FunctionalPosition(_position, _funArea);
            GeographicFunctionalArea _geoFunArea = _organization.GeographicFunctionalArea(_funArea, _geoArea);
            JobTitle _jobTitle = _organization.JobTitle(_geoFunArea, _funPos);

            Condesus.EMS.Business.Security.Entities.Permission _permission = EMSLibrary.User.Security.Permission(_idPermission);
            Condesus.EMS.Business.Security.Entities.RightJobTitle _rightJobTitle = EMSLibrary.User.ImprovementAction.Map.ReadJobTitleByID(_jobTitle, _permission);

            _dt.ExtendedProperties.Add("PageTitle", _jobTitle.Name());

            //Carga los datos
            LoadRightJobTitleData(ref _dt, _rightJobTitle);

            //Retorna el DataTable.
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion RightPersonMapsIA.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightPersonMapsIA(Dictionary<String, Object> param)
        {
            DataTable _dt = BuildRightsPostsColumns();
            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                String _permissionType = String.Empty;
                //Obtiene el permiso que tiene el usuario para esa organizacion.
                if (EMSLibrary.User.ImprovementAction.Map.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                { _permissionType = Common.Constants.PermissionManageName; }
                else
                { _permissionType = Common.Constants.PermissionViewName; }

                //Ya esta armado el DataTable, ahora lo carga
                foreach (Condesus.EMS.Business.Security.Entities.RightPerson _rightPerson in EMSLibrary.User.ImprovementAction.Map.SecurityPeople())
                {
                    _dt.Rows.Add(_rightPerson.Person.Organization.IdOrganization,
                        _rightPerson.Person.IdPerson,
                        _rightPerson.Person.Organization.Name,
                        _rightPerson.Person.FullName,
                        _rightPerson.Permission.LanguageOption.Name,
                        Condesus.EMS.Business.Common.Security.MapIA,
                        _rightPerson.Permission.IdPermission,
                        _permissionType);
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del RightPersonMapIA.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightPersonMapIA(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("RightPersons");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            //POST
            Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
            Int64 _idPerson = Convert.ToInt64(param["IdPerson"]);
            Int64 _idPermission = Convert.ToInt64(param["IdPermission"]);

            Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
            Person _person = _organization.Person(_idPerson);
            Condesus.EMS.Business.Security.Entities.Permission _permission = EMSLibrary.User.Security.Permission(_idPermission);
            Condesus.EMS.Business.Security.Entities.RightPerson _rightPerson = EMSLibrary.User.ImprovementAction.Map.ReadPersonByID(_person, _permission);

            _dt.ExtendedProperties.Add("PageTitle", _person.FullName);

            //Carga los datos
            LoadRightPersonData(ref _dt, _rightPerson);

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        #region Configuration IA
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion RightJobTitlesConfigurationsIA.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightJobTitleConfigurationsIA(Dictionary<String, Object> param)
        {
            DataTable _dt = BuildRightsJobTitlesColumns();

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                String _permissionType = String.Empty;
                //Obtiene el permiso que tiene el usuario para esa organizacion.
                if (EMSLibrary.User.ImprovementAction.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                { _permissionType = Common.Constants.PermissionManageName; }
                else
                { _permissionType = Common.Constants.PermissionViewName; }

                //Ya esta armado el DataTable, ahora lo carga
                foreach (Condesus.EMS.Business.Security.Entities.RightJobTitle _rightJobTitle in EMSLibrary.User.ImprovementAction.Configuration.SecurityJobTitles())
                {
                    _dt.Rows.Add(_rightJobTitle.JobTitle.Organization.IdOrganization,
                        _rightJobTitle.JobTitle.GeographicFunctionalAreas.GeographicArea.IdGeographicArea,
                        _rightJobTitle.JobTitle.GeographicFunctionalAreas.FunctionalArea.IdFunctionalArea,
                        _rightJobTitle.JobTitle.FunctionalPositions.Position.IdPosition,
                        _rightJobTitle.JobTitle.Organization.Name,
                        _rightJobTitle.JobTitle.Name(),
                        _rightJobTitle.Permission.LanguageOption.Name,
                        //_rightJobTitle.Permission.OwnerPermission.ClassName,
                        //_rightJobTitle.RoleType.LanguageOption.Name,
                        Condesus.EMS.Business.Common.Security.ConfigurationIA,
                        _rightJobTitle.Permission.IdPermission,
                        //_rightJobTitle.Permission.OwnerPermission.IdObject,
                        //_rightJobTitle.Permission.OwnerPermission.ClassName, 
                        _permissionType);
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del RightJobTitleConfigurationIA.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightJobTitleConfigurationIA(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("RightJobTitles");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            //JT
            Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
            Int64 _idGeographicArea = Convert.ToInt64(param["IdGeographicArea"]);
            Int64 _idFunctionalArea = Convert.ToInt64(param["IdFunctionalArea"]);
            Int64 _idPosition = Convert.ToInt64(param["IdPosition"]);

            //Int64 _idOwnerObject = Convert.ToInt64(param["IdOwnerObject"]);
            Int64 _idPermission = Convert.ToInt64(param["IdPermission"]);
            //String _ownerClassName = Convert.ToString(param["OwnerClassName"]);

            Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
            GeographicArea _geoArea = EMSLibrary.User.GeographicInformationSystem.GeographicArea(_idGeographicArea);
            Position _position = _organization.Position(_idPosition);
            FunctionalArea _funArea = _organization.FunctionalArea(_idFunctionalArea);
            FunctionalPosition _funPos = _organization.FunctionalPosition(_position, _funArea);
            GeographicFunctionalArea _geoFunArea = _organization.GeographicFunctionalArea(_funArea, _geoArea);
            JobTitle _jobTitle = _organization.JobTitle(_geoFunArea, _funPos);

            Condesus.EMS.Business.Security.Entities.Permission _permission = EMSLibrary.User.Security.Permission(_idPermission);
            Condesus.EMS.Business.Security.Entities.RightJobTitle _rightJobTitle = EMSLibrary.User.ImprovementAction.Configuration.ReadJobTitleByID(_jobTitle, _permission);

            _dt.ExtendedProperties.Add("PageTitle", _jobTitle.Name());

            //Carga los datos
            LoadRightJobTitleData(ref _dt, _rightJobTitle);

            //Retorna el DataTable.
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion RightPersonConfigurationsIA.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightPersonConfigurationsIA(Dictionary<String, Object> param)
        {
            DataTable _dt = BuildRightsPostsColumns();
            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                String _permissionType = String.Empty;
                //Obtiene el permiso que tiene el usuario para esa organizacion.
                if (EMSLibrary.User.ImprovementAction.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                { _permissionType = Common.Constants.PermissionManageName; }
                else
                { _permissionType = Common.Constants.PermissionViewName; }

                //Ya esta armado el DataTable, ahora lo carga
                foreach (Condesus.EMS.Business.Security.Entities.RightPerson _rightPerson in EMSLibrary.User.ImprovementAction.Configuration.SecurityPeople())
                {
                    _dt.Rows.Add(_rightPerson.Person.Organization.IdOrganization,
                        _rightPerson.Person.IdPerson,
                        _rightPerson.Person.Organization.Name,
                        _rightPerson.Person.FullName,
                        _rightPerson.Permission.LanguageOption.Name,
                        Condesus.EMS.Business.Common.Security.ConfigurationIA,
                        _rightPerson.Permission.IdPermission,
                        _permissionType);
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del RightPersonConfigurationIA.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightPersonConfigurationIA(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("RightPersons");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            //POST
            Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
            Int64 _idPerson = Convert.ToInt64(param["IdPerson"]);
            Int64 _idPermission = Convert.ToInt64(param["IdPermission"]);

            Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
            Person _person = _organization.Person(_idPerson);
            Condesus.EMS.Business.Security.Entities.Permission _permission = EMSLibrary.User.Security.Permission(_idPermission);
            Condesus.EMS.Business.Security.Entities.RightPerson _rightPerson = EMSLibrary.User.ImprovementAction.Configuration.ReadPersonByID(_person, _permission);

            _dt.ExtendedProperties.Add("PageTitle", _person.FullName);

            //Carga los datos
            LoadRightPersonData(ref _dt, _rightPerson);

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        #region Map RM
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion RightJobTitlesMapsRM.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightJobTitleMapsRM(Dictionary<String, Object> param)
        {
            DataTable _dt = BuildRightsJobTitlesColumns();

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                String _permissionType = String.Empty;
                //Obtiene el permiso que tiene el usuario para esa organizacion.
                if (EMSLibrary.User.RiskManagement.Map.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                { _permissionType = Common.Constants.PermissionManageName; }
                else
                { _permissionType = Common.Constants.PermissionViewName; }

                //Ya esta armado el DataTable, ahora lo carga
                foreach (Condesus.EMS.Business.Security.Entities.RightJobTitle _rightJobTitle in EMSLibrary.User.RiskManagement.Map.SecurityJobTitles())
                {
                    _dt.Rows.Add(_rightJobTitle.JobTitle.Organization.IdOrganization,
                        _rightJobTitle.JobTitle.GeographicFunctionalAreas.GeographicArea.IdGeographicArea,
                        _rightJobTitle.JobTitle.GeographicFunctionalAreas.FunctionalArea.IdFunctionalArea,
                        _rightJobTitle.JobTitle.FunctionalPositions.Position.IdPosition,
                        _rightJobTitle.JobTitle.Organization.Name,
                        _rightJobTitle.JobTitle.Name(),
                        _rightJobTitle.Permission.LanguageOption.Name,
                        //_rightJobTitle.Permission.OwnerPermission.ClassName,
                        //_rightJobTitle.RoleType.LanguageOption.Name,
                        Condesus.EMS.Business.Common.Security.MapRM,
                        _rightJobTitle.Permission.IdPermission,
                        //_rightJobTitle.Permission.OwnerPermission.IdObject,
                        //_rightJobTitle.Permission.OwnerPermission.ClassName, 
                        _permissionType);
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del RightJobTitleMapRM.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightJobTitleMapRM(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("RightJobTitles");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            //JT
            Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
            Int64 _idGeographicArea = Convert.ToInt64(param["IdGeographicArea"]);
            Int64 _idFunctionalArea = Convert.ToInt64(param["IdFunctionalArea"]);
            Int64 _idPosition = Convert.ToInt64(param["IdPosition"]);

            //Int64 _idOwnerObject = Convert.ToInt64(param["IdOwnerObject"]);
            Int64 _idPermission = Convert.ToInt64(param["IdPermission"]);
            //String _ownerClassName = Convert.ToString(param["OwnerClassName"]);

            Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
            GeographicArea _geoArea = EMSLibrary.User.GeographicInformationSystem.GeographicArea(_idGeographicArea);
            Position _position = _organization.Position(_idPosition);
            FunctionalArea _funArea = _organization.FunctionalArea(_idFunctionalArea);
            FunctionalPosition _funPos = _organization.FunctionalPosition(_position, _funArea);
            GeographicFunctionalArea _geoFunArea = _organization.GeographicFunctionalArea(_funArea, _geoArea);
            JobTitle _jobTitle = _organization.JobTitle(_geoFunArea, _funPos);

            Condesus.EMS.Business.Security.Entities.Permission _permission = EMSLibrary.User.Security.Permission(_idPermission);
            Condesus.EMS.Business.Security.Entities.RightJobTitle _rightJobTitle = EMSLibrary.User.RiskManagement.Map.ReadJobTitleByID(_jobTitle, _permission);

            _dt.ExtendedProperties.Add("PageTitle", _jobTitle.Name());

            //Carga los datos
            LoadRightJobTitleData(ref _dt, _rightJobTitle);

            //Retorna el DataTable.
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion RightPersonMapsRM.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightPersonMapsRM(Dictionary<String, Object> param)
        {
            DataTable _dt = BuildRightsPostsColumns();
            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                String _permissionType = String.Empty;
                //Obtiene el permiso que tiene el usuario para esa organizacion.
                if (EMSLibrary.User.RiskManagement.Map.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                { _permissionType = Common.Constants.PermissionManageName; }
                else
                { _permissionType = Common.Constants.PermissionViewName; }

                //Ya esta armado el DataTable, ahora lo carga
                foreach (Condesus.EMS.Business.Security.Entities.RightPerson _rightPerson in EMSLibrary.User.RiskManagement.Map.SecurityPeople())
                {
                    _dt.Rows.Add(_rightPerson.Person.Organization.IdOrganization,
                        _rightPerson.Person.IdPerson,
                        _rightPerson.Person.Organization.Name,
                        _rightPerson.Person.FullName,
                        _rightPerson.Permission.LanguageOption.Name,
                        Condesus.EMS.Business.Common.Security.MapRM,
                        _rightPerson.Permission.IdPermission,
                        _permissionType);
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del RightPersonMapRM.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightPersonMapRM(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("RightPersons");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            //POST
            Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
            Int64 _idPerson = Convert.ToInt64(param["IdPerson"]);
            Int64 _idPermission = Convert.ToInt64(param["IdPermission"]);

            Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
            Condesus.EMS.Business.Security.Entities.Permission _permission = EMSLibrary.User.Security.Permission(_idPermission);
            Person _person = _organization.Person(_idPerson);
            Condesus.EMS.Business.Security.Entities.RightPerson _rightPerson = EMSLibrary.User.RiskManagement.Map.ReadPersonByID(_person, _permission);

            _dt.ExtendedProperties.Add("PageTitle", _person.FullName);

            //Carga los datos
            LoadRightPersonData(ref _dt, _rightPerson);

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        #region Configuration RM
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion RightJobTitlesConfigurationsRM.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightJobTitleConfigurationsRM(Dictionary<String, Object> param)
        {
            DataTable _dt = BuildRightsJobTitlesColumns();

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                String _permissionType = String.Empty;
                //Obtiene el permiso que tiene el usuario para esa organizacion.
                if (EMSLibrary.User.RiskManagement.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                { _permissionType = Common.Constants.PermissionManageName; }
                else
                { _permissionType = Common.Constants.PermissionViewName; }

                //Ya esta armado el DataTable, ahora lo carga
                foreach (Condesus.EMS.Business.Security.Entities.RightJobTitle _rightJobTitle in EMSLibrary.User.RiskManagement.Configuration.SecurityJobTitles())
                {
                    _dt.Rows.Add(_rightJobTitle.JobTitle.Organization.IdOrganization,
                        _rightJobTitle.JobTitle.GeographicFunctionalAreas.GeographicArea.IdGeographicArea,
                        _rightJobTitle.JobTitle.GeographicFunctionalAreas.FunctionalArea.IdFunctionalArea,
                        _rightJobTitle.JobTitle.FunctionalPositions.Position.IdPosition,
                        _rightJobTitle.JobTitle.Organization.Name,
                        _rightJobTitle.JobTitle.Name(),
                        _rightJobTitle.Permission.LanguageOption.Name,
                        //_rightJobTitle.Permission.OwnerPermission.ClassName,
                        //_rightJobTitle.RoleType.LanguageOption.Name,
                        Condesus.EMS.Business.Common.Security.ConfigurationRM,
                        _rightJobTitle.Permission.IdPermission,
                        //_rightJobTitle.Permission.OwnerPermission.IdObject,
                        //_rightJobTitle.Permission.OwnerPermission.ClassName, 
                        _permissionType);
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del RightJobTitleConfigurationRM.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightJobTitleConfigurationRM(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("RightJobTitles");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            //JT
            Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
            Int64 _idGeographicArea = Convert.ToInt64(param["IdGeographicArea"]);
            Int64 _idFunctionalArea = Convert.ToInt64(param["IdFunctionalArea"]);
            Int64 _idPosition = Convert.ToInt64(param["IdPosition"]);

            //Int64 _idOwnerObject = Convert.ToInt64(param["IdOwnerObject"]);
            Int64 _idPermission = Convert.ToInt64(param["IdPermission"]);
            //String _ownerClassName = Convert.ToString(param["OwnerClassName"]);

            Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
            GeographicArea _geoArea = EMSLibrary.User.GeographicInformationSystem.GeographicArea(_idGeographicArea);
            Position _position = _organization.Position(_idPosition);
            FunctionalArea _funArea = _organization.FunctionalArea(_idFunctionalArea);
            FunctionalPosition _funPos = _organization.FunctionalPosition(_position, _funArea);
            GeographicFunctionalArea _geoFunArea = _organization.GeographicFunctionalArea(_funArea, _geoArea);
            JobTitle _jobTitle = _organization.JobTitle(_geoFunArea, _funPos);

            Condesus.EMS.Business.Security.Entities.Permission _permission = EMSLibrary.User.Security.Permission(_idPermission);
            Condesus.EMS.Business.Security.Entities.RightJobTitle _rightJobTitle = EMSLibrary.User.RiskManagement.Configuration.ReadJobTitleByID(_jobTitle, _permission);

            _dt.ExtendedProperties.Add("PageTitle", _jobTitle.Name());

            //Carga los datos
            LoadRightJobTitleData(ref _dt, _rightJobTitle);

            //Retorna el DataTable.
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion RightPersonConfigurationsRM.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightPersonConfigurationsRM(Dictionary<String, Object> param)
        {
            DataTable _dt = BuildRightsPostsColumns();
            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                String _permissionType = String.Empty;
                //Obtiene el permiso que tiene el usuario para esa organizacion.
                if (EMSLibrary.User.RiskManagement.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                { _permissionType = Common.Constants.PermissionManageName; }
                else
                { _permissionType = Common.Constants.PermissionViewName; }

                //Ya esta armado el DataTable, ahora lo carga
                foreach (Condesus.EMS.Business.Security.Entities.RightPerson _rightPerson in EMSLibrary.User.RiskManagement.Configuration.SecurityPeople())
                {
                    _dt.Rows.Add(_rightPerson.Person.Organization.IdOrganization,
                        _rightPerson.Person.IdPerson,
                        _rightPerson.Person.Organization.Name,
                        _rightPerson.Person.FullName,
                        _rightPerson.Permission.LanguageOption.Name,
                        Condesus.EMS.Business.Common.Security.ConfigurationRM,
                        _rightPerson.Permission.IdPermission,
                        _permissionType);
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del RightPersonConfigurationRM.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightPersonConfigurationRM(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("RightPersons");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            //POST
            Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
            Int64 _idPerson = Convert.ToInt64(param["IdPerson"]);
            Int64 _idPermission = Convert.ToInt64(param["IdPermission"]);

            Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
            Person _person = _organization.Person(_idPerson);

            Condesus.EMS.Business.Security.Entities.Permission _permission = EMSLibrary.User.Security.Permission(_idPermission);
            Condesus.EMS.Business.Security.Entities.RightPerson _rightPerson = EMSLibrary.User.RiskManagement.Configuration.ReadPersonByID(_person, _permission);

            _dt.ExtendedProperties.Add("PageTitle", _person.FullName);

            //Carga los datos
            LoadRightPersonData(ref _dt, _rightPerson);

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        #endregion

        #region Security By Entities

        #region Organization
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion RightJobTitles.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightJobTitleOrganizations(Dictionary<String, Object> param)
        {
            DataTable _dt = BuildRightsJobTitlesColumns();
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdOrganizationOrg;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdOrganizationOrg", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
                Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
                String _permissionType = String.Empty;
                //Obtiene el permiso que tiene el usuario para esa organizacion.
                if (_organization.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                else
                    { _permissionType = Common.Constants.PermissionViewName; }

                //Ya esta armado el DataTable, ahora lo carga
                foreach (Condesus.EMS.Business.Security.Entities.RightJobTitle _rightJobTitle in _organization.SecurityJobTitles())
                {
                    _dt.Rows.Add(_rightJobTitle.JobTitle.Organization.IdOrganization,
                        _rightJobTitle.JobTitle.GeographicFunctionalAreas.GeographicArea.IdGeographicArea,
                        _rightJobTitle.JobTitle.GeographicFunctionalAreas.FunctionalArea.IdFunctionalArea,
                        _rightJobTitle.JobTitle.FunctionalPositions.Position.IdPosition,
                        _rightJobTitle.JobTitle.Organization.Name,
                        _rightJobTitle.JobTitle.Name(),
                        _rightJobTitle.Permission.LanguageOption.Name,
                        //_rightJobTitle.Permission.OwnerPermission.ClassName,
                        //_rightJobTitle.RoleType.LanguageOption.Name,
                        Common.ConstantsEntitiesName.DS.Organization.ToString(),
                        _rightJobTitle.Permission.IdPermission,
                        //_rightJobTitle.Permission.OwnerPermission.IdObject,
                        //_rightJobTitle.Permission.OwnerPermission.ClassName, 
                        _permissionType,
                        _idOrganization);
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del RightJobTitleOrganization.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightJobTitleOrganization(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("RightJobTitles");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            //JT
            Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
            Int64 _idGeographicArea = Convert.ToInt64(param["IdGeographicArea"]);
            Int64 _idFunctionalArea = Convert.ToInt64(param["IdFunctionalArea"]);
            Int64 _idPosition = Convert.ToInt64(param["IdPosition"]);

            Int64 _idOrganizationOrg = Convert.ToInt64(param["IdOrganizationOrg"]);

            //Int64 _idOwnerObject = Convert.ToInt64(param["IdOwnerObject"]);
            Int64 _idPermission = Convert.ToInt64(param["IdPermission"]);
            //String _ownerClassName = Convert.ToString(param["OwnerClassName"]);

            //JobTitle _jobTitle = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization).JobTitle(_idGeographicArea, _idPosition, _idFunctionalArea);
            Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
            GeographicArea _geoArea = EMSLibrary.User.GeographicInformationSystem.GeographicArea(_idGeographicArea);
            Position _position = _organization.Position(_idPosition);
            FunctionalArea _funArea = _organization.FunctionalArea(_idFunctionalArea);
            FunctionalPosition _funPos = _organization.FunctionalPosition(_position, _funArea);
            GeographicFunctionalArea _geoFunArea = _organization.GeographicFunctionalArea(_funArea, _geoArea);
            JobTitle _jobTitle = _organization.JobTitle(_geoFunArea, _funPos);

            Condesus.EMS.Business.Security.Entities.Permission _permission = EMSLibrary.User.Security.Permission(_idPermission);
            Condesus.EMS.Business.Security.Entities.RightJobTitle _rightJobTitle = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganizationOrg).ReadJobTitleByID(_jobTitle, _permission);

            _dt.ExtendedProperties.Add("PageTitle", _jobTitle.Name());

            //Carga los datos
            LoadRightJobTitleData(ref _dt, _rightJobTitle);

            //Retorna el DataTable.
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion RightPersonOrganizations.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightPersonOrganizations(Dictionary<String, Object> param)
        {
            DataTable _dt = BuildRightsPostsColumns();
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdOrganizationOrg;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdOrganizationOrg", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
                Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
                String _permissionType = String.Empty;
                //Obtiene el permiso que tiene el usuario para esa organizacion.
                if (_organization.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                { _permissionType = Common.Constants.PermissionManageName; }
                else
                { _permissionType = Common.Constants.PermissionViewName; }

                //Ya esta armado el DataTable, ahora lo carga
                foreach (Condesus.EMS.Business.Security.Entities.RightPerson _rightPerson in _organization.SecurityPeople())
                {
                    _dt.Rows.Add(_rightPerson.Person.Organization.IdOrganization,
                        _rightPerson.Person.IdPerson,
                        _rightPerson.Person.Organization.Name,
                        _rightPerson.Person.FullName,
                        _rightPerson.Permission.LanguageOption.Name,
                        Common.ConstantsEntitiesName.DS.OrganizationClassification,
                        _rightPerson.Permission.IdPermission,
                        _permissionType,
                        _idOrganization);
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del RightPersonOrganizations.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightPersonOrganization(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("RightPersons");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            //POST
            Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
            Int64 _idPerson = Convert.ToInt64(param["IdPerson"]);
            Int64 _idOrganizationOrg = Convert.ToInt64(param["IdOrganizationOrg"]);
            Int64 _idPermission = Convert.ToInt64(param["IdPermission"]);

            Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
            Person _person = _organization.Person(_idPerson);
            Condesus.EMS.Business.Security.Entities.Permission _permission = EMSLibrary.User.Security.Permission(_idPermission);

            Condesus.EMS.Business.Security.Entities.RightPerson _rightPerson = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganizationOrg).ReadPersonByID(_person, _permission);

            _dt.ExtendedProperties.Add("PageTitle", _person.FullName);

            //Carga los datos
            LoadRightPersonData(ref _dt, _rightPerson);

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        //#region Organization Classification
        ///// <summary>
        ///// Construye el DataTable a modo List con los datos de la Coleccion RightJobTitles.
        ///// </summary>
        ///// <param name="param">Parametros opcionales para filtrar</param>
        ///// <returns>Un <c>DataTable</c></returns>
        //public DataTable RightJobTitleOrganizationClassifications(Dictionary<String, Object> param)
        //{
        //    DataTable _dt = BuildRightsJobTitlesColumns();

        //    ColumnOptions _columnOptions = new ColumnOptions();
        //    _columnOptions.ColumnCaption = Resources.CommonListManage.IdOrganizationClassification;
        //    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
        //    _columnOptions.IsPrimaryKey = true;
        //    _columnOptions.DisplayInCombo = false;
        //    _columnOptions.DisplayInManage = false;
        //    _columnOptions.IsSearchable = false;
        //    _columnOptions.AllowNull = false;
        //    BuildColumnsDataTable(ref _dt, "IdOrganizationClassification", _columnOptions);

        //    //Cuando implementemos la opcion de traer todo en un filtro.
        //    Boolean _showAll = false;
        //    if (ValidateSelectedItemComboBox(param, ref _showAll))
        //    {
        //        Int64 _idOrganizationClassification = Convert.ToInt64(param["IdOrganizationClassification"]);
        //        OrganizationClassification _organizationClassification = EMSLibrary.User.DirectoryServices.Map.OrganizationClassification(_idOrganizationClassification);
        //        String _permissionType = String.Empty;
        //        //Obtiene el permiso que tiene el usuario para esa organizacion.
        //        if (EMSLibrary.User.DirectoryServices.Map.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
        //        { _permissionType = Common.Constants.PermissionManageName; }
        //        else
        //        { _permissionType = Common.Constants.PermissionViewName; }

        //        //Ya esta armado el DataTable, ahora lo carga
        //        foreach (Condesus.EMS.Business.Security.Entities.RightJobTitle _rightJobTitle in _organizationClassification.SecurityJobTitles())
        //        {
        //            _dt.Rows.Add(_rightJobTitle.JobTitle.Organization.IdOrganization, _rightJobTitle.JobTitle.GeographicFunctionalAreas.GeographicArea.IdGeographicArea,
        //                _rightJobTitle.JobTitle.GeographicFunctionalAreas.FunctionalArea.IdFunctionalArea,
        //                _rightJobTitle.JobTitle.FunctionalPositions.Position.IdPosition,
        //                _rightJobTitle.JobTitle.Name(),
        //                _rightJobTitle.Permission.LanguageOption.Name,
        //                _rightJobTitle.Permission.OwnerPermission.ClassName,
        //                //_rightJobTitle.RoleType.LanguageOption.Name,
        //                Common.ConstantsEntitiesName.DS.OrganizationClassification,
        //                _rightJobTitle.Permission.IdPermission,
        //                _rightJobTitle.Permission.OwnerPermission.IdObject,
        //                _rightJobTitle.Permission.OwnerPermission.ClassName, _permissionType,
        //                _idOrganizationClassification);
        //        }
        //    }
        //    //Retorna el DataTable
        //    return _dt;
        //}
        ///// <summary>
        ///// Construye el DataTable a modo Property con los datos del RightJobTitleOrganizationClassification.
        ///// </summary>
        ///// <param name="param">Parametros opcionales para filtrar</param>
        ///// <returns>Un <c>DataTable</c></returns>
        //public DataTable RightJobTitleOrganizationClassification(Dictionary<String, Object> param)
        //{
        //    //Construye el datatable
        //    DataTable _dt = BuildDataTable("RightJobTitles");

        //    //Contruye las columnas y sus atributos.
        //    BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
        //    BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
        //    BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

        //    //JT
        //    Int64 _idOrganizationClassification = Convert.ToInt64(param["IdOrganizationClassification"]);
        //    Int64 _idGeographicArea = Convert.ToInt64(param["IdGeographicArea"]);
        //    Int64 _idFunctionalArea = Convert.ToInt64(param["IdFunctionalArea"]);
        //    Int64 _idPosition = Convert.ToInt64(param["IdPosition"]);
        //    Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);

        ////    Int64 _idOwnerObject = Convert.ToInt64(param["IdOwnerObject"]);
        //    Int64 _idPermission = Convert.ToInt64(param["IdPermission"]);
        //    String _ownerClassName = Convert.ToString(param["OwnerClassName"]);

        //    Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
        //    GeographicArea _geoArea = EMSLibrary.User.GeographicInformationSystem.GeographicArea(_idGeographicArea);
        //    Position _position = _organization.Position(_idPosition);
        //    FunctionalArea _funArea = _organization.FunctionalArea(_idFunctionalArea);
        //    FunctionalPosition _funPos = _organization.FunctionalPosition(_position, _funArea);
        //    GeographicFunctionalArea _geoFunArea = _organization.GeographicFunctionalArea(_funArea, _geoArea);
        //    JobTitle _jobTitle = _organization.JobTitle(_geoFunArea, _funPos);

        //    Condesus.EMS.Business.Security.Entities.Permission _permission = EMSLibrary.User.Security.Permission(_idPermission, _ownerClassName, _idOwnerObject);
        //    //JobTitle _jobTitle = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization).JobTitle(_idGeographicArea, _idPosition, _idFunctionalArea);
        //    Condesus.EMS.Business.Security.Entities.RightJobTitle _rightJobTitle = EMSLibrary.User.DirectoryServices.Map.OrganizationClassification(_idOrganizationClassification).ReadJobTitleByID(_jobTitle, _permission);

        //    _dt.ExtendedProperties.Add("PageTitle", _jobTitle.Name());

        //    //Carga los datos
        //    LoadRightJobTitleData(ref _dt, _rightJobTitle);

        //    //Retorna el DataTable.
        //    return _dt;
        //}
        ///// <summary>
        ///// Construye el DataTable a modo List con los datos de la Coleccion RightPersonOrganizationClassifications.
        ///// </summary>
        ///// <param name="param">Parametros opcionales para filtrar</param>
        ///// <returns>Un <c>DataTable</c></returns>
        //public DataTable RightPersonOrganizationClassifications(Dictionary<String, Object> param)
        //{
        //    DataTable _dt = BuildRightsPostsColumns();

        //    ColumnOptions _columnOptions = new ColumnOptions();
        //    _columnOptions.ColumnCaption = Resources.CommonListManage.IdOrganizationClassification;
        //    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
        //    _columnOptions.IsPrimaryKey = true;
        //    _columnOptions.DisplayInCombo = false;
        //    _columnOptions.DisplayInManage = false;
        //    _columnOptions.IsSearchable = false;
        //    _columnOptions.AllowNull = false;
        //    BuildColumnsDataTable(ref _dt, "IdOrganizationClassification", _columnOptions);

        //    //Cuando implementemos la opcion de traer todo en un filtro.
        //    Boolean _showAll = false;
        //    if (ValidateSelectedItemComboBox(param, ref _showAll))
        //    {
        //        Int64 _idOrganizationClassification = Convert.ToInt64(param["IdOrganizationClassification"]);
        //        OrganizationClassification _organizationClassification = EMSLibrary.User.DirectoryServices.Map.OrganizationClassification(_idOrganizationClassification);
        //        String _permissionType = String.Empty;
        //        //Obtiene el permiso que tiene el usuario para esa organizacion.
        //        if (EMSLibrary.User.DirectoryServices.Map.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
        //        { _permissionType = Common.Constants.PermissionManageName; }
        //        else
        //        { _permissionType = Common.Constants.PermissionViewName; }

        //        //Ya esta armado el DataTable, ahora lo carga
        //        foreach (Condesus.EMS.Business.Security.Entities.RightPerson _rightPerson in _organizationClassification.SecurityPeople())
        //        {
        //            _dt.Rows.Add(_rightPerson.Post.Organization.IdOrganization,
        //                _rightPerson.Post.JobTitle.GeographicFunctionalAreas.GeographicArea.IdGeographicArea,
        //                _rightPerson.Post.JobTitle.GeographicFunctionalAreas.FunctionalArea.IdFunctionalArea,
        //                _rightPerson.Post.JobTitle.FunctionalPositions.Position.IdPosition,
        //                _rightPerson.Post.Person.IdPerson,
        //                _rightPerson.Post.Person.FullName,
        //                _rightPerson.Permission.LanguageOption.Name,
        //                _rightPerson.Permission.OwnerPermission.ClassName,
        //                //_rightPerson.RoleType.LanguageOption.Name,
        //                Common.ConstantsEntitiesName.DS.OrganizationClassification,
        //                _rightPerson.Permission.IdPermission,
        //                _rightPerson.Permission.OwnerPermission.IdObject,
        //                _rightPerson.Permission.OwnerPermission.ClassName, _permissionType,
        //                _idOrganizationClassification);
        //        }
        //    }
        //    //Retorna el DataTable
        //    return _dt;
        //}
        ///// <summary>
        ///// Construye el DataTable a modo Property con los datos del RightPersonOrganizationClassification.
        ///// </summary>
        ///// <param name="param">Parametros opcionales para filtrar</param>
        ///// <returns>Un <c>DataTable</c></returns>
        //public DataTable RightPersonOrganizationClassification(Dictionary<String, Object> param)
        //{
        //    //Construye el datatable
        //    DataTable _dt = BuildDataTable("RightPersons");

        //    //Contruye las columnas y sus atributos.
        //    BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
        //    BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
        //    BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

        //    //POST
        //    Int64 _idOrganizationClassification = Convert.ToInt64(param["IdOrganizationClassification"]);
        //    Int64 _idGeographicArea = Convert.ToInt64(param["IdGeographicArea"]);
        //    Int64 _idFunctionalArea = Convert.ToInt64(param["IdFunctionalArea"]);
        //    Int64 _idPosition = Convert.ToInt64(param["IdPosition"]);
        //    Int64 _idPerson = Convert.ToInt64(param["IdPerson"]);
        //    Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);

        //    Int64 _idOwnerObject = Convert.ToInt64(param["IdOwnerObject"]);
        //    Int64 _idPermission = Convert.ToInt64(param["IdPermission"]);
        //    String _ownerClassName = Convert.ToString(param["OwnerClassName"]);

        //    Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
        //    GeographicArea _geoArea = EMSLibrary.User.GeographicInformationSystem.GeographicArea(_idGeographicArea);
        //    Position _position = _organization.Position(_idPosition);
        //    FunctionalArea _funArea = _organization.FunctionalArea(_idFunctionalArea);
        //    FunctionalPosition _funPos = _organization.FunctionalPosition(_position, _funArea);
        //    GeographicFunctionalArea _geoFunArea = _organization.GeographicFunctionalArea(_funArea, _geoArea);
        //    JobTitle _jobTitle = _organization.JobTitle(_geoFunArea, _funPos);

        //    Post _post = _organization.Post(_jobTitle, _organization.Person(_idPerson));
        //    Condesus.EMS.Business.Security.Entities.Permission _permission = EMSLibrary.User.Security.Permission(_idPermission, _ownerClassName, _idOwnerObject);
        //    Condesus.EMS.Business.Security.Entities.RightPerson _rightPerson = EMSLibrary.User.DirectoryServices.Map.OrganizationClassification(_idOrganizationClassification).ReadPersonByID(_post, _permission);

        //    _dt.ExtendedProperties.Add("PageTitle", _post.Person.FullName);

        //    //Carga los datos
        //    LoadRightPersonData(ref _dt, _rightPerson);

        //    //Retorna el DataTable.
        //    return _dt;
        //}
        //#endregion

        //#region Process Classification
        ///// <summary>
        ///// Construye el DataTable a modo List con los datos de la Coleccion RightJobTitles.
        ///// </summary>
        ///// <param name="param">Parametros opcionales para filtrar</param>
        ///// <returns>Un <c>DataTable</c></returns>
        //public DataTable RightJobTitleProcessClassifications(Dictionary<String, Object> param)
        //{
        //    DataTable _dt = BuildRightsJobTitlesColumns();

        //    ColumnOptions _columnOptions = new ColumnOptions();
        //    _columnOptions.ColumnCaption = Resources.CommonListManage.IdProcessClassification;
        //    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
        //    _columnOptions.IsPrimaryKey = true;
        //    _columnOptions.DisplayInCombo = false;
        //    _columnOptions.DisplayInManage = false;
        //    _columnOptions.IsSearchable = false;
        //    _columnOptions.AllowNull = false;
        //    BuildColumnsDataTable(ref _dt, "IdProcessClassification", _columnOptions);

        //    //Cuando implementemos la opcion de traer todo en un filtro.
        //    Boolean _showAll = false;
        //    if (ValidateSelectedItemComboBox(param, ref _showAll))
        //    {
        //        Int64 _idProcessClassification = Convert.ToInt64(param["IdProcessClassification"]);
        //        ProcessClassification _processClassification = EMSLibrary.User.ProcessFramework.Map.ProcessClassification(_idProcessClassification);
        //        String _permissionType = String.Empty;
        //        //Obtiene el permiso que tiene el usuario para esa organizacion.
        //        if (_processClassification.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
        //        { _permissionType = Common.Constants.PermissionManageName; }
        //        else
        //        { _permissionType = Common.Constants.PermissionViewName; }

        //        //Ya esta armado el DataTable, ahora lo carga
        //        foreach (Condesus.EMS.Business.Security.Entities.RightJobTitle _rightJobTitle in _processClassification.SecurityJobTitles())
        //        {
        //            _dt.Rows.Add(_rightJobTitle.JobTitle.Organization.IdOrganization, _rightJobTitle.JobTitle.GeographicFunctionalAreas.GeographicArea.IdGeographicArea,
        //                _rightJobTitle.JobTitle.GeographicFunctionalAreas.FunctionalArea.IdFunctionalArea,
        //                _rightJobTitle.JobTitle.FunctionalPositions.Position.IdPosition,
        //                _rightJobTitle.JobTitle.Name(),
        //                _rightJobTitle.Permission.LanguageOption.Name,
        //                _rightJobTitle.Permission.OwnerPermission.ClassName,
        //                //_rightJobTitle.RoleType.LanguageOption.Name,
        //                Common.ConstantsEntitiesName.PF.ProcessClassification,
        //                _rightJobTitle.Permission.IdPermission,
        //                _rightJobTitle.Permission.OwnerPermission.IdObject,
        //                _rightJobTitle.Permission.OwnerPermission.ClassName, _permissionType,
        //                _idProcessClassification);
        //        }
        //    }
        //    //Retorna el DataTable
        //    return _dt;
        //}
        ///// <summary>
        ///// Construye el DataTable a modo Property con los datos del RightJobTitleProcessClassification.
        ///// </summary>
        ///// <param name="param">Parametros opcionales para filtrar</param>
        ///// <returns>Un <c>DataTable</c></returns>
        //public DataTable RightJobTitleProcessClassification(Dictionary<String, Object> param)
        //{
        //    //Construye el datatable
        //    DataTable _dt = BuildDataTable("RightJobTitles");

        //    //Contruye las columnas y sus atributos.
        //    BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
        //    BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
        //    BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

        //    //JT
        //    Int64 _idProcessClassification = Convert.ToInt64(param["IdProcessClassification"]);
        //    Int64 _idGeographicArea = Convert.ToInt64(param["IdGeographicArea"]);
        //    Int64 _idFunctionalArea = Convert.ToInt64(param["IdFunctionalArea"]);
        //    Int64 _idPosition = Convert.ToInt64(param["IdPosition"]);
        //    Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);

        //    Int64 _idOwnerObject = Convert.ToInt64(param["IdOwnerObject"]);
        //    Int64 _idPermission = Convert.ToInt64(param["IdPermission"]);
        //    String _ownerClassName = Convert.ToString(param["OwnerClassName"]);

        //    Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
        //    GeographicArea _geoArea = EMSLibrary.User.GeographicInformationSystem.GeographicArea(_idGeographicArea);
        //    Position _position = _organization.Position(_idPosition);
        //    FunctionalArea _funArea = _organization.FunctionalArea(_idFunctionalArea);
        //    FunctionalPosition _funPos = _organization.FunctionalPosition(_position, _funArea);
        //    GeographicFunctionalArea _geoFunArea = _organization.GeographicFunctionalArea(_funArea, _geoArea);
        //    JobTitle _jobTitle = _organization.JobTitle(_geoFunArea, _funPos);

        //    //JobTitle _jobTitle = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization).JobTitle(_idGeographicArea, _idPosition, _idFunctionalArea);
        //    Condesus.EMS.Business.Security.Entities.Permission _permission = EMSLibrary.User.Security.Permission(_idPermission, _ownerClassName, _idOwnerObject);
        //    Condesus.EMS.Business.Security.Entities.RightJobTitle _rightJobTitle = EMSLibrary.User.ProcessFramework.Map.ProcessClassification(_idProcessClassification).ReadJobTitleByID(_jobTitle, _permission);

        //    _dt.ExtendedProperties.Add("PageTitle", _jobTitle.Name());

        //    //Carga los datos
        //    LoadRightJobTitleData(ref _dt, _rightJobTitle);

        //    //Retorna el DataTable.
        //    return _dt;
        //}

        ///// <summary>
        ///// Construye el DataTable a modo List con los datos de la Coleccion RightPersonProcessClassifications.
        ///// </summary>
        ///// <param name="param">Parametros opcionales para filtrar</param>
        ///// <returns>Un <c>DataTable</c></returns>
        //public DataTable RightPersonProcessClassifications(Dictionary<String, Object> param)
        //{
        //    DataTable _dt = BuildRightsPostsColumns();

        //    ColumnOptions _columnOptions = new ColumnOptions();
        //    _columnOptions.ColumnCaption = Resources.CommonListManage.IdProcessClassification;
        //    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
        //    _columnOptions.IsPrimaryKey = true;
        //    _columnOptions.DisplayInCombo = false;
        //    _columnOptions.DisplayInManage = false;
        //    _columnOptions.IsSearchable = false;
        //    _columnOptions.AllowNull = false;
        //    BuildColumnsDataTable(ref _dt, "IdProcessClassification", _columnOptions);

        //    //Cuando implementemos la opcion de traer todo en un filtro.
        //    Boolean _showAll = false;
        //    if (ValidateSelectedItemComboBox(param, ref _showAll))
        //    {
        //        Int64 _idProcessClassification = Convert.ToInt64(param["IdProcessClassification"]);
        //        ProcessClassification _processClassification = EMSLibrary.User.ProcessFramework.Map.ProcessClassification(_idProcessClassification);
        //        String _permissionType = String.Empty;
        //        //Obtiene el permiso que tiene el usuario para esa organizacion.
        //        if (_processClassification.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
        //        { _permissionType = Common.Constants.PermissionManageName; }
        //        else
        //        { _permissionType = Common.Constants.PermissionViewName; }

        //        //Ya esta armado el DataTable, ahora lo carga
        //        foreach (Condesus.EMS.Business.Security.Entities.RightPerson _rightPerson in _processClassification.SecurityPeople())
        //        {
        //            _dt.Rows.Add(_rightPerson.Post.Organization.IdOrganization,
        //                _rightPerson.Post.JobTitle.GeographicFunctionalAreas.GeographicArea.IdGeographicArea,
        //                _rightPerson.Post.JobTitle.GeographicFunctionalAreas.FunctionalArea.IdFunctionalArea,
        //                _rightPerson.Post.JobTitle.FunctionalPositions.Position.IdPosition,
        //                _rightPerson.Post.Person.IdPerson,
        //                _rightPerson.Post.Person.FullName,
        //                _rightPerson.Permission.LanguageOption.Name,
        //                _rightPerson.Permission.OwnerPermission.ClassName,
        //                //_rightPerson.RoleType.LanguageOption.Name,
        //                Common.ConstantsEntitiesName.PF.ProcessClassification,
        //                _rightPerson.Permission.IdPermission,
        //                _rightPerson.Permission.OwnerPermission.IdObject,
        //                _rightPerson.Permission.OwnerPermission.ClassName, _permissionType,
        //                _idProcessClassification);
        //        }
        //    }
        //    //Retorna el DataTable
        //    return _dt;
        //}
        ///// <summary>
        ///// Construye el DataTable a modo Property con los datos del RightPersonProcessClassification.
        ///// </summary>
        ///// <param name="param">Parametros opcionales para filtrar</param>
        ///// <returns>Un <c>DataTable</c></returns>
        //public DataTable RightPersonProcessClassification(Dictionary<String, Object> param)
        //{
        //    //Construye el datatable
        //    DataTable _dt = BuildDataTable("RightPersons");

        //    //Contruye las columnas y sus atributos.
        //    BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
        //    BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
        //    BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

        //    //POST
        //    Int64 _idProcessClassification = Convert.ToInt64(param["IdProcessClassification"]);
        //    Int64 _idGeographicArea = Convert.ToInt64(param["IdGeographicArea"]);
        //    Int64 _idFunctionalArea = Convert.ToInt64(param["IdFunctionalArea"]);
        //    Int64 _idPosition = Convert.ToInt64(param["IdPosition"]);
        //    Int64 _idPerson = Convert.ToInt64(param["IdPerson"]);
        //    Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);

        //    Int64 _idOwnerObject = Convert.ToInt64(param["IdOwnerObject"]);
        //    Int64 _idPermission = Convert.ToInt64(param["IdPermission"]);
        //    String _ownerClassName = Convert.ToString(param["OwnerClassName"]);

        //    Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
        //    GeographicArea _geoArea = EMSLibrary.User.GeographicInformationSystem.GeographicArea(_idGeographicArea);
        //    Position _position = _organization.Position(_idPosition);
        //    FunctionalArea _funArea = _organization.FunctionalArea(_idFunctionalArea);
        //    FunctionalPosition _funPos = _organization.FunctionalPosition(_position, _funArea);
        //    GeographicFunctionalArea _geoFunArea = _organization.GeographicFunctionalArea(_funArea, _geoArea);
        //    JobTitle _jobTitle = _organization.JobTitle(_geoFunArea, _funPos);

        //    Post _post = _organization.Post(_jobTitle, _organization.Person(_idPerson));
        //    Condesus.EMS.Business.Security.Entities.Permission _permission = EMSLibrary.User.Security.Permission(_idPermission, _ownerClassName, _idOwnerObject);
        //    Condesus.EMS.Business.Security.Entities.RightPerson _rightPerson = EMSLibrary.User.ProcessFramework.Map.ProcessClassification(_idProcessClassification).ReadPersonByID(_post, _permission);

        //    _dt.ExtendedProperties.Add("PageTitle", _post.Person.FullName);

        //    //Carga los datos
        //    LoadRightPersonData(ref _dt, _rightPerson);

        //    //Retorna el DataTable.
        //    return _dt;
        //}
        //#endregion

        #region Process
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion RightJobTitles.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightJobTitleProcesses(Dictionary<String, Object> param)
        {
            DataTable _dt = BuildRightsJobTitlesColumns();

            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdProcess;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdProcess", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
                ProcessGroupProcess _process = (ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess);
                String _permissionType = String.Empty;
                //Obtiene el permiso que tiene el usuario para esa organizacion.
                if (_process.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                { _permissionType = Common.Constants.PermissionManageName; }
                else
                { _permissionType = Common.Constants.PermissionViewName; }

                //Ya esta armado el DataTable, ahora lo carga
                foreach (Condesus.EMS.Business.Security.Entities.RightJobTitle _rightJobTitle in _process.SecurityJobTitles())
                {
                    _dt.Rows.Add(_rightJobTitle.JobTitle.Organization.IdOrganization, _rightJobTitle.JobTitle.GeographicFunctionalAreas.GeographicArea.IdGeographicArea,
                        _rightJobTitle.JobTitle.GeographicFunctionalAreas.FunctionalArea.IdFunctionalArea,
                        _rightJobTitle.JobTitle.FunctionalPositions.Position.IdPosition,
                        _rightJobTitle.JobTitle.Organization.Name,
                        _rightJobTitle.JobTitle.Name(),
                        _rightJobTitle.Permission.LanguageOption.Name,
                        //_rightJobTitle.Permission.OwnerPermission.ClassName,
                        //_rightJobTitle.RoleType.LanguageOption.Name,
                        Common.ConstantsEntitiesName.PF.ProcessGroupProcess,
                        _rightJobTitle.Permission.IdPermission,
                        //_rightJobTitle.Permission.OwnerPermission.IdObject,
                        //_rightJobTitle.Permission.OwnerPermission.ClassName, 
                        _permissionType,
                        _idProcess);
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del RightJobTitleProcess.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightJobTitleProcess(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("RightJobTitles");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            //JT
            Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
            Int64 _idGeographicArea = Convert.ToInt64(param["IdGeographicArea"]);
            Int64 _idFunctionalArea = Convert.ToInt64(param["IdFunctionalArea"]);
            Int64 _idPosition = Convert.ToInt64(param["IdPosition"]);
            Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);

            //Int64 _idOwnerObject = Convert.ToInt64(param["IdOwnerObject"]);
            Int64 _idPermission = Convert.ToInt64(param["IdPermission"]);
            //String _ownerClassName = Convert.ToString(param["OwnerClassName"]);

            Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
            GeographicArea _geoArea = EMSLibrary.User.GeographicInformationSystem.GeographicArea(_idGeographicArea);
            Position _position = _organization.Position(_idPosition);
            FunctionalArea _funArea = _organization.FunctionalArea(_idFunctionalArea);
            FunctionalPosition _funPos = _organization.FunctionalPosition(_position, _funArea);
            GeographicFunctionalArea _geoFunArea = _organization.GeographicFunctionalArea(_funArea, _geoArea);
            JobTitle _jobTitle = _organization.JobTitle(_geoFunArea, _funPos);
            
            Condesus.EMS.Business.Security.Entities.Permission _permission = EMSLibrary.User.Security.Permission(_idPermission);
            Condesus.EMS.Business.Security.Entities.RightJobTitle _rightJobTitle = EMSLibrary.User.ProcessFramework.Map.ProcessGroupProcess(_idProcess).ReadJobTitleByID(_jobTitle, _permission);

            _dt.ExtendedProperties.Add("PageTitle", _jobTitle.Name());

            //Carga los datos
            LoadRightJobTitleData(ref _dt, _rightJobTitle);

            //Retorna el DataTable.
            return _dt;
        }

        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion RightPersonProcesses.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightPersonProcesses(Dictionary<String, Object> param)
        {
            DataTable _dt = BuildRightsPostsColumns();

            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdProcess;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdProcess", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
                ProcessGroupProcess _process = (ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess);
                String _permissionType = String.Empty;
                //Obtiene el permiso que tiene el usuario para esa organizacion.
                if (_process.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                { _permissionType = Common.Constants.PermissionManageName; }
                else
                { _permissionType = Common.Constants.PermissionViewName; }

                //Ya esta armado el DataTable, ahora lo carga
                foreach (Condesus.EMS.Business.Security.Entities.RightPerson _rightPerson in _process.SecurityPeople())
                {
                    _dt.Rows.Add(_rightPerson.Person.Organization.IdOrganization,
                        _rightPerson.Person.IdPerson,
                        _rightPerson.Person.Organization.Name,
                        _rightPerson.Person.FullName,
                        _rightPerson.Permission.LanguageOption.Name,
                        Common.ConstantsEntitiesName.PF.ProcessGroupProcess,
                        _rightPerson.Permission.IdPermission,
                        _permissionType,
                        _idProcess);
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del RightPersonProcess.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable RightPersonProcess(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("RightPersons");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
            BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

            //POST
            Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
            Int64 _idPerson = Convert.ToInt64(param["IdPerson"]);
            Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
            Int64 _idPermission = Convert.ToInt64(param["IdPermission"]);

            Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
            Person _person = _organization.Person(_idPerson);
            Condesus.EMS.Business.Security.Entities.Permission _permission = EMSLibrary.User.Security.Permission(_idPermission);
            Condesus.EMS.Business.Security.Entities.RightPerson _rightPerson = EMSLibrary.User.ProcessFramework.Map.ProcessGroupProcess(_idProcess).ReadPersonByID(_person, _permission);

            _dt.ExtendedProperties.Add("PageTitle", _person.FullName);

            //Carga los datos
            LoadRightPersonData(ref _dt, _rightPerson);

            //Retorna el DataTable.
            return _dt;
        }
        #endregion

        //#region Indicator Classification
        ///// <summary>
        ///// Construye el DataTable a modo List con los datos de la Coleccion RightJobTitles.
        ///// </summary>
        ///// <param name="param">Parametros opcionales para filtrar</param>
        ///// <returns>Un <c>DataTable</c></returns>
        //public DataTable RightJobTitleIndicatorClassifications(Dictionary<String, Object> param)
        //{
        //    DataTable _dt = BuildRightsJobTitlesColumns();

        //    ColumnOptions _columnOptions = new ColumnOptions();
        //    _columnOptions.ColumnCaption = Resources.CommonListManage.IdIndicatorClassification;
        //    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
        //    _columnOptions.IsPrimaryKey = true;
        //    _columnOptions.DisplayInCombo = false;
        //    _columnOptions.DisplayInManage = false;
        //    _columnOptions.IsSearchable = false;
        //    _columnOptions.AllowNull = false;
        //    BuildColumnsDataTable(ref _dt, "IdIndicatorClassification", _columnOptions);

        //    //Cuando implementemos la opcion de traer todo en un filtro.
        //    Boolean _showAll = false;
        //    if (ValidateSelectedItemComboBox(param, ref _showAll))
        //    {
        //        Int64 _idIndicatorClassification = Convert.ToInt64(param["IdIndicatorClassification"]);
        //        IndicatorClassification _indicatorClassification = EMSLibrary.User.PerformanceAssessments.Map.IndicatorClassification(_idIndicatorClassification);
        //        String _permissionType = String.Empty;
        //        //Obtiene el permiso que tiene el usuario para esa organizacion.
        //        if (_indicatorClassification.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
        //        { _permissionType = Common.Constants.PermissionManageName; }
        //        else
        //        { _permissionType = Common.Constants.PermissionViewName; }

        //        //Ya esta armado el DataTable, ahora lo carga
        //        foreach (Condesus.EMS.Business.Security.Entities.RightJobTitle _rightJobTitle in _indicatorClassification.SecurityJobTitles())
        //        {
        //            _dt.Rows.Add(_rightJobTitle.JobTitle.Organization.IdOrganization, _rightJobTitle.JobTitle.GeographicFunctionalAreas.GeographicArea.IdGeographicArea,
        //                _rightJobTitle.JobTitle.GeographicFunctionalAreas.FunctionalArea.IdFunctionalArea,
        //                _rightJobTitle.JobTitle.FunctionalPositions.Position.IdPosition,
        //                _rightJobTitle.JobTitle.Name(),
        //                _rightJobTitle.Permission.LanguageOption.Name,
        //                _rightJobTitle.Permission.OwnerPermission.ClassName,
        //                //_rightJobTitle.RoleType.LanguageOption.Name,
        //                Common.ConstantsEntitiesName.PA.IndicatorClassification,
        //                _rightJobTitle.Permission.IdPermission,
        //                _rightJobTitle.Permission.OwnerPermission.IdObject,
        //                _rightJobTitle.Permission.OwnerPermission.ClassName, _permissionType,
        //                _idIndicatorClassification);
        //        }
        //    }
        //    //Retorna el DataTable
        //    return _dt;
        //}
        ///// <summary>
        ///// Construye el DataTable a modo Property con los datos del RightJobTitleIndicatorClassification.
        ///// </summary>
        ///// <param name="param">Parametros opcionales para filtrar</param>
        ///// <returns>Un <c>DataTable</c></returns>
        //public DataTable RightJobTitleIndicatorClassification(Dictionary<String, Object> param)
        //{
        //    //Construye el datatable
        //    DataTable _dt = BuildDataTable("RightJobTitles");

        //    //Contruye las columnas y sus atributos.
        //    BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
        //    BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
        //    BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

        //    //JT
        //    Int64 _idIndicatorClassification = Convert.ToInt64(param["IdIndicatorClassification"]);
        //    Int64 _idGeographicArea = Convert.ToInt64(param["IdGeographicArea"]);
        //    Int64 _idFunctionalArea = Convert.ToInt64(param["IdFunctionalArea"]);
        //    Int64 _idPosition = Convert.ToInt64(param["IdPosition"]);
        //    Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);

        //    Int64 _idOwnerObject = Convert.ToInt64(param["IdOwnerObject"]);
        //    Int64 _idPermission = Convert.ToInt64(param["IdPermission"]);
        //    String _ownerClassName = Convert.ToString(param["OwnerClassName"]);

        //    Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
        //    GeographicArea _geoArea = EMSLibrary.User.GeographicInformationSystem.GeographicArea(_idGeographicArea);
        //    Position _position = _organization.Position(_idPosition);
        //    FunctionalArea _funArea = _organization.FunctionalArea(_idFunctionalArea);
        //    FunctionalPosition _funPos = _organization.FunctionalPosition(_position, _funArea);
        //    GeographicFunctionalArea _geoFunArea = _organization.GeographicFunctionalArea(_funArea, _geoArea);
        //    JobTitle _jobTitle = _organization.JobTitle(_geoFunArea, _funPos);

        //    //JobTitle _jobTitle = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization).JobTitle(_idGeographicArea, _idPosition, _idFunctionalArea);
        //    Condesus.EMS.Business.Security.Entities.Permission _permission = EMSLibrary.User.Security.Permission(_idPermission, _ownerClassName, _idOwnerObject);
        //    Condesus.EMS.Business.Security.Entities.RightJobTitle _rightJobTitle = EMSLibrary.User.PerformanceAssessments.Map.IndicatorClassification(_idIndicatorClassification).ReadJobTitleByID(_jobTitle, _permission);

        //    _dt.ExtendedProperties.Add("PageTitle", _jobTitle.Name());

        //    //Carga los datos
        //    LoadRightJobTitleData(ref _dt, _rightJobTitle);

        //    //Retorna el DataTable.
        //    return _dt;
        //}

        ///// <summary>
        ///// Construye el DataTable a modo List con los datos de la Coleccion RightPersonIndicatorClassifications.
        ///// </summary>
        ///// <param name="param">Parametros opcionales para filtrar</param>
        ///// <returns>Un <c>DataTable</c></returns>
        //public DataTable RightPersonIndicatorClassifications(Dictionary<String, Object> param)
        //{
        //    DataTable _dt = BuildRightsPostsColumns();

        //    ColumnOptions _columnOptions = new ColumnOptions();
        //    _columnOptions.ColumnCaption = Resources.CommonListManage.IdIndicatorClassification;
        //    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
        //    _columnOptions.IsPrimaryKey = true;
        //    _columnOptions.DisplayInCombo = false;
        //    _columnOptions.DisplayInManage = false;
        //    _columnOptions.IsSearchable = false;
        //    _columnOptions.AllowNull = false;
        //    BuildColumnsDataTable(ref _dt, "IdIndicatorClassification", _columnOptions);

        //    //Cuando implementemos la opcion de traer todo en un filtro.
        //    Boolean _showAll = false;
        //    if (ValidateSelectedItemComboBox(param, ref _showAll))
        //    {
        //        Int64 _idIndicatorClassification = Convert.ToInt64(param["IdIndicatorClassification"]);
        //        IndicatorClassification _indicatorClassification = EMSLibrary.User.PerformanceAssessments.Map.IndicatorClassification(_idIndicatorClassification);
        //        String _permissionType = String.Empty;
        //        //Obtiene el permiso que tiene el usuario para esa organizacion.
        //        if (_indicatorClassification.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
        //        { _permissionType = Common.Constants.PermissionManageName; }
        //        else
        //        { _permissionType = Common.Constants.PermissionViewName; }

        //        //Ya esta armado el DataTable, ahora lo carga
        //        foreach (Condesus.EMS.Business.Security.Entities.RightPerson _rightPerson in _indicatorClassification.SecurityPeople())
        //        {
        //            _dt.Rows.Add(_rightPerson.Post.Organization.IdOrganization,
        //                _rightPerson.Post.JobTitle.GeographicFunctionalAreas.GeographicArea.IdGeographicArea,
        //                _rightPerson.Post.JobTitle.GeographicFunctionalAreas.FunctionalArea.IdFunctionalArea,
        //                _rightPerson.Post.JobTitle.FunctionalPositions.Position.IdPosition,
        //                _rightPerson.Post.Person.IdPerson,
        //                _rightPerson.Post.Person.FullName,
        //                _rightPerson.Permission.LanguageOption.Name,
        //                _rightPerson.Permission.OwnerPermission.ClassName,
        //                //_rightPerson.RoleType.LanguageOption.Name,
        //                Common.ConstantsEntitiesName.PA.IndicatorClassification,
        //                _rightPerson.Permission.IdPermission,
        //                _rightPerson.Permission.OwnerPermission.IdObject,
        //                _rightPerson.Permission.OwnerPermission.ClassName, _permissionType,
        //                _idIndicatorClassification);
        //        }
        //    }
        //    //Retorna el DataTable
        //    return _dt;
        //}
        ///// <summary>
        ///// Construye el DataTable a modo Property con los datos del RightPersonIndicatorClassification.
        ///// </summary>
        ///// <param name="param">Parametros opcionales para filtrar</param>
        ///// <returns>Un <c>DataTable</c></returns>
        //public DataTable RightPersonIndicatorClassification(Dictionary<String, Object> param)
        //{
        //    //Construye el datatable
        //    DataTable _dt = BuildDataTable("RightPersons");

        //    //Contruye las columnas y sus atributos.
        //    BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
        //    BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
        //    BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

        //    //POST
        //    Int64 _idIndicatorClassification = Convert.ToInt64(param["IdIndicatorClassification"]);
        //    Int64 _idGeographicArea = Convert.ToInt64(param["IdGeographicArea"]);
        //    Int64 _idFunctionalArea = Convert.ToInt64(param["IdFunctionalArea"]);
        //    Int64 _idPosition = Convert.ToInt64(param["IdPosition"]);
        //    Int64 _idPerson = Convert.ToInt64(param["IdPerson"]);
        //    Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);

        //    Int64 _idOwnerObject = Convert.ToInt64(param["IdOwnerObject"]);
        //    Int64 _idPermission = Convert.ToInt64(param["IdPermission"]);
        //    String _ownerClassName = Convert.ToString(param["OwnerClassName"]);

        //    Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
        //    GeographicArea _geoArea = EMSLibrary.User.GeographicInformationSystem.GeographicArea(_idGeographicArea);
        //    Position _position = _organization.Position(_idPosition);
        //    FunctionalArea _funArea = _organization.FunctionalArea(_idFunctionalArea);
        //    FunctionalPosition _funPos = _organization.FunctionalPosition(_position, _funArea);
        //    GeographicFunctionalArea _geoFunArea = _organization.GeographicFunctionalArea(_funArea, _geoArea);
        //    JobTitle _jobTitle = _organization.JobTitle(_geoFunArea, _funPos);

        //    Post _post = _organization.Post(_jobTitle, _organization.Person(_idPerson));
        //    Condesus.EMS.Business.Security.Entities.Permission _permission = EMSLibrary.User.Security.Permission(_idPermission, _ownerClassName, _idOwnerObject);
        //    Condesus.EMS.Business.Security.Entities.RightPerson _rightPerson = EMSLibrary.User.PerformanceAssessments.Map.IndicatorClassification(_idIndicatorClassification).ReadPersonByID(_post, _permission);

        //    _dt.ExtendedProperties.Add("PageTitle", _post.Person.FullName);

        //    //Carga los datos
        //    LoadRightPersonData(ref _dt, _rightPerson);

        //    //Retorna el DataTable.
        //    return _dt;
        //}
        //#endregion

        //#region Indicator
        ///// <summary>
        ///// Construye el DataTable a modo List con los datos de la Coleccion RightJobTitles.
        ///// </summary>
        ///// <param name="param">Parametros opcionales para filtrar</param>
        ///// <returns>Un <c>DataTable</c></returns>
        //public DataTable RightJobTitleIndicators(Dictionary<String, Object> param)
        //{
        //    DataTable _dt = BuildRightsJobTitlesColumns();

        //    ColumnOptions _columnOptions = new ColumnOptions();
        //    _columnOptions.ColumnCaption = Resources.CommonListManage.IdIndicator;
        //    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
        //    _columnOptions.IsPrimaryKey = true;
        //    _columnOptions.DisplayInCombo = false;
        //    _columnOptions.DisplayInManage = false;
        //    _columnOptions.IsSearchable = false;
        //    _columnOptions.AllowNull = false;
        //    BuildColumnsDataTable(ref _dt, "IdIndicator", _columnOptions);

        //    //Cuando implementemos la opcion de traer todo en un filtro.
        //    Boolean _showAll = false;
        //    if (ValidateSelectedItemComboBox(param, ref _showAll))
        //    {
        //        Int64 _idIndicator = Convert.ToInt64(param["IdIndicator"]);
        //        Indicator _indicator = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator);
        //        String _permissionType = String.Empty;
        //        //Obtiene el permiso que tiene el usuario para esa organizacion.
        //        if (EMSLibrary.User.PerformanceAssessments.Map.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
        //        { _permissionType = Common.Constants.PermissionManageName; }
        //        else
        //        { _permissionType = Common.Constants.PermissionViewName; }

        //        //Ya esta armado el DataTable, ahora lo carga
        //        foreach (Condesus.EMS.Business.Security.Entities.RightJobTitle _rightJobTitle in _indicator.SecurityJobTitles())
        //        {
        //            _dt.Rows.Add(_rightJobTitle.JobTitle.Organization.IdOrganization, _rightJobTitle.JobTitle.GeographicFunctionalAreas.GeographicArea.IdGeographicArea,
        //                _rightJobTitle.JobTitle.GeographicFunctionalAreas.FunctionalArea.IdFunctionalArea,
        //                _rightJobTitle.JobTitle.FunctionalPositions.Position.IdPosition,
        //                _rightJobTitle.JobTitle.Name(),
        //                _rightJobTitle.Permission.LanguageOption.Name,
        //                _rightJobTitle.Permission.OwnerPermission.ClassName,
        //                //_rightJobTitle.RoleType.LanguageOption.Name,
        //                Common.ConstantsEntitiesName.PA.Indicator,
        //                _rightJobTitle.Permission.IdPermission,
        //                _rightJobTitle.Permission.OwnerPermission.IdObject,
        //                _rightJobTitle.Permission.OwnerPermission.ClassName, _permissionType,
        //                _idIndicator);
        //        }
        //    }
        //    //Retorna el DataTable
        //    return _dt;
        //}
        ///// <summary>
        ///// Construye el DataTable a modo Property con los datos del RightJobTitleIndicator.
        ///// </summary>
        ///// <param name="param">Parametros opcionales para filtrar</param>
        ///// <returns>Un <c>DataTable</c></returns>
        //public DataTable RightJobTitleIndicator(Dictionary<String, Object> param)
        //{
        //    //Construye el datatable
        //    DataTable _dt = BuildDataTable("RightJobTitles");

        //    //Contruye las columnas y sus atributos.
        //    BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
        //    BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
        //    BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

        //    //JT
        //    Int64 _idIndicator = Convert.ToInt64(param["IdIndicator"]);
        //    Int64 _idGeographicArea = Convert.ToInt64(param["IdGeographicArea"]);
        //    Int64 _idFunctionalArea = Convert.ToInt64(param["IdFunctionalArea"]);
        //    Int64 _idPosition = Convert.ToInt64(param["IdPosition"]);
        //    Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);

        //    Int64 _idOwnerObject = Convert.ToInt64(param["IdOwnerObject"]);
        //    Int64 _idPermission = Convert.ToInt64(param["IdPermission"]);
        //    String _ownerClassName = Convert.ToString(param["OwnerClassName"]);

        //    Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
        //    GeographicArea _geoArea = EMSLibrary.User.GeographicInformationSystem.GeographicArea(_idGeographicArea);
        //    Position _position = _organization.Position(_idPosition);
        //    FunctionalArea _funArea = _organization.FunctionalArea(_idFunctionalArea);
        //    FunctionalPosition _funPos = _organization.FunctionalPosition(_position, _funArea);
        //    GeographicFunctionalArea _geoFunArea = _organization.GeographicFunctionalArea(_funArea, _geoArea);
        //    JobTitle _jobTitle = _organization.JobTitle(_geoFunArea, _funPos);

        //    Condesus.EMS.Business.Security.Entities.Permission _permission = EMSLibrary.User.Security.Permission(_idPermission, _ownerClassName, _idOwnerObject);
        //    Condesus.EMS.Business.Security.Entities.RightJobTitle _rightJobTitle = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator).ReadJobTitleByID(_jobTitle, _permission);

        //    _dt.ExtendedProperties.Add("PageTitle", _jobTitle.Name());

        //    //Carga los datos
        //    LoadRightJobTitleData(ref _dt, _rightJobTitle);

        //    //Retorna el DataTable.
        //    return _dt;
        //}

        ///// <summary>
        ///// Construye el DataTable a modo List con los datos de la Coleccion RightPersonIndicators.
        ///// </summary>
        ///// <param name="param">Parametros opcionales para filtrar</param>
        ///// <returns>Un <c>DataTable</c></returns>
        //public DataTable RightPersonIndicators(Dictionary<String, Object> param)
        //{
        //    DataTable _dt = BuildRightsPostsColumns();

        //    ColumnOptions _columnOptions = new ColumnOptions();
        //    _columnOptions.ColumnCaption = Resources.CommonListManage.IdIndicator;
        //    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
        //    _columnOptions.IsPrimaryKey = true;
        //    _columnOptions.DisplayInCombo = false;
        //    _columnOptions.DisplayInManage = false;
        //    _columnOptions.IsSearchable = false;
        //    _columnOptions.AllowNull = false;
        //    BuildColumnsDataTable(ref _dt, "IdIndicator", _columnOptions);

        //    //Cuando implementemos la opcion de traer todo en un filtro.
        //    Boolean _showAll = false;
        //    if (ValidateSelectedItemComboBox(param, ref _showAll))
        //    {
        //        Int64 _idIndicator = Convert.ToInt64(param["IdIndicator"]);
        //        Indicator _indicator = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator);
        //        String _permissionType = String.Empty;
        //        //Obtiene el permiso que tiene el usuario para esa organizacion.
        //        if (EMSLibrary.User.PerformanceAssessments.Map.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
        //        { _permissionType = Common.Constants.PermissionManageName; }
        //        else
        //        { _permissionType = Common.Constants.PermissionViewName; }

        //        //Ya esta armado el DataTable, ahora lo carga
        //        foreach (Condesus.EMS.Business.Security.Entities.RightPerson _rightPerson in _indicator.SecurityPeople())
        //        {
        //            _dt.Rows.Add(_rightPerson.Post.Organization.IdOrganization,
        //                _rightPerson.Post.JobTitle.GeographicFunctionalAreas.GeographicArea.IdGeographicArea,
        //                _rightPerson.Post.JobTitle.GeographicFunctionalAreas.FunctionalArea.IdFunctionalArea,
        //                _rightPerson.Post.JobTitle.FunctionalPositions.Position.IdPosition,
        //                _rightPerson.Post.Person.IdPerson,
        //                _rightPerson.Post.Person.FullName,
        //                _rightPerson.Permission.LanguageOption.Name,
        //                _rightPerson.Permission.OwnerPermission.ClassName,
        //                //_rightPerson.RoleType.LanguageOption.Name,
        //                Common.ConstantsEntitiesName.PA.Indicator,
        //                _rightPerson.Permission.IdPermission,
        //                _rightPerson.Permission.OwnerPermission.IdObject,
        //                _rightPerson.Permission.OwnerPermission.ClassName, _permissionType,
        //                _idIndicator);
        //        }
        //    }
        //    //Retorna el DataTable
        //    return _dt;
        //}
        ///// <summary>
        ///// Construye el DataTable a modo Property con los datos del RightPersonIndicator.
        ///// </summary>
        ///// <param name="param">Parametros opcionales para filtrar</param>
        ///// <returns>Un <c>DataTable</c></returns>
        //public DataTable RightPersonIndicator(Dictionary<String, Object> param)
        //{
        //    //Construye el datatable
        //    DataTable _dt = BuildDataTable("RightPersons");

        //    //Contruye las columnas y sus atributos.
        //    BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
        //    BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
        //    BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

        //    //POST
        //    Int64 _idIndicator = Convert.ToInt64(param["IdIndicator"]);
        //    Int64 _idGeographicArea = Convert.ToInt64(param["IdGeographicArea"]);
        //    Int64 _idFunctionalArea = Convert.ToInt64(param["IdFunctionalArea"]);
        //    Int64 _idPosition = Convert.ToInt64(param["IdPosition"]);
        //    Int64 _idPerson = Convert.ToInt64(param["IdPerson"]);
        //    Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);

        //    Int64 _idOwnerObject = Convert.ToInt64(param["IdOwnerObject"]);
        //    Int64 _idPermission = Convert.ToInt64(param["IdPermission"]);
        //    String _ownerClassName = Convert.ToString(param["OwnerClassName"]);

        //    Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
        //    GeographicArea _geoArea = EMSLibrary.User.GeographicInformationSystem.GeographicArea(_idGeographicArea);
        //    Position _position = _organization.Position(_idPosition);
        //    FunctionalArea _funArea = _organization.FunctionalArea(_idFunctionalArea);
        //    FunctionalPosition _funPos = _organization.FunctionalPosition(_position, _funArea);
        //    GeographicFunctionalArea _geoFunArea = _organization.GeographicFunctionalArea(_funArea, _geoArea);
        //    JobTitle _jobTitle = _organization.JobTitle(_geoFunArea, _funPos);

        //    Post _post = _organization.Post(_jobTitle, _organization.Person(_idPerson));
        //    Condesus.EMS.Business.Security.Entities.Permission _permission = EMSLibrary.User.Security.Permission(_idPermission, _ownerClassName, _idOwnerObject);
        //    Condesus.EMS.Business.Security.Entities.RightPerson _rightPerson = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator).ReadPersonByID(_post, _permission);

        //    _dt.ExtendedProperties.Add("PageTitle", _post.Person.FullName);

        //    //Carga los datos
        //    LoadRightPersonData(ref _dt, _rightPerson);

        //    //Retorna el DataTable.
        //    return _dt;
        //}
        //#endregion

        //#region Resource Classification
        ///// <summary>
        ///// Construye el DataTable a modo List con los datos de la Coleccion RightJobTitles.
        ///// </summary>
        ///// <param name="param">Parametros opcionales para filtrar</param>
        ///// <returns>Un <c>DataTable</c></returns>
        //public DataTable RightJobTitleResourceClassifications(Dictionary<String, Object> param)
        //{
        //    DataTable _dt = BuildRightsJobTitlesColumns();

        //    ColumnOptions _columnOptions = new ColumnOptions();
        //    _columnOptions.ColumnCaption = Resources.CommonListManage.IdResourceClassification;
        //    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
        //    _columnOptions.IsPrimaryKey = true;
        //    _columnOptions.DisplayInCombo = false;
        //    _columnOptions.DisplayInManage = false;
        //    _columnOptions.IsSearchable = false;
        //    _columnOptions.AllowNull = false;
        //    BuildColumnsDataTable(ref _dt, "IdResourceClassification", _columnOptions);

        //    //Cuando implementemos la opcion de traer todo en un filtro.
        //    Boolean _showAll = false;
        //    if (ValidateSelectedItemComboBox(param, ref _showAll))
        //    {
        //        Int64 _idResourceClassification = Convert.ToInt64(param["IdResourceClassification"]);
        //        Condesus.EMS.Business.KC.Entities.ResourceClassification _resourceClassification = EMSLibrary.User.KnowledgeCollaboration.Map.ResourceClassification(_idResourceClassification);
        //        String _permissionType = String.Empty;
        //        //Obtiene el permiso que tiene el usuario para esa organizacion.
        //        if (_resourceClassification.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
        //        { _permissionType = Common.Constants.PermissionManageName; }
        //        else
        //        { _permissionType = Common.Constants.PermissionViewName; }

        //        //Ya esta armado el DataTable, ahora lo carga
        //        foreach (Condesus.EMS.Business.Security.Entities.RightJobTitle _rightJobTitle in _resourceClassification.SecurityJobTitles())
        //        {
        //            _dt.Rows.Add(_rightJobTitle.JobTitle.Organization.IdOrganization, _rightJobTitle.JobTitle.GeographicFunctionalAreas.GeographicArea.IdGeographicArea,
        //                _rightJobTitle.JobTitle.GeographicFunctionalAreas.FunctionalArea.IdFunctionalArea,
        //                _rightJobTitle.JobTitle.FunctionalPositions.Position.IdPosition,
        //                _rightJobTitle.JobTitle.Name(),
        //                _rightJobTitle.Permission.LanguageOption.Name,
        //                _rightJobTitle.Permission.OwnerPermission.ClassName,
        //                //_rightJobTitle.RoleType.LanguageOption.Name,
        //                Common.ConstantsEntitiesName.KC.ResourceClassification,
        //                _rightJobTitle.Permission.IdPermission,
        //                _rightJobTitle.Permission.OwnerPermission.IdObject,
        //                _rightJobTitle.Permission.OwnerPermission.ClassName, _permissionType,
        //                _idResourceClassification);
        //        }
        //    }
        //    //Retorna el DataTable
        //    return _dt;
        //}
        ///// <summary>
        ///// Construye el DataTable a modo Property con los datos del RightJobTitleResourceClassification.
        ///// </summary>
        ///// <param name="param">Parametros opcionales para filtrar</param>
        ///// <returns>Un <c>DataTable</c></returns>
        //public DataTable RightJobTitleResourceClassification(Dictionary<String, Object> param)
        //{
        //    //Construye el datatable
        //    DataTable _dt = BuildDataTable("RightJobTitles");

        //    //Contruye las columnas y sus atributos.
        //    BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
        //    BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
        //    BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

        //    //JT
        //    Int64 _idResourceClassification = Convert.ToInt64(param["IdResourceClassification"]);
        //    Int64 _idGeographicArea = Convert.ToInt64(param["IdGeographicArea"]);
        //    Int64 _idFunctionalArea = Convert.ToInt64(param["IdFunctionalArea"]);
        //    Int64 _idPosition = Convert.ToInt64(param["IdPosition"]);
        //    Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);

        //    Int64 _idOwnerObject = Convert.ToInt64(param["IdOwnerObject"]);
        //    Int64 _idPermission = Convert.ToInt64(param["IdPermission"]);
        //    String _ownerClassName = Convert.ToString(param["OwnerClassName"]);

        //    Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
        //    GeographicArea _geoArea = EMSLibrary.User.GeographicInformationSystem.GeographicArea(_idGeographicArea);
        //    Position _position = _organization.Position(_idPosition);
        //    FunctionalArea _funArea = _organization.FunctionalArea(_idFunctionalArea);
        //    FunctionalPosition _funPos = _organization.FunctionalPosition(_position, _funArea);
        //    GeographicFunctionalArea _geoFunArea = _organization.GeographicFunctionalArea(_funArea, _geoArea);
        //    JobTitle _jobTitle = _organization.JobTitle(_geoFunArea, _funPos);

        //    Condesus.EMS.Business.Security.Entities.Permission _permission = EMSLibrary.User.Security.Permission(_idPermission, _ownerClassName, _idOwnerObject);
        //    Condesus.EMS.Business.Security.Entities.RightJobTitle _rightJobTitle = EMSLibrary.User.KnowledgeCollaboration.Map.ResourceClassification(_idResourceClassification).ReadJobTitleByID(_jobTitle, _permission);

        //    _dt.ExtendedProperties.Add("PageTitle", _jobTitle.Name());

        //    //Carga los datos
        //    LoadRightJobTitleData(ref _dt, _rightJobTitle);

        //    //Retorna el DataTable.
        //    return _dt;
        //}

        ///// <summary>
        ///// Construye el DataTable a modo List con los datos de la Coleccion RightPersonResourceClassifications.
        ///// </summary>
        ///// <param name="param">Parametros opcionales para filtrar</param>
        ///// <returns>Un <c>DataTable</c></returns>
        //public DataTable RightPersonResourceClassifications(Dictionary<String, Object> param)
        //{
        //    DataTable _dt = BuildRightsPostsColumns();

        //    ColumnOptions _columnOptions = new ColumnOptions();
        //    _columnOptions.ColumnCaption = Resources.CommonListManage.IdResourceClassification;
        //    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
        //    _columnOptions.IsPrimaryKey = true;
        //    _columnOptions.DisplayInCombo = false;
        //    _columnOptions.DisplayInManage = false;
        //    _columnOptions.IsSearchable = false;
        //    _columnOptions.AllowNull = false;
        //    BuildColumnsDataTable(ref _dt, "IdResourceClassification", _columnOptions);

        //    //Cuando implementemos la opcion de traer todo en un filtro.
        //    Boolean _showAll = false;
        //    if (ValidateSelectedItemComboBox(param, ref _showAll))
        //    {
        //        Int64 _idResourceClassification = Convert.ToInt64(param["IdResourceClassification"]);
        //        Condesus.EMS.Business.KC.Entities.ResourceClassification _resourceClassification = EMSLibrary.User.KnowledgeCollaboration.Map.ResourceClassification(_idResourceClassification);
        //        String _permissionType = String.Empty;
        //        //Obtiene el permiso que tiene el usuario para esa organizacion.
        //        if (_resourceClassification.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
        //        { _permissionType = Common.Constants.PermissionManageName; }
        //        else
        //        { _permissionType = Common.Constants.PermissionViewName; }

        //        //Ya esta armado el DataTable, ahora lo carga
        //        foreach (Condesus.EMS.Business.Security.Entities.RightPerson _rightPerson in _resourceClassification.SecurityPeople())
        //        {
        //            _dt.Rows.Add(_rightPerson.Post.Organization.IdOrganization,
        //                _rightPerson.Post.JobTitle.GeographicFunctionalAreas.GeographicArea.IdGeographicArea,
        //                _rightPerson.Post.JobTitle.GeographicFunctionalAreas.FunctionalArea.IdFunctionalArea,
        //                _rightPerson.Post.JobTitle.FunctionalPositions.Position.IdPosition,
        //                _rightPerson.Post.Person.IdPerson,
        //                _rightPerson.Post.Person.FullName,
        //                _rightPerson.Permission.LanguageOption.Name,
        //                _rightPerson.Permission.OwnerPermission.ClassName,
        //                //_rightPerson.RoleType.LanguageOption.Name,
        //                Common.ConstantsEntitiesName.KC.ResourceClassification,
        //                _rightPerson.Permission.IdPermission,
        //                _rightPerson.Permission.OwnerPermission.IdObject,
        //                _rightPerson.Permission.OwnerPermission.ClassName, _permissionType,
        //                _idResourceClassification);
        //        }
        //    }
        //    //Retorna el DataTable
        //    return _dt;
        //}
        ///// <summary>
        ///// Construye el DataTable a modo Property con los datos del RightPersonResourceClassification.
        ///// </summary>
        ///// <param name="param">Parametros opcionales para filtrar</param>
        ///// <returns>Un <c>DataTable</c></returns>
        //public DataTable RightPersonResourceClassification(Dictionary<String, Object> param)
        //{
        //    //Construye el datatable
        //    DataTable _dt = BuildDataTable("RightPersons");

        //    //Contruye las columnas y sus atributos.
        //    BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
        //    BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
        //    BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

        //    //POST
        //    Int64 _idResourceClassification = Convert.ToInt64(param["IdResourceClassification"]);
        //    Int64 _idGeographicArea = Convert.ToInt64(param["IdGeographicArea"]);
        //    Int64 _idFunctionalArea = Convert.ToInt64(param["IdFunctionalArea"]);
        //    Int64 _idPosition = Convert.ToInt64(param["IdPosition"]);
        //    Int64 _idPerson = Convert.ToInt64(param["IdPerson"]);
        //    Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);

        //    Int64 _idOwnerObject = Convert.ToInt64(param["IdOwnerObject"]);
        //    Int64 _idPermission = Convert.ToInt64(param["IdPermission"]);
        //    String _ownerClassName = Convert.ToString(param["OwnerClassName"]);

        //    Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
        //    GeographicArea _geoArea = EMSLibrary.User.GeographicInformationSystem.GeographicArea(_idGeographicArea);
        //    Position _position = _organization.Position(_idPosition);
        //    FunctionalArea _funArea = _organization.FunctionalArea(_idFunctionalArea);
        //    FunctionalPosition _funPos = _organization.FunctionalPosition(_position, _funArea);
        //    GeographicFunctionalArea _geoFunArea = _organization.GeographicFunctionalArea(_funArea, _geoArea);
        //    JobTitle _jobTitle = _organization.JobTitle(_geoFunArea, _funPos);

        //    Post _post = _organization.Post(_jobTitle, _organization.Person(_idPerson));
        //    Condesus.EMS.Business.Security.Entities.Permission _permission = EMSLibrary.User.Security.Permission(_idPermission, _ownerClassName, _idOwnerObject);
        //    Condesus.EMS.Business.Security.Entities.RightPerson _rightPerson = EMSLibrary.User.KnowledgeCollaboration.Map.ResourceClassification(_idResourceClassification).ReadPersonByID(_post, _permission);

        //    _dt.ExtendedProperties.Add("PageTitle", _post.Person.FullName);

        //    //Carga los datos
        //    LoadRightPersonData(ref _dt, _rightPerson);

        //    //Retorna el DataTable.
        //    return _dt;
        //}
        //#endregion

        //#region Resource
        ///// <summary>
        ///// Construye el DataTable a modo List con los datos de la Coleccion RightJobTitles.
        ///// </summary>
        ///// <param name="param">Parametros opcionales para filtrar</param>
        ///// <returns>Un <c>DataTable</c></returns>
        //public DataTable RightJobTitleResources(Dictionary<String, Object> param)
        //{
        //    DataTable _dt = BuildRightsJobTitlesColumns();

        //    ColumnOptions _columnOptions = new ColumnOptions();
        //    _columnOptions.ColumnCaption = Resources.CommonListManage.IdResource;
        //    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
        //    _columnOptions.IsPrimaryKey = true;
        //    _columnOptions.DisplayInCombo = false;
        //    _columnOptions.DisplayInManage = false;
        //    _columnOptions.IsSearchable = false;
        //    _columnOptions.AllowNull = false;
        //    BuildColumnsDataTable(ref _dt, "IdResource", _columnOptions);

        //    //Cuando implementemos la opcion de traer todo en un filtro.
        //    Boolean _showAll = false;
        //    if (ValidateSelectedItemComboBox(param, ref _showAll))
        //    {
        //        Int64 _idResource = Convert.ToInt64(param["IdResource"]);
        //        Condesus.EMS.Business.KC.Entities.Resource _resource = EMSLibrary.User.KnowledgeCollaboration.Map.Resource(_idResource);
        //        String _permissionType = String.Empty;
        //        //Obtiene el permiso que tiene el usuario para esa organizacion.
        //        if (_resource.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
        //        { _permissionType = Common.Constants.PermissionManageName; }
        //        else
        //        { _permissionType = Common.Constants.PermissionViewName; }

        //        //Ya esta armado el DataTable, ahora lo carga
        //        foreach (Condesus.EMS.Business.Security.Entities.RightJobTitle _rightJobTitle in _resource.SecurityJobTitles())
        //        {
        //            _dt.Rows.Add(_rightJobTitle.JobTitle.Organization.IdOrganization, _rightJobTitle.JobTitle.GeographicFunctionalAreas.GeographicArea.IdGeographicArea,
        //                _rightJobTitle.JobTitle.GeographicFunctionalAreas.FunctionalArea.IdFunctionalArea,
        //                _rightJobTitle.JobTitle.FunctionalPositions.Position.IdPosition,
        //                _rightJobTitle.JobTitle.Name(),
        //                _rightJobTitle.Permission.LanguageOption.Name,
        //                _rightJobTitle.Permission.OwnerPermission.ClassName,
        //                //_rightJobTitle.RoleType.LanguageOption.Name,
        //                Common.ConstantsEntitiesName.KC.Resource,
        //                _rightJobTitle.Permission.IdPermission,
        //                _rightJobTitle.Permission.OwnerPermission.IdObject,
        //                _rightJobTitle.Permission.OwnerPermission.ClassName, _permissionType,
        //                _idResource);
        //        }
        //    }
        //    //Retorna el DataTable
        //    return _dt;
        //}
        ///// <summary>
        ///// Construye el DataTable a modo Property con los datos del RightJobTitleResource.
        ///// </summary>
        ///// <param name="param">Parametros opcionales para filtrar</param>
        ///// <returns>Un <c>DataTable</c></returns>
        //public DataTable RightJobTitleResource(Dictionary<String, Object> param)
        //{
        //    //Construye el datatable
        //    DataTable _dt = BuildDataTable("RightJobTitles");

        //    //Contruye las columnas y sus atributos.
        //    BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
        //    BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
        //    BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

        //    //JT
        //    Int64 _idResource = Convert.ToInt64(param["IdResource"]);
        //    Int64 _idGeographicArea = Convert.ToInt64(param["IdGeographicArea"]);
        //    Int64 _idFunctionalArea = Convert.ToInt64(param["IdFunctionalArea"]);
        //    Int64 _idPosition = Convert.ToInt64(param["IdPosition"]);
        //    Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);

        //    Int64 _idOwnerObject = Convert.ToInt64(param["IdOwnerObject"]);
        //    Int64 _idPermission = Convert.ToInt64(param["IdPermission"]);
        //    String _ownerClassName = Convert.ToString(param["OwnerClassName"]);

        //    Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
        //    GeographicArea _geoArea = EMSLibrary.User.GeographicInformationSystem.GeographicArea(_idGeographicArea);
        //    Position _position = _organization.Position(_idPosition);
        //    FunctionalArea _funArea = _organization.FunctionalArea(_idFunctionalArea);
        //    FunctionalPosition _funPos = _organization.FunctionalPosition(_position, _funArea);
        //    GeographicFunctionalArea _geoFunArea = _organization.GeographicFunctionalArea(_funArea, _geoArea);
        //    JobTitle _jobTitle = _organization.JobTitle(_geoFunArea, _funPos);

        //    //JobTitle _jobTitle = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization).JobTitle(_idGeographicArea, _idPosition, _idFunctionalArea);
        //    Condesus.EMS.Business.Security.Entities.Permission _permission = EMSLibrary.User.Security.Permission(_idPermission, _ownerClassName, _idOwnerObject);
        //    Condesus.EMS.Business.Security.Entities.RightJobTitle _rightJobTitle = EMSLibrary.User.KnowledgeCollaboration.Map.Resource(_idResource).ReadJobTitleByID(_jobTitle, _permission);

        //    _dt.ExtendedProperties.Add("PageTitle", _jobTitle.Name());

        //    //Carga los datos
        //    LoadRightJobTitleData(ref _dt, _rightJobTitle);

        //    //Retorna el DataTable.
        //    return _dt;
        //}

        ///// <summary>
        ///// Construye el DataTable a modo List con los datos de la Coleccion RightPersonResources.
        ///// </summary>
        ///// <param name="param">Parametros opcionales para filtrar</param>
        ///// <returns>Un <c>DataTable</c></returns>
        //public DataTable RightPersonResources(Dictionary<String, Object> param)
        //{
        //    DataTable _dt = BuildRightsPostsColumns();

        //    ColumnOptions _columnOptions = new ColumnOptions();
        //    _columnOptions.ColumnCaption = Resources.CommonListManage.IdResource;
        //    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
        //    _columnOptions.IsPrimaryKey = true;
        //    _columnOptions.DisplayInCombo = false;
        //    _columnOptions.DisplayInManage = false;
        //    _columnOptions.IsSearchable = false;
        //    _columnOptions.AllowNull = false;
        //    BuildColumnsDataTable(ref _dt, "IdResource", _columnOptions);

        //    //Cuando implementemos la opcion de traer todo en un filtro.
        //    Boolean _showAll = false;
        //    if (ValidateSelectedItemComboBox(param, ref _showAll))
        //    {
        //        Int64 _idResource = Convert.ToInt64(param["IdResource"]);
        //        Condesus.EMS.Business.KC.Entities.Resource _resource = EMSLibrary.User.KnowledgeCollaboration.Map.Resource(_idResource);
        //        String _permissionType = String.Empty;
        //        //Obtiene el permiso que tiene el usuario para esa organizacion.
        //        if (_resource.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
        //        { _permissionType = Common.Constants.PermissionManageName; }
        //        else
        //        { _permissionType = Common.Constants.PermissionViewName; }

        //        //Ya esta armado el DataTable, ahora lo carga
        //        foreach (Condesus.EMS.Business.Security.Entities.RightPerson _rightPerson in _resource.SecurityPeople())
        //        {
        //            _dt.Rows.Add(_rightPerson.Post.Organization.IdOrganization,
        //                _rightPerson.Post.JobTitle.GeographicFunctionalAreas.GeographicArea.IdGeographicArea,
        //                _rightPerson.Post.JobTitle.GeographicFunctionalAreas.FunctionalArea.IdFunctionalArea,
        //                _rightPerson.Post.JobTitle.FunctionalPositions.Position.IdPosition,
        //                _rightPerson.Post.Person.IdPerson,
        //                _rightPerson.Post.Person.FullName,
        //                _rightPerson.Permission.LanguageOption.Name,
        //                _rightPerson.Permission.OwnerPermission.ClassName,
        //                //_rightPerson.RoleType.LanguageOption.Name,
        //                Common.ConstantsEntitiesName.KC.Resource,
        //                _rightPerson.Permission.IdPermission,
        //                _rightPerson.Permission.OwnerPermission.IdObject,
        //                _rightPerson.Permission.OwnerPermission.ClassName, _permissionType,
        //                _idResource);
        //        }
        //    }
        //    //Retorna el DataTable
        //    return _dt;
        //}
        ///// <summary>
        ///// Construye el DataTable a modo Property con los datos del RightPersonResource.
        ///// </summary>
        ///// <param name="param">Parametros opcionales para filtrar</param>
        ///// <returns>Un <c>DataTable</c></returns>
        //public DataTable RightPersonResource(Dictionary<String, Object> param)
        //{
        //    //Construye el datatable
        //    DataTable _dt = BuildDataTable("RightPersons");

        //    //Contruye las columnas y sus atributos.
        //    BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
        //    BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
        //    BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

        //    //POST
        //    Int64 _idResource = Convert.ToInt64(param["IdResource"]);
        //    Int64 _idGeographicArea = Convert.ToInt64(param["IdGeographicArea"]);
        //    Int64 _idFunctionalArea = Convert.ToInt64(param["IdFunctionalArea"]);
        //    Int64 _idPosition = Convert.ToInt64(param["IdPosition"]);
        //    Int64 _idPerson = Convert.ToInt64(param["IdPerson"]);
        //    Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);

        //    Int64 _idOwnerObject = Convert.ToInt64(param["IdOwnerObject"]);
        //    Int64 _idPermission = Convert.ToInt64(param["IdPermission"]);
        //    String _ownerClassName = Convert.ToString(param["OwnerClassName"]);

        //    Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
        //    GeographicArea _geoArea = EMSLibrary.User.GeographicInformationSystem.GeographicArea(_idGeographicArea);
        //    Position _position = _organization.Position(_idPosition);
        //    FunctionalArea _funArea = _organization.FunctionalArea(_idFunctionalArea);
        //    FunctionalPosition _funPos = _organization.FunctionalPosition(_position, _funArea);
        //    GeographicFunctionalArea _geoFunArea = _organization.GeographicFunctionalArea(_funArea, _geoArea);
        //    JobTitle _jobTitle = _organization.JobTitle(_geoFunArea, _funPos);

        //    Post _post = _organization.Post(_jobTitle, _organization.Person(_idPerson));
        //    Condesus.EMS.Business.Security.Entities.Permission _permission = EMSLibrary.User.Security.Permission(_idPermission, _ownerClassName, _idOwnerObject);
        //    Condesus.EMS.Business.Security.Entities.RightPerson _rightPerson = EMSLibrary.User.KnowledgeCollaboration.Map.Resource(_idResource).ReadPersonByID(_post, _permission);

        //    _dt.ExtendedProperties.Add("PageTitle", _post.Person.FullName);

        //    //Carga los datos
        //    LoadRightPersonData(ref _dt, _rightPerson);

        //    //Retorna el DataTable.
        //    return _dt;
        //}
        //#endregion

        //#region Project Classification
        ///// <summary>
        ///// Construye el DataTable a modo List con los datos de la Coleccion RightJobTitles.
        ///// </summary>
        ///// <param name="param">Parametros opcionales para filtrar</param>
        ///// <returns>Un <c>DataTable</c></returns>
        //public DataTable RightJobTitleProjectClassifications(Dictionary<String, Object> param)
        //{
        //    DataTable _dt = BuildRightsJobTitlesColumns();

        //    ColumnOptions _columnOptions = new ColumnOptions();
        //    _columnOptions.ColumnCaption = Resources.CommonListManage.IdProjectClassification;
        //    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
        //    _columnOptions.IsPrimaryKey = true;
        //    _columnOptions.DisplayInCombo = false;
        //    _columnOptions.DisplayInManage = false;
        //    _columnOptions.IsSearchable = false;
        //    _columnOptions.AllowNull = false;
        //    BuildColumnsDataTable(ref _dt, "IdProjectClassification", _columnOptions);

        //    //Cuando implementemos la opcion de traer todo en un filtro.
        //    Boolean _showAll = false;
        //    if (ValidateSelectedItemComboBox(param, ref _showAll))
        //    {
        //        Int64 _idProjectClassification = Convert.ToInt64(param["IdProjectClassification"]);
        //        ProjectClassification _projectClassification = EMSLibrary.User.ImprovementAction.Map.ProjectClassification(_idProjectClassification);
        //        String _permissionType = String.Empty;
        //        //Obtiene el permiso que tiene el usuario para esa organizacion.
        //        if (_projectClassification.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
        //        { _permissionType = Common.Constants.PermissionManageName; }
        //        else
        //        { _permissionType = Common.Constants.PermissionViewName; }

        //        //Ya esta armado el DataTable, ahora lo carga
        //        foreach (Condesus.EMS.Business.Security.Entities.RightJobTitle _rightJobTitle in _projectClassification.SecurityJobTitles())
        //        {
        //            _dt.Rows.Add(_rightJobTitle.JobTitle.Organization.IdOrganization, _rightJobTitle.JobTitle.GeographicFunctionalAreas.GeographicArea.IdGeographicArea,
        //                _rightJobTitle.JobTitle.GeographicFunctionalAreas.FunctionalArea.IdFunctionalArea,
        //                _rightJobTitle.JobTitle.FunctionalPositions.Position.IdPosition,
        //                _rightJobTitle.JobTitle.Name(),
        //                _rightJobTitle.Permission.LanguageOption.Name,
        //                _rightJobTitle.Permission.OwnerPermission.ClassName,
        //                //_rightJobTitle.RoleType.LanguageOption.Name,
        //                Common.ConstantsEntitiesName.IA.ProjectClassification,
        //                _rightJobTitle.Permission.IdPermission,
        //                _rightJobTitle.Permission.OwnerPermission.IdObject,
        //                _rightJobTitle.Permission.OwnerPermission.ClassName, _permissionType,
        //                _idProjectClassification);
        //        }
        //    }
        //    //Retorna el DataTable
        //    return _dt;
        //}
        ///// <summary>
        ///// Construye el DataTable a modo Property con los datos del RightJobTitleProjectClassification.
        ///// </summary>
        ///// <param name="param">Parametros opcionales para filtrar</param>
        ///// <returns>Un <c>DataTable</c></returns>
        //public DataTable RightJobTitleProjectClassification(Dictionary<String, Object> param)
        //{
        //    //Construye el datatable
        //    DataTable _dt = BuildDataTable("RightJobTitles");

        //    //Contruye las columnas y sus atributos.
        //    BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
        //    BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
        //    BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

        //    //JT
        //    Int64 _idProjectClassification = Convert.ToInt64(param["IdProjectClassification"]);
        //    Int64 _idGeographicArea = Convert.ToInt64(param["IdGeographicArea"]);
        //    Int64 _idFunctionalArea = Convert.ToInt64(param["IdFunctionalArea"]);
        //    Int64 _idPosition = Convert.ToInt64(param["IdPosition"]);
        //    Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);

        //    Int64 _idOwnerObject = Convert.ToInt64(param["IdOwnerObject"]);
        //    Int64 _idPermission = Convert.ToInt64(param["IdPermission"]);
        //    String _ownerClassName = Convert.ToString(param["OwnerClassName"]);

        //    Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
        //    GeographicArea _geoArea = EMSLibrary.User.GeographicInformationSystem.GeographicArea(_idGeographicArea);
        //    Position _position = _organization.Position(_idPosition);
        //    FunctionalArea _funArea = _organization.FunctionalArea(_idFunctionalArea);
        //    FunctionalPosition _funPos = _organization.FunctionalPosition(_position, _funArea);
        //    GeographicFunctionalArea _geoFunArea = _organization.GeographicFunctionalArea(_funArea, _geoArea);
        //    JobTitle _jobTitle = _organization.JobTitle(_geoFunArea, _funPos);

        //    //JobTitle _jobTitle = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization).JobTitle(_idGeographicArea, _idPosition, _idFunctionalArea);
        //    Condesus.EMS.Business.Security.Entities.Permission _permission = EMSLibrary.User.Security.Permission(_idPermission, _ownerClassName, _idOwnerObject);
        //    Condesus.EMS.Business.Security.Entities.RightJobTitle _rightJobTitle = EMSLibrary.User.ImprovementAction.Map.ProjectClassification(_idProjectClassification).ReadJobTitleByID(_jobTitle, _permission);

        //    _dt.ExtendedProperties.Add("PageTitle", _jobTitle.Name());

        //    //Carga los datos
        //    LoadRightJobTitleData(ref _dt, _rightJobTitle);

        //    //Retorna el DataTable.
        //    return _dt;
        //}

        ///// <summary>
        ///// Construye el DataTable a modo List con los datos de la Coleccion RightPersonProjectClassifications.
        ///// </summary>
        ///// <param name="param">Parametros opcionales para filtrar</param>
        ///// <returns>Un <c>DataTable</c></returns>
        //public DataTable RightPersonProjectClassifications(Dictionary<String, Object> param)
        //{
        //    DataTable _dt = BuildRightsPostsColumns();

        //    ColumnOptions _columnOptions = new ColumnOptions();
        //    _columnOptions.ColumnCaption = Resources.CommonListManage.IdProjectClassification;
        //    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
        //    _columnOptions.IsPrimaryKey = true;
        //    _columnOptions.DisplayInCombo = false;
        //    _columnOptions.DisplayInManage = false;
        //    _columnOptions.IsSearchable = false;
        //    _columnOptions.AllowNull = false;
        //    BuildColumnsDataTable(ref _dt, "IdProjectClassification", _columnOptions);

        //    //Cuando implementemos la opcion de traer todo en un filtro.
        //    Boolean _showAll = false;
        //    if (ValidateSelectedItemComboBox(param, ref _showAll))
        //    {
        //        Int64 _idProjectClassification = Convert.ToInt64(param["IdProjectClassification"]);
        //        ProjectClassification _projectClassification = EMSLibrary.User.ImprovementAction.Map.ProjectClassification(_idProjectClassification);
        //        String _permissionType = String.Empty;
        //        //Obtiene el permiso que tiene el usuario para esa organizacion.
        //        if (_projectClassification.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
        //        { _permissionType = Common.Constants.PermissionManageName; }
        //        else
        //        { _permissionType = Common.Constants.PermissionViewName; }

        //        //Ya esta armado el DataTable, ahora lo carga
        //        foreach (Condesus.EMS.Business.Security.Entities.RightPerson _rightPerson in _projectClassification.SecurityPeople())
        //        {
        //            _dt.Rows.Add(_rightPerson.Post.Organization.IdOrganization,
        //                _rightPerson.Post.JobTitle.GeographicFunctionalAreas.GeographicArea.IdGeographicArea,
        //                _rightPerson.Post.JobTitle.GeographicFunctionalAreas.FunctionalArea.IdFunctionalArea,
        //                _rightPerson.Post.JobTitle.FunctionalPositions.Position.IdPosition,
        //                _rightPerson.Post.Person.IdPerson,
        //                _rightPerson.Post.Person.FullName,
        //                _rightPerson.Permission.LanguageOption.Name,
        //                _rightPerson.Permission.OwnerPermission.ClassName,
        //                //_rightPerson.RoleType.LanguageOption.Name,
        //                Common.ConstantsEntitiesName.IA.ProjectClassification,
        //                _rightPerson.Permission.IdPermission,
        //                _rightPerson.Permission.OwnerPermission.IdObject,
        //                _rightPerson.Permission.OwnerPermission.ClassName, _permissionType,
        //                _idProjectClassification);
        //        }
        //    }
        //    //Retorna el DataTable
        //    return _dt;
        //}
        ///// <summary>
        ///// Construye el DataTable a modo Property con los datos del RightPersonProjectClassification.
        ///// </summary>
        ///// <param name="param">Parametros opcionales para filtrar</param>
        ///// <returns>Un <c>DataTable</c></returns>
        //public DataTable RightPersonProjectClassification(Dictionary<String, Object> param)
        //{
        //    //Construye el datatable
        //    DataTable _dt = BuildDataTable("RightPersons");

        //    //Contruye las columnas y sus atributos.
        //    BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
        //    BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
        //    BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

        //    //POST
        //    Int64 _idProjectClassification = Convert.ToInt64(param["IdProjectClassification"]);
        //    Int64 _idGeographicArea = Convert.ToInt64(param["IdGeographicArea"]);
        //    Int64 _idFunctionalArea = Convert.ToInt64(param["IdFunctionalArea"]);
        //    Int64 _idPosition = Convert.ToInt64(param["IdPosition"]);
        //    Int64 _idPerson = Convert.ToInt64(param["IdPerson"]);
        //    Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);

        //    Int64 _idOwnerObject = Convert.ToInt64(param["IdOwnerObject"]);
        //    Int64 _idPermission = Convert.ToInt64(param["IdPermission"]);
        //    String _ownerClassName = Convert.ToString(param["OwnerClassName"]);

        //    Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
        //    GeographicArea _geoArea = EMSLibrary.User.GeographicInformationSystem.GeographicArea(_idGeographicArea);
        //    Position _position = _organization.Position(_idPosition);
        //    FunctionalArea _funArea = _organization.FunctionalArea(_idFunctionalArea);
        //    FunctionalPosition _funPos = _organization.FunctionalPosition(_position, _funArea);
        //    GeographicFunctionalArea _geoFunArea = _organization.GeographicFunctionalArea(_funArea, _geoArea);
        //    JobTitle _jobTitle = _organization.JobTitle(_geoFunArea, _funPos);

        //    Post _post = _organization.Post(_jobTitle, _organization.Person(_idPerson));
        //    Condesus.EMS.Business.Security.Entities.Permission _permission = EMSLibrary.User.Security.Permission(_idPermission, _ownerClassName, _idOwnerObject);
        //    Condesus.EMS.Business.Security.Entities.RightPerson _rightPerson = EMSLibrary.User.ImprovementAction.Map.ProjectClassification(_idProjectClassification).ReadPersonByID(_post, _permission);

        //    _dt.ExtendedProperties.Add("PageTitle", _post.Person.FullName);

        //    //Carga los datos
        //    LoadRightPersonData(ref _dt, _rightPerson);

        //    //Retorna el DataTable.
        //    return _dt;
        //}
        //#endregion

        //#region Risk Classification
        ///// <summary>
        ///// Construye el DataTable a modo List con los datos de la Coleccion RightJobTitles.
        ///// </summary>
        ///// <param name="param">Parametros opcionales para filtrar</param>
        ///// <returns>Un <c>DataTable</c></returns>
        //public DataTable RightJobTitleRiskClassifications(Dictionary<String, Object> param)
        //{
        //    DataTable _dt = BuildRightsJobTitlesColumns();

        //    ColumnOptions _columnOptions = new ColumnOptions();
        //    _columnOptions.ColumnCaption = Resources.CommonListManage.IdRiskClassification;
        //    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
        //    _columnOptions.IsPrimaryKey = true;
        //    _columnOptions.DisplayInCombo = false;
        //    _columnOptions.DisplayInManage = false;
        //    _columnOptions.IsSearchable = false;
        //    _columnOptions.AllowNull = false;
        //    BuildColumnsDataTable(ref _dt, "IdRiskClassification", _columnOptions);

        //    //Cuando implementemos la opcion de traer todo en un filtro.
        //    Boolean _showAll = false;
        //    if (ValidateSelectedItemComboBox(param, ref _showAll))
        //    {
        //        Int64 _idRiskClassification = Convert.ToInt64(param["IdRiskClassification"]);
        //        RiskClassification _riskClassification = EMSLibrary.User.RiskManagement.Map.RiskClassification(_idRiskClassification);
        //        String _permissionType = String.Empty;
        //        //Obtiene el permiso que tiene el usuario para esa organizacion.
        //        if (_riskClassification.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
        //        { _permissionType = Common.Constants.PermissionManageName; }
        //        else
        //        { _permissionType = Common.Constants.PermissionViewName; }

        //        //Ya esta armado el DataTable, ahora lo carga
        //        foreach (Condesus.EMS.Business.Security.Entities.RightJobTitle _rightJobTitle in _riskClassification.SecurityJobTitles())
        //        {
        //            _dt.Rows.Add(_rightJobTitle.JobTitle.Organization.IdOrganization, _rightJobTitle.JobTitle.GeographicFunctionalAreas.GeographicArea.IdGeographicArea,
        //                _rightJobTitle.JobTitle.GeographicFunctionalAreas.FunctionalArea.IdFunctionalArea,
        //                _rightJobTitle.JobTitle.FunctionalPositions.Position.IdPosition,
        //                _rightJobTitle.JobTitle.Name(),
        //                _rightJobTitle.Permission.LanguageOption.Name,
        //                _rightJobTitle.Permission.OwnerPermission.ClassName,
        //                //_rightJobTitle.RoleType.LanguageOption.Name,
        //                Common.ConstantsEntitiesName.RM.RiskClassification,
        //                _rightJobTitle.Permission.IdPermission,
        //                _rightJobTitle.Permission.OwnerPermission.IdObject,
        //                _rightJobTitle.Permission.OwnerPermission.ClassName, _permissionType,
        //                _idRiskClassification);
        //        }
        //    }
        //    //Retorna el DataTable
        //    return _dt;
        //}
        ///// <summary>
        ///// Construye el DataTable a modo Property con los datos del RightJobTitleRiskClassification.
        ///// </summary>
        ///// <param name="param">Parametros opcionales para filtrar</param>
        ///// <returns>Un <c>DataTable</c></returns>
        //public DataTable RightJobTitleRiskClassification(Dictionary<String, Object> param)
        //{
        //    //Construye el datatable
        //    DataTable _dt = BuildDataTable("RightJobTitles");

        //    //Contruye las columnas y sus atributos.
        //    BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
        //    BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
        //    BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

        //    //JT
        //    Int64 _idRiskClassification = Convert.ToInt64(param["IdRiskClassification"]);
        //    Int64 _idGeographicArea = Convert.ToInt64(param["IdGeographicArea"]);
        //    Int64 _idFunctionalArea = Convert.ToInt64(param["IdFunctionalArea"]);
        //    Int64 _idPosition = Convert.ToInt64(param["IdPosition"]);
        //    Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);

        //    Int64 _idOwnerObject = Convert.ToInt64(param["IdOwnerObject"]);
        //    Int64 _idPermission = Convert.ToInt64(param["IdPermission"]);
        //    String _ownerClassName = Convert.ToString(param["OwnerClassName"]);

        //    Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
        //    GeographicArea _geoArea = EMSLibrary.User.GeographicInformationSystem.GeographicArea(_idGeographicArea);
        //    Position _position = _organization.Position(_idPosition);
        //    FunctionalArea _funArea = _organization.FunctionalArea(_idFunctionalArea);
        //    FunctionalPosition _funPos = _organization.FunctionalPosition(_position, _funArea);
        //    GeographicFunctionalArea _geoFunArea = _organization.GeographicFunctionalArea(_funArea, _geoArea);
        //    JobTitle _jobTitle = _organization.JobTitle(_geoFunArea, _funPos);

        //    //JobTitle _jobTitle = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization).JobTitle(_idGeographicArea, _idPosition, _idFunctionalArea);
        //    Condesus.EMS.Business.Security.Entities.Permission _permission = EMSLibrary.User.Security.Permission(_idPermission, _ownerClassName, _idOwnerObject);
        //    Condesus.EMS.Business.Security.Entities.RightJobTitle _rightJobTitle = EMSLibrary.User.RiskManagement.Map.RiskClassification(_idRiskClassification).ReadJobTitleByID(_jobTitle, _permission);

        //    _dt.ExtendedProperties.Add("PageTitle", _jobTitle.Name());

        //    //Carga los datos
        //    LoadRightJobTitleData(ref _dt, _rightJobTitle);

        //    //Retorna el DataTable.
        //    return _dt;
        //}

        ///// <summary>
        ///// Construye el DataTable a modo List con los datos de la Coleccion RightPersonRiskClassifications.
        ///// </summary>
        ///// <param name="param">Parametros opcionales para filtrar</param>
        ///// <returns>Un <c>DataTable</c></returns>
        //public DataTable RightPersonRiskClassifications(Dictionary<String, Object> param)
        //{
        //    DataTable _dt = BuildRightsPostsColumns();

        //    ColumnOptions _columnOptions = new ColumnOptions();
        //    _columnOptions.ColumnCaption = Resources.CommonListManage.IdRiskClassification;
        //    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
        //    _columnOptions.IsPrimaryKey = true;
        //    _columnOptions.DisplayInCombo = false;
        //    _columnOptions.DisplayInManage = false;
        //    _columnOptions.IsSearchable = false;
        //    _columnOptions.AllowNull = false;
        //    BuildColumnsDataTable(ref _dt, "IdRiskClassification", _columnOptions);

        //    //Cuando implementemos la opcion de traer todo en un filtro.
        //    Boolean _showAll = false;
        //    if (ValidateSelectedItemComboBox(param, ref _showAll))
        //    {
        //        Int64 _idRiskClassification = Convert.ToInt64(param["IdRiskClassification"]);
        //        RiskClassification _riskClassification = EMSLibrary.User.RiskManagement.Map.RiskClassification(_idRiskClassification);
        //        String _permissionType = String.Empty;
        //        //Obtiene el permiso que tiene el usuario para esa organizacion.
        //        if (_riskClassification.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
        //        { _permissionType = Common.Constants.PermissionManageName; }
        //        else
        //        { _permissionType = Common.Constants.PermissionViewName; }

        //        //Ya esta armado el DataTable, ahora lo carga
        //        foreach (Condesus.EMS.Business.Security.Entities.RightPerson _rightPerson in _riskClassification.SecurityPeople())
        //        {
        //            _dt.Rows.Add(_rightPerson.Post.Organization.IdOrganization,
        //                _rightPerson.Post.JobTitle.GeographicFunctionalAreas.GeographicArea.IdGeographicArea,
        //                _rightPerson.Post.JobTitle.GeographicFunctionalAreas.FunctionalArea.IdFunctionalArea,
        //                _rightPerson.Post.JobTitle.FunctionalPositions.Position.IdPosition,
        //                _rightPerson.Post.Person.IdPerson,
        //                _rightPerson.Post.Person.FullName,
        //                _rightPerson.Permission.LanguageOption.Name,
        //                _rightPerson.Permission.OwnerPermission.ClassName,
        //                //_rightPerson.RoleType.LanguageOption.Name,
        //                Common.ConstantsEntitiesName.RM.RiskClassification,
        //                _rightPerson.Permission.IdPermission,
        //                _rightPerson.Permission.OwnerPermission.IdObject,
        //                _rightPerson.Permission.OwnerPermission.ClassName, _permissionType,
        //                _idRiskClassification);
        //        }
        //    }
        //    //Retorna el DataTable
        //    return _dt;
        //}
        ///// <summary>
        ///// Construye el DataTable a modo Property con los datos del RightPersonRiskClassification.
        ///// </summary>
        ///// <param name="param">Parametros opcionales para filtrar</param>
        ///// <returns>Un <c>DataTable</c></returns>
        //public DataTable RightPersonRiskClassification(Dictionary<String, Object> param)
        //{
        //    //Construye el datatable
        //    DataTable _dt = BuildDataTable("RightPersons");

        //    //Contruye las columnas y sus atributos.
        //    BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
        //    BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));
        //    BuildColumnsDataTable(ref _dt, "KeyValueLink", SetColumnLinkViewer());

        //    //POST
        //    Int64 _idRiskClassification = Convert.ToInt64(param["IdRiskClassification"]);
        //    Int64 _idGeographicArea = Convert.ToInt64(param["IdGeographicArea"]);
        //    Int64 _idFunctionalArea = Convert.ToInt64(param["IdFunctionalArea"]);
        //    Int64 _idPosition = Convert.ToInt64(param["IdPosition"]);
        //    Int64 _idPerson = Convert.ToInt64(param["IdPerson"]);
        //    Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);

        //    Int64 _idOwnerObject = Convert.ToInt64(param["IdOwnerObject"]);
        //    Int64 _idPermission = Convert.ToInt64(param["IdPermission"]);
        //    String _ownerClassName = Convert.ToString(param["OwnerClassName"]);

        //    Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
        //    GeographicArea _geoArea = EMSLibrary.User.GeographicInformationSystem.GeographicArea(_idGeographicArea);
        //    Position _position = _organization.Position(_idPosition);
        //    FunctionalArea _funArea = _organization.FunctionalArea(_idFunctionalArea);
        //    FunctionalPosition _funPos = _organization.FunctionalPosition(_position, _funArea);
        //    GeographicFunctionalArea _geoFunArea = _organization.GeographicFunctionalArea(_funArea, _geoArea);
        //    JobTitle _jobTitle = _organization.JobTitle(_geoFunArea, _funPos);

        //    Post _post = _organization.Post(_jobTitle, _organization.Person(_idPerson));
        //    Condesus.EMS.Business.Security.Entities.Permission _permission = EMSLibrary.User.Security.Permission(_idPermission, _ownerClassName, _idOwnerObject);
        //    Condesus.EMS.Business.Security.Entities.RightPerson _rightPerson = EMSLibrary.User.RiskManagement.Map.RiskClassification(_idRiskClassification).ReadPersonByID(_post, _permission);

        //    _dt.ExtendedProperties.Add("PageTitle", _post.Person.FullName);

        //    //Carga los datos
        //    LoadRightPersonData(ref _dt, _rightPerson);

        //    //Retorna el DataTable.
        //    return _dt;
        //}
        //#endregion

        #region Permission
            /// <summary>
            /// Construye el DataTable a modo List con los datos de la Coleccion Permission.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable Permissions(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable("Permission");

                //Contruye las columnas y sus atributos.
                ColumnOptions _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdPermission;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdPermission", _columnOptions);


                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Name;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = true;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = true;
                _columnOptions.IsSortedBy = true;
                BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Description;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = true;
                BuildColumnsDataTable(ref _dt, "Description", _columnOptions);

                foreach (Condesus.EMS.Business.Security.Entities.Permission _permission in EMSLibrary.User.Security.Permissions().Values)
                {
                    _dt.Rows.Add(_permission.IdPermission, _permission.LanguageOption.Name, _permission.IdPermission.ToString());
                }

                //Retorna el DataTable
                return _dt;
            }
        #endregion

        #endregion

        #endregion

        #region Dashboard

        #region Tasks Summary

        #region Bulk Load (Excel files)
            /// <summary>
            /// Construye el DataTable a modo List con los datos de la Coleccion Bulk Load.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable BulkLoad(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable("BulkLoad");

                //Contruye las columnas y sus atributos.
                ColumnOptions _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdExcelFile;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdExcelFile", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Name;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = true;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = true;
                _columnOptions.IsSortedBy = true;
                BuildColumnsDataTable(ref _dt, "Name", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

                String _permissionType = String.Empty;
                //Si vienen en la coleccion es que tiene permisos!
                _permissionType = Common.Constants.PermissionManageName; 

                //Ya esta armado el DataTable, ahora lo carga
                foreach (ConfigurationExcelFile _configurationExcelFile in EMSLibrary.User.Dashboard.ConfigurationExcelFiles.Values)
                {
                    _dt.Rows.Add(_configurationExcelFile.IdExcelFile, Common.Functions.ReplaceIndexesTags(_configurationExcelFile.Name), _permissionType);
                }

                //Retorna el DataTable
                return _dt;
            }
        #endregion


        #region All Executions Executed
            /// <summary>
            /// Construye el DataTable a modo List con los datos de la Coleccion All Executions.
            /// </summary>
            /// <param name="param">Parametros opcionales para filtrar</param>
            /// <returns>Un <c>DataTable</c></returns>
            public DataTable ProcessTaskExecutionExecuted(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable("ActiveTask");

                //Contruye las columnas y sus atributos.
                ColumnOptions _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdTask;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdTask", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdExecution;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdExecution", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Project;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = true;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = true;
                _columnOptions.IsSortedBy = true;
                BuildColumnsDataTable(ref _dt, "Project", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Title;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = true;
                _columnOptions.IsSortedBy = true;
                BuildColumnsDataTable(ref _dt, "Title", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.StartDate;
                _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = true;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "StartDate", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.EndDate;
                _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = true;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "EndDate", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Description;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "Description", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.TypeExecution;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "Type", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.TypeExecution;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "TypeExecution", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdActivity;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdActivity", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdMethodology;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdMethodology", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdFacilityType;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdFacilityType", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdFacility;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref _dt, "IdFacility", _columnOptions);

                //Ya esta armado el DataTable, ahora lo carga
                var _tasks = from t in EMSLibrary.User.Dashboard.TaskOperator
                             orderby t.LanguageOption.Title ascending
                             select t;
                foreach (ProcessTask _processTask in _tasks)
                {
                    String _type = GetGlobalResourceObject("CommonListManage", _processTask.GetType().Name).ToString();
                    //Obtiene si este usuario es operador sobre esta tarea
                    Condesus.EMS.Business.DS.Entities.Post _post = _processTask.ExecutionPermission(EMSLibrary.User.Person);
                    String _permissionType = String.Empty;
                    //Si el puesto no es null...quiere decir que es un Operador de esta tarea.
                    if (_post != null)
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    String _processTitle = _processTask.Parent.LanguageOption.Title;
                    String _taskTitle = _processTask.LanguageOption.Title;

                    var _executions = from e in _processTask.ProcessTaskExecutionsOnly.Values
                                      where e.Post != null
                                      select e;
                    foreach (ProcessTaskExecution _processTaskExecution in _executions)
                    {
                        ProcessTaskMeasurement _processTaskMeasurement = null;// = (ProcessTaskMeasurement)_processTaskExecution.ProcessTask;
                        if (_processTaskExecution.ProcessTask.GetType().Name == "ProcessTaskMeasurement")
                        {
                            _processTaskMeasurement = (ProcessTaskMeasurement)_processTaskExecution.ProcessTask;
                        }

                        String _description = String.Empty;
                        switch (_processTaskExecution.ProcessTask.GetType().Name)
                        {
                            case "ProcessTaskMeasurement":
                                _description = Resources.CommonListManage.DataForThePeriod + " " + GetPeriodOfMeasurement(_processTaskExecution);
                                break;
                            case "ProcessTaskCalibration":
                                //Device type – Measurement device
                                MeasurementDevice _measurementDevice = ((ProcessTaskCalibration)_processTaskExecution.ProcessTask).MeasurementDevice;
                                _description = _measurementDevice.DeviceType.LanguageOption.Name + " - " + _measurementDevice.FullName;
                                break;
                            case "ProcessTaskOperation":
                                _description = ((ProcessTaskOperation)_processTaskExecution.ProcessTask).Comment;
                                break;
                        }
                        _dt.Rows.Add(_processTask.IdProcess,
                                 _processTaskExecution.IdExecution,
                                 _processTitle,
                                 _taskTitle,
                                 _processTaskExecution.Date.ToLongDateString() + " " + _processTaskExecution.Date.ToLongTimeString(),
                                 _processTaskExecution.EndDate.ToLongDateString() + " " + _processTaskExecution.EndDate.ToLongTimeString(),
                                 _description,
                                 _type, _processTask.GetType().Name, _permissionType,
                        //Agregado para filtros...
                       _processTaskExecution.ProcessTask.GetType().Name == "ProcessTaskMeasurement" ? _processTaskMeasurement.AccountingActivity == null ? 0 : _processTaskMeasurement.AccountingActivity.IdActivity : 0,
                       _processTaskExecution.ProcessTask.GetType().Name == "ProcessTaskMeasurement" ? _processTaskMeasurement.Measurement.Methodology == null ? 0 : _processTaskMeasurement.Measurement.Methodology.IdMethodology : 0,
                       _processTaskExecution.ProcessTask.GetType().Name == "ProcessTaskMeasurement" ? _processTaskMeasurement.Site == null ? 0 : GetFacility(_processTaskMeasurement.Site).FacilityType.IdFacilityType : 0,
                       _processTaskExecution.ProcessTask.GetType().Name == "ProcessTaskMeasurement" ? _processTaskMeasurement.Site == null ? 0 : GetFacility(_processTaskMeasurement.Site).IdFacility : 0);
                    }
                }



                //Cuando implementemos la opcion de traer todo en un filtro.
                //Boolean _showAll = false;
                //if (ValidateSelectedItemComboBox(param, ref _showAll))
                //{
                //    //Ya esta armado el DataTable, ahora lo carga
                //    foreach (ProcessTask _processTask in EMSLibrary.User.Dashboard.TaskOperator)
                //    {
                //        //String _type = HttpContext.GetLocalResourceObject("/Dashboard/Dashboard.aspx", _processTask.GetType().Name).ToString();
                //        String _type = GetGlobalResourceObject("CommonListManage", _processTask.GetType().Name).ToString();
                //        //Obtiene si este usuario es operador sobre esta tarea
                //        Condesus.EMS.Business.DS.Entities.Post _post = _processTask.ExecutionPermission(EMSLibrary.User.Person);
                //        String _permissionType = String.Empty;
                //        //Si el puesto no es null...quiere decir que es un Operador de esta tarea.
                //        if (_post != null)
                //            { _permissionType = Common.Constants.PermissionManageName; }
                //        else
                //            { _permissionType = Common.Constants.PermissionViewName; }

                //        String _processTitle = _processTask.Parent.LanguageOption.Title;
                //        String _taskTitle = _processTask.LanguageOption.Title;

                //        foreach (ProcessTaskExecution _processTaskExecution in _processTask.ProcessTaskExecutionsOnly.Values)
                //        {
                //            //Las tareas finalizadas no se muestran.., porque ya se ejecutaron
                //            String _taskState = _processTaskExecution.State;
                //            if (_taskState != Condesus.EMS.Business.Common.Resources.ConstantMessage.ProcessState_Finished)
                //            {
                //                String _fullNamePost = String.Empty;

                //                _dt.Rows.Add(_processTask.IdProcess,
                //                         _processTaskExecution.IdExecution,
                //                         _processTitle,
                //                         _taskTitle,
                //                         _processTaskExecution.Date.ToLongDateString() + " " + _processTaskExecution.Date.ToLongTimeString(),
                //                         _processTaskExecution.EndDate.ToLongDateString() + " " + _processTaskExecution.EndDate.ToLongTimeString(),
                //                         _taskState,
                //                         _type, _processTask.GetType().Name, _permissionType, _fullNamePost,
                //                    //Agregado para filtros...
                //               _processTaskExecution.ProcessTask.GetType().Name == "ProcessTaskMeasurement" ? ((ProcessTaskMeasurement)_processTaskExecution.ProcessTask).AccountingActivity == null ? 0 : ((ProcessTaskMeasurement)_processTaskExecution.ProcessTask).AccountingActivity.IdActivity : 0,
                //               _processTaskExecution.ProcessTask.GetType().Name == "ProcessTaskMeasurement" ? ((ProcessTaskMeasurement)_processTaskExecution.ProcessTask).Measurement.Methodology == null ? 0 : ((ProcessTaskMeasurement)_processTaskExecution.ProcessTask).Measurement.Methodology.IdMethodology : 0,
                //               _processTaskExecution.ProcessTask.GetType().Name == "ProcessTaskMeasurement" ? ((ProcessTaskMeasurement)_processTaskExecution.ProcessTask).Site == null ? 0 : GetFacility(((ProcessTaskMeasurement)_processTaskExecution.ProcessTask).Site).FacilityType.IdFacilityType : 0,
                //               _processTaskExecution.ProcessTask.GetType().Name == "ProcessTaskMeasurement" ? ((ProcessTaskMeasurement)_processTaskExecution.ProcessTask).Site == null ? 0 : GetFacility(((ProcessTaskMeasurement)_processTaskExecution.ProcessTask).Site).IdFacility : 0);
                //            }
                //        }
                //    }
                //}
                //Retorna el DataTable
                return _dt;
            }
        #endregion

        #region Active Tasks
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion ActiveTasks.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ActiveTasks(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ActiveTask");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdTask;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdTask", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdExecution;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdExecution", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Project;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Project", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Site;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            _columnOptions.IsContextMenuCaption = false;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Site", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Title;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Title", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.StartDate;
            _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "StartDate", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.EndDate;
            _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "EndDate", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Description;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Description", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.State;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "State", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.TypeExecution;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Type", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.TypeExecution;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "TypeExecution", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Post;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = true;
            _columnOptions.IsContextMenuCaption = false;
            _columnOptions.IsSortedBy = false;
            BuildColumnsDataTable(ref _dt, "Post", _columnOptions);


            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdActivity;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdActivity", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdMethodology;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdMethodology", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdFacilityType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdFacilityType", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdFacility;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdFacility", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            //Ya esta armado el DataTable, ahora lo carga
            foreach (ProcessTaskExecution _processTaskExecution in EMSLibrary.User.Dashboard.TasksWorking.Values)
            {   //Ahora solo quieren mostrar las working...
                if (_processTaskExecution.State == Condesus.EMS.Business.Common.Resources.ConstantMessage.ProcessState_Working) //"Working")
                {
                    //String _type = HttpContext.GetLocalResourceObject("/Dashboard/Dashboard.aspx", _processTaskExecution.ProcessTask.GetType().Name).ToString();
                    String _type = GetGlobalResourceObject("CommonListManage", _processTaskExecution.ProcessTask.GetType().Name).ToString();
                    //Obtiene si este usuario es operador sobre esta tarea
                    Condesus.EMS.Business.DS.Entities.Post _post = _processTaskExecution.ProcessTask.ExecutionPermission(EMSLibrary.User.Person);
                    String _permissionType = String.Empty;
                    //Si el puesto no es null...quiere decir que es un Operador de esta tarea. sino la dejo como view..
                    if (_post != null)
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    String _fullNamePost = String.Empty;

                    String _site = Resources.CommonListManage.TaskWithoutFacility;
                    if (_processTaskExecution.ProcessTask.Site != null)
                    {
                        _site = _processTaskExecution.ProcessTask.Site.LanguageOption.Name;
                    }
                    String _description = String.Empty;
                    switch ( _processTaskExecution.ProcessTask.GetType().Name)
                    {
                        case  "ProcessTaskMeasurement":
                            _description = Resources.CommonListManage.DataForThePeriod + " " + GetPeriodOfMeasurement(_processTaskExecution);
                            break;
                        case "ProcessTaskCalibration":
                            //Device type – Measurement device
                            MeasurementDevice _measurementDevice =((ProcessTaskCalibration)_processTaskExecution.ProcessTask).MeasurementDevice;
                            _description = _measurementDevice.DeviceType.LanguageOption.Name + " - " + _measurementDevice.FullName;
                            break;
                        case "ProcessTaskOperation":
                            _description = ((ProcessTaskOperation)_processTaskExecution.ProcessTask).Comment;
                            break;
                    }
                    _dt.Rows.Add(_processTaskExecution.ProcessTask.IdProcess,
                             _processTaskExecution.IdExecution,
                             _processTaskExecution.ProcessTask.Parent.LanguageOption.Title,
                             _site,
                             Common.Functions.ReplaceIndexesTags(_processTaskExecution.ProcessTask.LanguageOption.Title),
                             _processTaskExecution.Date.ToLongDateString() + " " + _processTaskExecution.Date.ToLongTimeString(),
                             _processTaskExecution.EndDate.ToLongDateString() + " " + _processTaskExecution.EndDate.ToLongTimeString(),
                             _description,  //Nuevo
                             _processTaskExecution.State,
                             _type, _processTaskExecution.ProcessTask.GetType().Name, _permissionType, _fullNamePost,
                        //Agregado para filtros...
                           _processTaskExecution.ProcessTask.GetType().Name == "ProcessTaskMeasurement" ? ((ProcessTaskMeasurement)_processTaskExecution.ProcessTask).AccountingActivity == null ? 0 : ((ProcessTaskMeasurement)_processTaskExecution.ProcessTask).AccountingActivity.IdActivity : 0,
                           _processTaskExecution.ProcessTask.GetType().Name == "ProcessTaskMeasurement" ? ((ProcessTaskMeasurement)_processTaskExecution.ProcessTask).Measurement.Methodology == null ? 0 : ((ProcessTaskMeasurement)_processTaskExecution.ProcessTask).Measurement.Methodology.IdMethodology : 0,
                           _processTaskExecution.ProcessTask.GetType().Name == "ProcessTaskMeasurement" ? ((ProcessTaskMeasurement)_processTaskExecution.ProcessTask).Site == null ? 0 : GetFacility(((ProcessTaskMeasurement)_processTaskExecution.ProcessTask).Site).FacilityType.IdFacilityType : 0,
                           _processTaskExecution.ProcessTask.GetType().Name == "ProcessTaskMeasurement" ? ((ProcessTaskMeasurement)_processTaskExecution.ProcessTask).Site == null ? 0 : GetFacility(((ProcessTaskMeasurement)_processTaskExecution.ProcessTask).Site).IdFacility : 0);
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        private String GetPeriodOfMeasurement(ProcessTaskExecution processTaskExecution)
        {
            String _description = String.Empty;
            /*TODO ESTO LO COMENTO, YA QUE LA LIBRERIA NO FUNCIONA!!! 18-12-2013 RUBEN
            DateTime _startDate = ((ProcessTaskExecutionMeasurement)processTaskExecution).MeasureStartDate;
            DateTime _endDate = ((ProcessTaskExecutionMeasurement)processTaskExecution).MeasureEndDate;

            //Devuelve la fecha inicio y fin (Arma el periodo...)
            _description = _startDate.ToShortDateString() + " " + _startDate.ToShortTimeString()
                + " - " + _endDate.ToShortDateString() + " " + _endDate.ToShortTimeString();

            return _description;
            */


            DateTime _nextDateExecution = Common.Functions.CalculateNextDate(processTaskExecution.ProcessTask.TimeUnitInterval, processTaskExecution.ProcessTask.Interval, processTaskExecution.Date);
            DateTime _startDate = processTaskExecution.Date;
            DateTime _endDate = DateTime.MinValue;
            Measurement _measurement = ((ProcessTaskMeasurement)processTaskExecution.ProcessTask).Measurement;
            DateTime _startDateReturn = DateTime.MinValue;
            DateTime _endDateReturn = DateTime.MinValue;

            //Si la medicion es Regresiva, entonces la fecha de la Ejecucion es la Final
            //if (_measurement.IsRegressive)
            //{
            //    _endDate = processTaskExecution.Date;
            //    _startDate = DateTime.MinValue;

            //    //Al ser Regresiva, tengo que ir para atras...y la fecha de la medicion es la misma que la fecha Fin
            //    _startDate = Common.Functions.CalculateNextDate(_measurement.TimeUnitFrequency, -(_measurement.Frequency), _endDate);

            //    while (_endDate < _nextDateExecution)
            //    {   //Me quedo con la ultima fecha
            //        _dateReturn = _endDate;
            //        _endDate = Common.Functions.CalculateNextDate(_measurement.TimeUnitFrequency, _measurement.Frequency, _endDate);
            //    }
            //}
            //else
            //{
            //    while (_endDate < _nextDateExecution)
            //    {   //Me quedo con la ultima fecha
            //        _endDate = Common.Functions.CalculateNextDate(_measurement.TimeUnitFrequency, _measurement.Frequency, _startDate);
            //        _dateReturn = _endDate;
            //        _startDate = _endDate;
            //    }
            //}
            if (_measurement.IsRegressive)
            {
                _endDate = processTaskExecution.Date;
                _startDate = DateTime.MinValue;

                while (_endDate < _nextDateExecution)
                {
                    //Al ser Regresiva, tengo que ir para atras...y la fecha de la medicion es la misma que la fecha Fin
                    _startDate = Common.Functions.CalculateNextDate(_measurement.TimeUnitFrequency, -(_measurement.Frequency), _endDate);

                    _startDateReturn = _startDate;
                    _endDateReturn = _endDate;
                    //_dt.Rows.Add(_endDate, String.Empty, _startDate, _endDate);

                    _endDate = Common.Functions.CalculateNextDate(_measurement.TimeUnitFrequency, _measurement.Frequency, _endDate);
                }
            }
            else
            {
                while (_endDate < _nextDateExecution)
                {
                    _endDate = Common.Functions.CalculateNextDate(_measurement.TimeUnitFrequency, _measurement.Frequency, _startDate);

                    _startDateReturn = _startDate;
                    _endDateReturn = _endDate;
                    //_dt.Rows.Add(_startDate, String.Empty, _startDate, _endDate);

                    _startDate = _endDate;
                }
            }

            //((ProcessTaskExecutionMeasurement)processTaskExecution).MeasureStartDate
            //((ProcessTaskExecutionMeasurement)processTaskExecution).MeasureEndDate

            //Devuelve la fecha inicio y fin (Arma el periodo...)
            _description = _startDateReturn.ToShortDateString() + " " + _startDateReturn.ToShortTimeString()
                + " - " + _endDateReturn.ToShortDateString() + " " + _endDateReturn.ToShortTimeString();

            return _description;
        }

        public DataTable DatesOfActiveTasks(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("DatesOfActiveTasks");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.StartDate;
            _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "StartDate", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            //Ya esta armado el DataTable, ahora lo carga

            var _datesOfWorkingTask = (from _dowt in EMSLibrary.User.Dashboard.TasksWorking.Values
                                       select _dowt.Date.ToShortDateString()).Distinct();

            foreach (var _dateOfTask in _datesOfWorkingTask)
            {
                _dt.Rows.Add(Convert.ToDateTime(_dateOfTask));
            }

            //Retorna el DataTable
            return _dt;
        }

        #endregion

        #region OverDue Tasks
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion OverDueTasks.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable OverDueTasks(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("OverDueTask");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdTask;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdTask", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdExecution;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdExecution", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Project;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Project", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Site;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            _columnOptions.IsContextMenuCaption = false;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Site", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Title;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = false;
            BuildColumnsDataTable(ref _dt, "Title", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.StartDate;
            _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsSortedBy = true;
            _columnOptions.SortOrder = Telerik.Web.UI.GridSortOrder.Ascending;
            BuildColumnsDataTable(ref _dt, "StartDate", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.EndDate;
            _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "EndDate", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Description;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Description", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.State;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "State", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.TypeExecution;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Type", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.TypeExecution;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "TypeExecution", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdActivity;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdActivity", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdMethodology;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdMethodology", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdFacilityType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdFacilityType", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdFacility;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdFacility", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            //Ya esta armado el DataTable, ahora lo carga
            //IEnumerable<DataRow> _overdueTask = from _tod in EMSLibrary.User.Dashboard.TaskOverdue.Values.AsEnumerable()
            //                   select new
            //                   {
            //                       _tod.ProcessTask.IdProcess,
            //                       _tod.IdExecution,
            //                       _processTitle = _tod.ProcessTask.Parent.LanguageOption.Title,
            //                       _taskTitle = _tod.ProcessTask.LanguageOption.Title,
            //                       _date = _tod.Date.ToLongDateString() + " " + _tod.Date.ToLongTimeString(),
            //                       Condesus.EMS.Business.Common.Resources.ConstantMessage.ProcessState_OverDue,
            //                       _type =GetGlobalResourceObject("CommonListManage", _tod.ProcessTask.GetType().Name).ToString(),
            //                       //_type = _tod.ProcessTask.GetType().Name,
            //                       _taskTypeName = _tod.ProcessTask.GetType().Name,
            //                       _permissionType = Common.Constants.PermissionManageName
            //                   };
            //// Create a table from the query.
            //_dt = _overdueTask.CopyToDataTable<DataRow>();

            var _overdueTask = from _tod in EMSLibrary.User.Dashboard.TaskOverdue.Values
                               select new
                               {
                                   _tod.ProcessTask.IdProcess,
                                   _tod.IdExecution,
                                   _processTitle = _tod.ProcessTask.Parent.LanguageOption.Title,
                                   _taskTitle = _tod.ProcessTask.LanguageOption.Title,
                                   _date = _tod.Date.ToLongDateString() + " " + _tod.Date.ToLongTimeString(),
                                   _state = Condesus.EMS.Business.Common.Resources.ConstantMessage.ProcessState_OverDue,
                                   _type = GetGlobalResourceObject("CommonListManage", _tod.ProcessTask.GetType().Name).ToString(),
                                   //_type = _tod.ProcessTask.GetType().Name,
                                   _taskTypeName = _tod.ProcessTask.GetType().Name,
                                   _permissionType = Common.Constants.PermissionManageName,
                                   //Agregado para filtros...
                                   _activity = _tod.ProcessTask.GetType().Name == "ProcessTaskMeasurement" ? ((ProcessTaskMeasurement)_tod.ProcessTask).AccountingActivity == null ? 0 : ((ProcessTaskMeasurement)_tod.ProcessTask).AccountingActivity.IdActivity : 0,
                                   _methodology = _tod.ProcessTask.GetType().Name == "ProcessTaskMeasurement" ? ((ProcessTaskMeasurement)_tod.ProcessTask).Measurement.Methodology == null ? 0 : ((ProcessTaskMeasurement)_tod.ProcessTask).Measurement.Methodology.IdMethodology : 0,
                                   _facilityType = _tod.ProcessTask.GetType().Name == "ProcessTaskMeasurement" ? ((ProcessTaskMeasurement)_tod.ProcessTask).Site == null ? 0 : GetFacility(((ProcessTaskMeasurement)_tod.ProcessTask).Site).FacilityType.IdFacilityType : 0,
                                   _facility = _tod.ProcessTask.GetType().Name == "ProcessTaskMeasurement" ? ((ProcessTaskMeasurement)_tod.ProcessTask).Site == null ? 0 : GetFacility(((ProcessTaskMeasurement)_tod.ProcessTask).Site).IdFacility : 0,
                                   _site = _tod.ProcessTask.Site,
                                   _startDate = _tod.Date.ToLongDateString() + " " + _tod.Date.ToLongTimeString(),
                                   _endDate = _tod.EndDate.ToLongDateString() + " " + _tod.EndDate.ToLongTimeString(),
                                   _objTaskExecution=_tod
                               };

            foreach (var _processTaskExecution in _overdueTask)
            {
                String _site = Resources.CommonListManage.TaskWithoutFacility;
                if (_processTaskExecution._site != null)
                {
                    _site = _processTaskExecution._site.LanguageOption.Name;
                }
                String _description = String.Empty;
                switch ( _processTaskExecution._taskTypeName)
                {
                    case  "ProcessTaskMeasurement":
                        _description = Resources.CommonListManage.DataForThePeriod + " " + GetPeriodOfMeasurement(_processTaskExecution._objTaskExecution);
                        break;
                    case "ProcessTaskCalibration":
                        //Device type – Measurement device
                        MeasurementDevice _measurementDevice =((ProcessTaskCalibration)_processTaskExecution._objTaskExecution.ProcessTask).MeasurementDevice;
                        _description = _measurementDevice.DeviceType.LanguageOption.Name + " - " + _measurementDevice.FullName;
                        break;
                    case "ProcessTaskOperation":
                        _description = ((ProcessTaskOperation)_processTaskExecution._objTaskExecution.ProcessTask).Comment;
                        break;
                }

                //Si viene en el List, ya es operador.
                //String _permissionType = Common.Constants.PermissionManageName;
                _dt.Rows.Add(_processTaskExecution.IdProcess,
                         _processTaskExecution.IdExecution,
                         _processTaskExecution._processTitle,
                         _site,
                         Common.Functions.ReplaceIndexesTags(_processTaskExecution._taskTitle),
                         //_processTaskExecution._date,
                         _processTaskExecution._startDate,
                         _processTaskExecution._endDate,
                         _description,
                         _processTaskExecution._state,
                         _processTaskExecution._type,
                         _processTaskExecution._taskTypeName,
                         _processTaskExecution._permissionType,
                         _processTaskExecution._activity,
                         _processTaskExecution._methodology,
                         _processTaskExecution._facilityType,
                         _processTaskExecution._facility);
            }

            
            // load into existing DataTable - schemas match            
            //var query2 = from _tod in EMSLibrary.User.Dashboard.TaskOverdue.Values
            //             select new
            //             {
            //                 _tod.ProcessTask.IdProcess,
            //                 _tod.IdExecution,
            //                 _processTitle = _tod.ProcessTask.Parent.LanguageOption.Title,
            //                 _taskTitle = _tod.ProcessTask.LanguageOption.Title,
            //                 _date = _tod.Date.ToLongDateString() + " " + _tod.Date.ToLongTimeString(),
            //                 _state = Condesus.EMS.Business.Common.Resources.ConstantMessage.ProcessState_OverDue,
            //                 _type = GetGlobalResourceObject("CommonListManage", _tod.ProcessTask.GetType().Name).ToString(),
            //                 //_type = _tod.ProcessTask.GetType().Name,
            //                 _taskTypeName = _tod.ProcessTask.GetType().Name,
            //                 _permissionType = Common.Constants.PermissionManageName
            //             };

            //query2.CopyToDataTable(_dt, LoadOption.PreserveChanges);

            //foreach (ProcessTaskExecution _processTaskExecution in EMSLibrary.User.Dashboard.TaskOverdue.Values)
            //{
            //    ProcessTask _processTask = _processTaskExecution.ProcessTask;
            //    String _taskTypeName = _processTask.GetType().Name;
            //    String _type = GetGlobalResourceObject("CommonListManage", _taskTypeName).ToString();

            //    //Si viene en el List, ya es operador.
            //    String _permissionType = Common.Constants.PermissionManageName;

            //    _dt.Rows.Add(_processTask.IdProcess,
            //             _processTaskExecution.IdExecution,
            //             _processTask.Parent.LanguageOption.Title,
            //             _processTask.LanguageOption.Title,
            //             _processTaskExecution.Date.ToLongDateString() + " " + _processTaskExecution.Date.ToLongTimeString(),
            //        //_processTaskExecution.EndDate.ToLongDateString() + " " + _processTaskExecution.EndDate.ToLongTimeString(),
            //             Condesus.EMS.Business.Common.Resources.ConstantMessage.ProcessState_OverDue,   // _processTaskExecution.State,
            //             _type, _taskTypeName,
            //             _permissionType);
            //}
            
            //Retorna el DataTable
            return _dt;
        }
        private Facility GetFacility(Site site)
        {
            Facility _facility;
            //Si es un Sector...entonces hay que buscar el facility
            if (site.GetType().Name == "Sector")
            {
                Sector _sector = (Sector)site;
                while (_sector.Parent.GetType().Name != "Facility")
                {
                    _sector = (Sector)_sector.Parent;
                }
                _facility = (Facility)_sector.Parent;
            }
            else
            {   //Es facility, entonces va directo....
                _facility = (Facility)site;
            }

            return _facility;
        }
        public DataTable OverDueTasksNew(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("OverDueTask");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdTask;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdTask", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdExecution;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdExecution", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Project;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Project", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Title;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Title", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.StartDate;
            _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "StartDate", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.EndDate;
            _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "EndDate", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.State;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "State", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.TypeExecution;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Type", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.TypeExecution;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "TypeExecution", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            //_columnOptions = new ColumnOptions();
            //_columnOptions.ColumnCaption = Resources.CommonListManage.Post;
            //_columnOptions.ColumnDataType = System.Type.GetType("System.String");
            //_columnOptions.IsPrimaryKey = false;
            //_columnOptions.DisplayInCombo = false;
            //_columnOptions.DisplayInManage = false;
            //_columnOptions.IsSearchable = false;
            //_columnOptions.AllowNull = true;
            //_columnOptions.IsContextMenuCaption = false;
            //_columnOptions.IsSortedBy = false;
            //BuildColumnsDataTable(ref _dt, "Post", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                //Si viene en el List, ya es operador.
                String _permissionType = Common.Constants.PermissionManageName;
                foreach (ProcessGroupProcess _processGroupProcess in EMSLibrary.User.ProcessFramework.Map.ProcessGroupProcesses().Values)
                {
                    String _processTitle = _processGroupProcess.LanguageOption.Title;
                    foreach (ProcessTask _processTask in _processGroupProcess.ChildrenTask.Values)
                    {
                        String _taskTitle = _processTask.LanguageOption.Title;
                        String _taskTypeName = _processTask.GetType().Name;
                        String _type = GetGlobalResourceObject("CommonListManage", _taskTypeName).ToString();
                        String _state = "OverDue";

                        var _executions = from f in _processTask.ProcessTaskExecutions.Values
                                          where f.State == _state
                                          select f;

                        foreach (ProcessTaskExecution _processTaskExecution in _executions)
                        {
                            _dt.Rows.Add(_processTask.IdProcess,
                                 _processTaskExecution.IdExecution,
                                 _processTitle,
                                 _taskTitle,
                                 _processTaskExecution.Date.ToLongDateString() + " " + _processTaskExecution.Date.ToLongTimeString(),
                                 _processTaskExecution.Date.ToLongDateString() + " " + _processTaskExecution.Date.ToLongTimeString(),//_processTaskExecution.EndDate.ToLongDateString() + " " + _processTaskExecution.EndDate.ToLongTimeString(),
                                 "Overdue", //_processTaskExecution.State,
                                 _type, _taskTypeName,
                                 _permissionType);

                        }
                    }
                }
            }
            //Retorna el DataTable
            return _dt;
        }


        public DataTable DatesOfOverdueTasks(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("DatesOfOverdueTasks");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.StartDate;
            _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "StartDate", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            //Ya esta armado el DataTable, ahora lo carga

            var _datesOfOverdueTask = (from _doot in EMSLibrary.User.Dashboard.TaskOverdue.Values
                                       orderby _doot.Date
                                      select _doot.Date.ToShortDateString()).Distinct();

            foreach (var _dateOfTask in _datesOfOverdueTask)
            {
                _dt.Rows.Add(Convert.ToDateTime( _dateOfTask));
            }

            //Retorna el DataTable
            return _dt;
        }

        #endregion

        #region Planned Tasks
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion PlannedTasks.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable PlannedTasks(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("PlannedTask");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdTask;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdTask", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdExecution;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdExecution", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Project;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Project", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Site;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            _columnOptions.IsContextMenuCaption = false;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Site", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Title;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Title", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.StartDate;
            _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "StartDate", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.EndDate;
            _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "EndDate", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Description;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Description", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.State;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "State", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.TypeExecution;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Type", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.TypeExecution;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "TypeExecution", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdActivity;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdActivity", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdMethodology;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdMethodology", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdFacilityType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdFacilityType", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdFacility;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdFacility", _columnOptions);

            //_columnOptions = new ColumnOptions();
            //_columnOptions.ColumnCaption = Resources.CommonListManage.Post;
            //_columnOptions.ColumnDataType = System.Type.GetType("System.String");
            //_columnOptions.IsPrimaryKey = false;
            //_columnOptions.DisplayInCombo = false;
            //_columnOptions.DisplayInManage = false;
            //_columnOptions.IsSearchable = false;
            //_columnOptions.AllowNull = true;
            //_columnOptions.IsContextMenuCaption = false;
            //_columnOptions.IsSortedBy = false;
            //BuildColumnsDataTable(ref _dt, "Post", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                DateTime _date = DateTime.Now;
                if (param.ContainsKey("StartDate"))
                {
                    _date = Convert.ToDateTime(param["StartDate"]);
                }

                foreach (ProcessTaskExecution _processTaskExecution in EMSLibrary.User.Dashboard.TasksPlanned(_date).Values)
                {
                    ProcessTask _processTask = _processTaskExecution.ProcessTask;
                    String _processTaskType = _processTask.GetType().Name;
                    String _type = GetGlobalResourceObject("CommonListManage", _processTaskType).ToString();
                    //Si viene en el List, ya es Operador!
                    String _permissionType = Common.Constants.PermissionManageName;

                    String _site = Resources.CommonListManage.TaskWithoutFacility;
                    if (_processTask.Site != null)
                    {
                        _site = _processTask.Site.LanguageOption.Name;
                    }
                    String _description = String.Empty;
                    switch (_processTaskExecution.ProcessTask.GetType().Name)
                    {
                        case "ProcessTaskMeasurement":
                            _description = Resources.CommonListManage.DataForThePeriod + " " + GetPeriodOfMeasurement(_processTaskExecution);
                            break;
                        case "ProcessTaskCalibration":
                            //Device type – Measurement device
                            MeasurementDevice _measurementDevice = ((ProcessTaskCalibration)_processTaskExecution.ProcessTask).MeasurementDevice;
                            _description = _measurementDevice.DeviceType.LanguageOption.Name + " - " + _measurementDevice.FullName;
                            break;
                        case "ProcessTaskOperation":
                            _description = ((ProcessTaskOperation)_processTaskExecution.ProcessTask).Comment;
                            break;
                    }
                    _dt.Rows.Add(_processTask.IdProcess,
                             _processTaskExecution.IdExecution,
                             _processTask.Parent.LanguageOption.Title,
                             _site,
                             Common.Functions.ReplaceIndexesTags(_processTask.LanguageOption.Title),
                             _processTaskExecution.Date.ToLongDateString() + " " + _processTaskExecution.Date.ToLongTimeString(),
                             _processTaskExecution.EndDate.ToLongDateString() + " " + _processTaskExecution.EndDate.ToLongTimeString(),
                             _description,
                             _processTaskExecution.State,
                             _type, _processTaskType, _permissionType,
                            //Agregado para filtros...
                           _processTaskExecution.ProcessTask.GetType().Name == "ProcessTaskMeasurement" ? ((ProcessTaskMeasurement)_processTaskExecution.ProcessTask).AccountingActivity == null ? 0 : ((ProcessTaskMeasurement)_processTaskExecution.ProcessTask).AccountingActivity.IdActivity : 0,
                           _processTaskExecution.ProcessTask.GetType().Name == "ProcessTaskMeasurement" ? ((ProcessTaskMeasurement)_processTaskExecution.ProcessTask).Measurement.Methodology == null ? 0 : ((ProcessTaskMeasurement)_processTaskExecution.ProcessTask).Measurement.Methodology.IdMethodology : 0,
                           _processTaskExecution.ProcessTask.GetType().Name == "ProcessTaskMeasurement" ? ((ProcessTaskMeasurement)_processTaskExecution.ProcessTask).Site == null ? 0 : GetFacility(((ProcessTaskMeasurement)_processTaskExecution.ProcessTask).Site).FacilityType.IdFacilityType : 0,
                           _processTaskExecution.ProcessTask.GetType().Name == "ProcessTaskMeasurement" ? ((ProcessTaskMeasurement)_processTaskExecution.ProcessTask).Site == null ? 0 : GetFacility(((ProcessTaskMeasurement)_processTaskExecution.ProcessTask).Site).IdFacility : 0);
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        public DataTable DatesOfPlannedTasks(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("DatesOfPlannedTasks");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.StartDate;
            _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "StartDate", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            //Ya esta armado el DataTable, ahora lo carga

            var _datesOfPlannedTask = (from _dopt in EMSLibrary.User.Dashboard.TasksPlanned().Values
                                       select _dopt.Date.ToShortDateString()).Distinct();

            foreach (var _dateOfTask in _datesOfPlannedTask)
            {
                _dt.Rows.Add(Convert.ToDateTime(_dateOfTask));
            }

            //Retorna el DataTable
            return _dt;
        }

        #endregion

        #region Finished Tasks
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion FinishedTasks.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable FinishedTasks(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("FinishedTask");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdTask;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdTask", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdExecution;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdExecution", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Project;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Project", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Site;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = true;
            _columnOptions.IsContextMenuCaption = false;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Site", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Title;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Title", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.StartDate;
            _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "StartDate", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.EndDate;
            _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "EndDate", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Description;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Description", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.State;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "State", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.TypeExecution;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Type", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.TypeExecution;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "TypeExecution", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Post;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = true;
            _columnOptions.IsContextMenuCaption = false;
            _columnOptions.IsSortedBy = false;
            BuildColumnsDataTable(ref _dt, "Post", _columnOptions);


            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdActivity;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdActivity", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdMethodology;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdMethodology", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdFacilityType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdFacilityType", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdFacility;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdFacility", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            foreach (ProcessTaskExecution _processTaskExecution in EMSLibrary.User.Dashboard.TasksFinished.Values)
            {
                ProcessTask _processTask = _processTaskExecution.ProcessTask;
                String _processTaskType = _processTask.GetType().Name;
                String _type = GetGlobalResourceObject("CommonListManage", _processTaskType).ToString();
                //Si viene en el List, ya es Operador!
                String _permissionType = Common.Constants.PermissionManageName;
                String _taskState = _processTaskExecution.State;

                if (_taskState == Condesus.EMS.Business.Common.Resources.ConstantMessage.ProcessState_Finished)
                {
                    String _fullNamePost = _processTaskExecution.Post.Person.LastName
                                + ", " + _processTaskExecution.Post.Person.FirstName
                                + " - " + _processTaskExecution.Post.JobTitle.Name();

                    String _site = Resources.CommonListManage.TaskWithoutFacility;
                    if (_processTask.Site != null)
                    {
                        _site = _processTask.Site.LanguageOption.Name;
                    }
                    String _description = String.Empty;
                    switch (_processTaskExecution.ProcessTask.GetType().Name)
                    {
                        case "ProcessTaskMeasurement":
                            _description = Resources.CommonListManage.DataForThePeriod + " " + GetPeriodOfMeasurement(_processTaskExecution);
                            break;
                        case "ProcessTaskCalibration":
                            //Device type – Measurement device
                            MeasurementDevice _measurementDevice = ((ProcessTaskCalibration)_processTaskExecution.ProcessTask).MeasurementDevice;
                            _description = _measurementDevice.DeviceType.LanguageOption.Name + " - " + _measurementDevice.FullName;
                            break;
                        case "ProcessTaskOperation":
                            _description = ((ProcessTaskOperation)_processTaskExecution.ProcessTask).Comment;
                            break;
                    }
                    _dt.Rows.Add(_processTask.IdProcess,
                             _processTaskExecution.IdExecution,
                             _site,
                             _processTask.Parent.LanguageOption.Title,
                             _processTask.LanguageOption.Title,
                             _processTaskExecution.Date.ToLongDateString() + " " + _processTaskExecution.Date.ToLongTimeString(),
                             _processTaskExecution.EndDate.ToLongDateString() + " " + _processTaskExecution.EndDate.ToLongTimeString(),
                             _description,
                             _taskState,
                             _type, _processTaskType, _permissionType, _fullNamePost,
                        //Agregado para filtros...
                           _processTaskExecution.ProcessTask.GetType().Name == "ProcessTaskMeasurement" ? ((ProcessTaskMeasurement)_processTaskExecution.ProcessTask).AccountingActivity == null ? 0 : ((ProcessTaskMeasurement)_processTaskExecution.ProcessTask).AccountingActivity.IdActivity : 0,
                           _processTaskExecution.ProcessTask.GetType().Name == "ProcessTaskMeasurement" ? ((ProcessTaskMeasurement)_processTaskExecution.ProcessTask).Measurement.Methodology == null ? 0 : ((ProcessTaskMeasurement)_processTaskExecution.ProcessTask).Measurement.Methodology.IdMethodology : 0,
                           _processTaskExecution.ProcessTask.GetType().Name == "ProcessTaskMeasurement" ? ((ProcessTaskMeasurement)_processTaskExecution.ProcessTask).Site == null ? 0 : GetFacility(((ProcessTaskMeasurement)_processTaskExecution.ProcessTask).Site).FacilityType.IdFacilityType : 0,
                           _processTaskExecution.ProcessTask.GetType().Name == "ProcessTaskMeasurement" ? ((ProcessTaskMeasurement)_processTaskExecution.ProcessTask).Site == null ? 0 : GetFacility(((ProcessTaskMeasurement)_processTaskExecution.ProcessTask).Site).IdFacility : 0);
                }
            }

            //Retorna el DataTable
            return _dt;
        }
        public DataTable DatesOfFinishedTasks(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("DatesOfFinishedTasks");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.StartDate;
            _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "StartDate", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            //Ya esta armado el DataTable, ahora lo carga

            var _datesOfFinishedTask = (from _doft in EMSLibrary.User.Dashboard.TasksFinished.Values
                                       select _doft.Date.ToShortDateString()).Distinct();

            foreach (var _dateOfTask in _datesOfFinishedTask)
            {
                _dt.Rows.Add(Convert.ToDateTime(_dateOfTask));
            }

            //Retorna el DataTable
            return _dt;
        }

        #endregion

        #endregion

        #region Exceptions Summary

        #region Working Exceptions
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion WorkingExceptions.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable WorkingExceptions(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("WorkingException");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdException;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdException", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Date;
            _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Date", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Source;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Source", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.State;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "State", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                //Ya esta armado el DataTable, ahora lo carga

            }
            //Retorna el DataTable
            return _dt;
        }

        #endregion

        #region Closed Exceptions
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion ClosedExceptions.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable ClosedExceptions(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("ClosedException");

            //Contruye las columnas y sus atributos.
            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdException;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdException", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Project;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Project", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Title;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = false;
            BuildColumnsDataTable(ref _dt, "Title", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Date;
            _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Date", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Source;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Source", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.ExecutionState;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdExecutionState", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Comment;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = true;
            _columnOptions.IsContextMenuCaption = false;
            _columnOptions.IsSortedBy = false;
            BuildColumnsDataTable(ref _dt, "Comment", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.State;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "ExceptionState", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdExecution;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdExecution", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdTask;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdTask", _columnOptions);

            String _permissionType = String.Empty;
            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                //Ya esta armado el DataTable, ahora lo carga
                _permissionType = Common.Constants.PermissionManageName;

                foreach (Condesus.EMS.Business.IA.Entities.Exception _exception in EMSLibrary.User.Dashboard.ProcessExceptionClose.Values)
                {
                    Condesus.EMS.Business.IA.Entities.ExceptionProcessTask _exceptionProcessTask = (Condesus.EMS.Business.IA.Entities.ExceptionProcessTask)_exception;

                    _dt.Rows.Add(_exception.IdException,
                        _exceptionProcessTask.AssociateTask.Parent.LanguageOption.Title,
                        _exceptionProcessTask.AssociateTask.LanguageOption.Title,
                        _exceptionProcessTask.AssociateExecution.Date,
                        _exceptionProcessTask.AssociateTask.LanguageOption.Title,
                        _exception.ExceptionState.IdExceptionState,
                        _exceptionProcessTask.Comment,
                        _exception.ExceptionState.LanguageOption.Name, _permissionType,
                        _exceptionProcessTask.AssociateExecution.IdExecution,
                        _exceptionProcessTask.AssociateTask.IdProcess);
                }
            }
            //Retorna el DataTable
            return _dt;
        }

        #endregion

        #region Opened Exceptions
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion OpenedExceptions.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable OpenedExceptions(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("OpenedException");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdException;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdException", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Project;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Project", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Title;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = false;
            BuildColumnsDataTable(ref _dt, "Title", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Date;
            _columnOptions.ColumnDataType = System.Type.GetType("System.DateTime");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Date", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Source;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Source", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.ExecutionState;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdExecutionState", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.State;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "ExceptionState", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdExecution;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdExecution", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdTask;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdTask", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                //Ya esta armado el DataTable, ahora lo carga
                try
                {
                    //Cuando implementemos la opcion de traer todo en un filtro.
                    //if (param.ContainsKey("IdProcess"))
                    //{
                    //    Int64 _idProcess;
                    //    if (param.ContainsKey("IdTask"))
                    //    {
                    //        //Si viene el idTask, uso ese!!!
                    //        _idProcess = Convert.ToInt64(param["IdTask"]);
                    //    }
                    //    else
                    //    {
                    //        _idProcess = Convert.ToInt64(param["IdProcess"]);
                    //    }

                        String _permissionType = String.Empty;
                        //Process _process = EMSLibrary.User.ProcessFramework.Map.Process(_idProcess);
                        //ProcessGroupProcess _processGroupProcess = (ProcessGroupProcess)_process.Parent;
                        //Dictionary<Int64, Condesus.EMS.Business.IA.Entities.Exception> _exceptions = _process.Exceptions;


                        //Crear una excepcion para una tarea!
                        //((ProcessTask)_process).ProcessTaskExecution(1).CreateException("");
                        //De una excepcion, se puede crear un groupException, de un group un nodo y del nodo una tarea.
                        //((ProcessTask)_process).ProcessTaskExecution(1).CreateException("").ProcessGroupExceptionAdd().AddNode().ProcessTasksAdd();

                        //Obtiene el permiso que tiene el usuario para esa organizacion.
                        //if (_processGroupProcess.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                        //{ _permissionType = Common.Constants.PermissionManageName; }
                        //else
                        //{ _permissionType = Common.Constants.PermissionViewName; }


                        _permissionType = Common.Constants.PermissionManageName;

                        foreach (Condesus.EMS.Business.IA.Entities.Exception _exception in EMSLibrary.User.Dashboard.ProcessExceptionOpen.Values)
                        {
                            //CAMBIO DE ESTADO DE UNA EXCEPCION
                            //Cerrar excepcion
                            //_exception.Close();
                            //TRatar excepcion
                            //_exception.Treat();
                            Condesus.EMS.Business.IA.Entities.ExceptionProcessTask _exceptionProcessTask = (Condesus.EMS.Business.IA.Entities.ExceptionProcessTask)_exception;

                            _dt.Rows.Add(_exception.IdException,
                                _exceptionProcessTask.AssociateTask.Parent.LanguageOption.Title,   //._processTitle,
                                _exceptionProcessTask.AssociateTask.LanguageOption.Title,
                                _exceptionProcessTask.AssociateExecution.Date,
                                _exceptionProcessTask.AssociateTask.LanguageOption.Title,
                                _exception.ExceptionState.IdExceptionState,
                                _exception.ExceptionState.LanguageOption.Name, _permissionType,
                                _exceptionProcessTask.AssociateExecution.IdExecution,
                                _exceptionProcessTask.AssociateTask.IdProcess);
                        }

                        //foreach (Condesus.EMS.Business.IA.Entities.Exception _exception in _exceptions.Values)
                        //{
                        //    //CAMBIO DE ESTADO DE UNA EXCEPCION
                        //    //Cerrar excepcion
                        //    //_exception.Close();
                        //    //TRatar excepcion
                        //    //_exception.Treat();
                        //    Condesus.EMS.Business.IA.Entities.ExceptionProcessTask _exceptionProcessTask = (Condesus.EMS.Business.IA.Entities.ExceptionProcessTask)_exception;

                        //    _dt.Rows.Add(_exception.IdException,  _exceptionProcessTask.AssociateExecution.Date,
                        //        _exceptionProcessTask.AssociateTask.LanguageOption.Title,
                        //        _exception.ExceptionState.LanguageOption.Name, _permissionType);
                        //}
                    //}
                }
                catch { }
            }
            //Retorna el DataTable
            return _dt;
        }

        #endregion

        #endregion

        #endregion

        #region Collaboration Tools

        #region Forums

        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion Forum.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable Forums(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("Forums");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdProcess;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdProcess", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdForum;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdForum", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Forum;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Forum", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.CategoriesCount;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Categories", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.TopicsCount;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Topics", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.ForumPostsCount;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "ForumPosts", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            if (param.ContainsKey("IdProcess"))
            {
                Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);

                String _permissionType = String.Empty;
                //Obtiene el permiso que tiene el usuario para esa organizacion.
                if (EMSLibrary.User.DirectoryServices.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                { _permissionType = Common.Constants.PermissionManageName; }
                else
                { _permissionType = Common.Constants.PermissionViewName; }

                //Ya esta armado el DataTable, ahora lo carga
                Condesus.EMS.Business.PF.Entities.ProcessGroupProcess _process = ((ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess));
                //foreach (Forum _forum in EMSLibrary.User.CollaborationTools.Configuration.Forums().Values)
                foreach (Condesus.EMS.Business.CT.Entities.Forum _forum in _process.Forums.Values)
                {
                    Int32 _categoriesCount = 0; // CategoriesCount((Condesus.EMS.Business.CT.Entities.ActiveForum)_forum);
                    Int32 _topicsCount = TopicsCount((Condesus.EMS.Business.CT.Entities.ActiveForum)_forum);
                    Int32 _postsCount = PostsCount((Condesus.EMS.Business.CT.Entities.ActiveForum)_forum);

                    _dt.Rows.Add(_idProcess, _forum.IdForum, _forum.LanguageOption.Name, _categoriesCount, _topicsCount, _postsCount, _permissionType);
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        //private Int32 CategoriesCount(Condesus.EMS.Business.CT.Entities.ActiveForum forum)
        //{
        //    return forum.Categories.Count();
        //}
        private Int32 TopicsCount(Condesus.EMS.Business.CT.Entities.ActiveForum forum)
        {
            return forum.Topics.Count();
        }
        private Int32 PostsCount(Condesus.EMS.Business.CT.Entities.ActiveForum forum)
        {
            Int32 _count = 0;
            foreach (Condesus.EMS.Business.CT.Entities.ActiveTopic _topic in forum.Topics.Values)
            {
                _count += _topic.Messages.Count();
            }
            return _count;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del Forum.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable Forum(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("Forum");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

            //Ya esta el DataTable armado, ahora se trae el item.
            Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
            Int64 _idForum = Convert.ToInt64(param["IdForum"]);

            Condesus.EMS.Business.CT.Entities.Forum _forum = ((ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess)).Forum(_idForum);

            //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
            _dt.ExtendedProperties.Add("PageTitle", _forum.LanguageOption.Name);

            //Carga los datos
            _dt.Rows.Add(Resources.CommonListManage.Name, _forum.LanguageOption.Name);
            _dt.Rows.Add(Resources.CommonListManage.Description, _forum.LanguageOption.Description);

            //Retorna el DataTable.
            return _dt;
        }

        #endregion

        #region Categories

        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion Category.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable Categories(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("Categories");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdCategory;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdCategory", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Category;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Category", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.TopicsCount;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Topics", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.ForumPostsCount;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "ForumPosts", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                //if ((param.ContainsKey("IdForum")) && param.ContainsKey("IdProcess"))
                //{
                    //Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
                    //Int64 _idForum = Convert.ToInt64(param["IdForum"]);
                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (EMSLibrary.User.DirectoryServices.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    //Ya esta armado el DataTable, ahora lo carga
                    //Condesus.EMS.Business.PF.Entities.ProcessGroupProcess _process = (ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess);
                    foreach (Condesus.EMS.Business.CT.Entities.Category _category in EMSLibrary.User.CollaborationTools.Configuration.Categories.Values)
                    {
                        Int32 _topicsCount = TopicsCount(_category);
                        Int32 _postsCount = PostsCount(_category);

                        //_dt.Rows.Add(_idProcess, _idForum, _category.IdCategory, _category.LanguageOption.Name, _topicsCount, _postsCount, _permissionType);
                        _dt.Rows.Add(_category.IdCategory, _category.LanguageOption.Name, _topicsCount, _postsCount, _permissionType);
                    }
                //}
            }
            //Retorna el DataTable
            return _dt;
        }
        private Int32 TopicsCount(Condesus.EMS.Business.CT.Entities.Category category)
        {
            return category.Topics.Count(); 
        }
        private Int32 PostsCount(Condesus.EMS.Business.CT.Entities.Category category)
        {
            Int32 _count = 0;
            foreach (Condesus.EMS.Business.CT.Entities.ActiveTopic _topic in category.Topics.Values)
            {
                _count += _topic.Messages.Count();
            }
            return _count;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del Category.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable Category(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("Category");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

            //Ya esta el DataTable armado, ahora se trae el item.
            //Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
            //Int64 _idForum = Convert.ToInt64(param["IdForum"]);
            Int64 _idCategory = Convert.ToInt64(param["IdCategory"]);

            //Condesus.EMS.Business.CT.Entities.Forum _forum = ((ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess)).Forum(_idForum);
            Condesus.EMS.Business.CT.Entities.Category _category = EMSLibrary.User.CollaborationTools.Configuration.Category(_idCategory);

            //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
            _dt.ExtendedProperties.Add("PageTitle", _category.LanguageOption.Name);

            //Carga los datos
            _dt.Rows.Add(Resources.CommonListManage.Name, _category.LanguageOption.Name);
            _dt.Rows.Add(Resources.CommonListManage.Description, _category.LanguageOption.Description);

            //Retorna el DataTable.
            return _dt;
        }

        #endregion

        #region Topics

        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion Topic.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable Topics(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("Topics");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdProcess;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdProcess", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdForum;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdForum", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdCategory;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdCategory", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdTopic;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdTopic", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Topic;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "Topic", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Replies;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Replies", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Views;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Views", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                if (param.ContainsKey("IdForum") && (param.ContainsKey("IdProcess")))
                {
                    Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
                    Int64 _idForum = Convert.ToInt64(param["IdForum"]);
                    //Int64 _idCategory = Convert.ToInt64(param["IdCategory"]);

                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (EMSLibrary.User.DirectoryServices.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    //Ya esta armado el DataTable, ahora lo carga
                    Condesus.EMS.Business.PF.Entities.ProcessGroupProcess _process = (ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess);

                    foreach (Condesus.EMS.Business.CT.Entities.Topic _topic in ((Condesus.EMS.Business.CT.Entities.ActiveForum)_process.Forum(_idForum)).Topics.Values)
                    {
                        Int32 _repliesCount = RepliesCount((Condesus.EMS.Business.CT.Entities.ActiveTopic)_topic);
                        Int32 _viewsCount = ViewsCount((Condesus.EMS.Business.CT.Entities.ActiveTopic)_topic);

                        _dt.Rows.Add(_idProcess, _idForum, _topic.Category.IdCategory, _topic.IdTopic, _topic.Title, _repliesCount, _viewsCount, _permissionType);
                    }
                }
            }
            //Retorna el DataTable
            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion Full Topic.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable FullTopics(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("FullTopics");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdProcess;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdProcess", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdForum;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdForum", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdCategory;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdCategory", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdTopic;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdTopic", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Forum;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = false;
            BuildColumnsDataTable(ref _dt, "Forum", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Category;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = false;
            BuildColumnsDataTable(ref _dt, "Category", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Topic;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsCellLink = true;
            _columnOptions.EntityName = Common.ConstantsEntitiesName.CT.Message;
            _columnOptions.EntityNameGrid = Common.ConstantsEntitiesName.CT.Messages;
            _columnOptions.EntityNameContextInfo = Common.ConstantsEntitiesName.CT.Topic;
            _columnOptions.EntityNameContextElement = String.Empty;
            BuildColumnsDataTable(ref _dt, "Topic", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Replies;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Replies", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Views;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Views", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Topic;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "TopicHide", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                if (param.ContainsKey("IdProcess"))
                {
                    Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);

                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (EMSLibrary.User.DirectoryServices.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    //Ya esta armado el DataTable, ahora lo carga
                    Condesus.EMS.Business.PF.Entities.ProcessGroupProcess _process = (ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess);

                    //debemos cargar todos los foros/Categoria/Topics
                    foreach (Condesus.EMS.Business.CT.Entities.Forum _forum in _process.Forums.Values)
                    {
                        String _forumTitle = _forum.LanguageOption.Name;
                        //foreach (Condesus.EMS.Business.CT.Entities.Category _category in ((Condesus.EMS.Business.CT.Entities.ActiveForum)_forum).Categories.Values)
                        //{
                        
                        //Si el foro es de tipo activo, sigo...sino no hace nada.
                        if (_forum is Condesus.EMS.Business.CT.Entities.ActiveForum)
                        {
                            foreach (Condesus.EMS.Business.CT.Entities.Topic _topic in ((Condesus.EMS.Business.CT.Entities.ActiveForum)_forum).Topics.Values)
                            {
                                String _categoryTitle = _topic.Category.LanguageOption.Name;
                                Int32 _repliesCount = RepliesCount((Condesus.EMS.Business.CT.Entities.ActiveTopic)_topic);
                                Int32 _viewsCount = ViewsCount((Condesus.EMS.Business.CT.Entities.ActiveTopic)_topic);

                                _dt.Rows.Add(_idProcess, _forum.IdForum, _topic.Category.IdCategory, _topic.IdTopic, _forumTitle, _categoryTitle, _topic.Title, _repliesCount, _viewsCount, _permissionType, _topic.Title);
                            }
                        }
                        //}
                    }
                }
            }
            //Retorna el DataTable
            return _dt;
        }

        private Int32 RepliesCount(Condesus.EMS.Business.CT.Entities.ActiveTopic topic)
        {
            return topic.Messages.Count;
        }
        private Int32 ViewsCount(Condesus.EMS.Business.CT.Entities.ActiveTopic topic)
        {
            Int32 _count = 0;
            foreach (Condesus.EMS.Business.CT.Entities.Message _message in topic.Messages.Values)
            {
                _count += 0;
            }
            return _count;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del Topic.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable Topic(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("Topic");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

            //Ya esta el DataTable armado, ahora se trae el item.
            Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
            Int64 _idForum = Convert.ToInt64(param["IdForum"]);
            Int64 _idCategory = Convert.ToInt64(param["IdCategory"]);
            Int64 _idTopic = Convert.ToInt64(param["IdTopic"]);

            Condesus.EMS.Business.CT.Entities.Forum _forum = ((ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess)).Forum(_idForum);
            //Condesus.EMS.Business.CT.Entities.Category _category = ((Condesus.EMS.Business.CT.Entities.ActiveForum)_forum).Category(_idCategory);
            Condesus.EMS.Business.CT.Entities.Topic _topic = ((Condesus.EMS.Business.CT.Entities.ActiveForum)_forum).Topic(_idTopic);

            //Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
            _dt.ExtendedProperties.Add("PageTitle", _topic.Title);

            //Carga los datos
            _dt.Rows.Add(Resources.CommonListManage.Category, _topic.Category.LanguageOption.Name);
            _dt.Rows.Add(Resources.CommonListManage.Name, _topic.Title);
            //_dt.Rows.Add(Resources.CommonListManage.Locked, _topic.Locked);
            //_dt.Rows.Add(Resources.CommonListManage.Moderated, _topic.Moderated);

            //Retorna el DataTable.
            return _dt;
        }

        #endregion

        #region Messages

        /// <summary>
        /// Construye el DataTable a modo List con los datos de la Coleccion Message.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable Messages(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("Messages");

            //Contruye las columnas y sus atributos.
            ColumnOptions _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdProcess;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdProcess", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdForum;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdForum", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdCategory;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdCategory", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdTopic;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdTopic", _columnOptions);
            
            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.IdMessage;
            _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            _columnOptions.IsPrimaryKey = true;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "IdMessage", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.MessageState;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = true;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = true;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "MessageState", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.MessageType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "MessageType", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.Message;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "Message", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.User;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = true;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            _columnOptions.IsContextMenuCaption = true;
            _columnOptions.IsSortedBy = true;
            BuildColumnsDataTable(ref _dt, "User", _columnOptions);

            _columnOptions = new ColumnOptions();
            _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
            _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            _columnOptions.IsPrimaryKey = false;
            _columnOptions.DisplayInCombo = false;
            _columnOptions.DisplayInManage = false;
            _columnOptions.IsSearchable = false;
            _columnOptions.AllowNull = false;
            BuildColumnsDataTable(ref _dt, "PermissionType", _columnOptions);

            //Cuando implementemos la opcion de traer todo en un filtro.
            Boolean _showAll = false;
            if (ValidateSelectedItemComboBox(param, ref _showAll))
            {
                if (param.ContainsKey("IdForum") && (param.ContainsKey("IdCategory")) && (param.ContainsKey("IdTopic")) && (param.ContainsKey("IdProcess")))
                {
                    Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
                    Int64 _idForum = Convert.ToInt64(param["IdForum"]);
                    Int64 _idCategory = Convert.ToInt64(param["IdCategory"]);
                    Int64 _idTopic = Convert.ToInt64(param["IdTopic"]);

                    String _permissionType = String.Empty;
                    //Obtiene el permiso que tiene el usuario para esa organizacion.
                    if (EMSLibrary.User.DirectoryServices.Configuration.Permissions.ContainsKey(Common.Constants.PermissionManageKey))
                    { _permissionType = Common.Constants.PermissionManageName; }
                    else
                    { _permissionType = Common.Constants.PermissionViewName; }

                    ////Ya esta armado el DataTable, ahora lo carga
                    Condesus.EMS.Business.PF.Entities.ProcessGroupProcess _process = (ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess);

                    //foreach (Condesus.EMS.Business.CT.Entities.Message _message in ((Condesus.EMS.Business.CT.Entities.ActiveForum)_process.Forum(_idForum)).Category(_idCategory).Topic(_idTopic).Messages.Values)
                    //{
                    //    _dt.Rows.Add(_idProcess, _idForum,_idCategory,_idTopic, _message.State.LanguageOption.Name,_message.Type.LanguageOption.Name, _message.LanguageOption.Text,_message.User.FullName, _permissionType);
                    //}

                    //Retorna el DataTable
                }
            }

            return _dt;
        }
        /// <summary>
        /// Construye el DataTable a modo Property con los datos del Message.
        /// </summary>
        /// <param name="param">Parametros opcionales para filtrar</param>
        /// <returns>Un <c>DataTable</c></returns>
        public DataTable Message(Dictionary<String, Object> param)
        {
            //Construye el datatable
            DataTable _dt = BuildDataTable("Message");

            //Contruye las columnas y sus atributos.
            BuildColumnsDataTable(ref _dt, "Property", SetColumnViewer(Resources.Common.Property, false));
            BuildColumnsDataTable(ref _dt, "Value", SetColumnViewer(Resources.Common.Value, true));

            //Ya esta el DataTable armado, ahora se trae el item.
            Int64 _idForum = Convert.ToInt64(param["IdForum"]);
            Int64 _idCategory = Convert.ToInt64(param["IdCategory"]);
            Int64 _idTopic = Convert.ToInt64(param["IdTopic"]);
            Int64 _idMessage = Convert.ToInt64(param["IdMessage"]);

            //Category _category = EMSLibrary.User.CollaborationTools.Configuration.Forum(_idForum).Category(_idCategory);
            //Topic _topic = _category.Topic(_idTopic);

            ////Con esto seteamos el nombre de la entidad que queremos mostar en la pagina Viewer...
            //_dt.ExtendedProperties.Add("PageTitle", _forum.LanguageOption.Name);

            ////Carga los datos
            //_dt.Rows.Add(Resources.CommonListManage.Category, _category.LanguageOption.Name);
            //_dt.Rows.Add(Resources.CommonListManage.Name, _topic.LanguageOption.Name);
            //_dt.Rows.Add(Resources.CommonListManage.Description, _topic.LanguageOption.Description);
            //_dt.Rows.Add(Resources.CommonListManage.Locked, _topic.Locked);
            //_dt.Rows.Add(Resources.CommonListManage.Moderated, _topic.Moderated);

            //Retorna el DataTable.
            return _dt;
        }

        #endregion

        #endregion

        #region Report
            #region Evolution Report
                //private void BuildColumnReportEvolution(ref DataTable dt)
                //{
                //    //Contruye las columnas y sus atributos.
                //    ColumnOptions _columnOptions = new ColumnOptions();
                //    _columnOptions.ColumnCaption = Resources.CommonListManage.Year;
                //    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                //    _columnOptions.IsPrimaryKey = false;
                //    _columnOptions.DisplayInCombo = false;
                //    _columnOptions.DisplayInManage = true;
                //    _columnOptions.IsSearchable = false;
                //    _columnOptions.AllowNull = false;
                //    BuildColumnsDataTable(ref dt, "Year", _columnOptions);

                //    _columnOptions = new ColumnOptions();
                //    _columnOptions.ColumnCaption = "CO<sub>2e</sub> [tn]";
                //    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                //    _columnOptions.IsPrimaryKey = false;
                //    _columnOptions.DisplayInCombo = false;
                //    _columnOptions.DisplayInManage = true;
                //    _columnOptions.IsSearchable = false;
                //    _columnOptions.AllowNull = false;
                //    _columnOptions.IsContextMenuCaption = false;
                //    _columnOptions.IsSortedBy = false;
                //    BuildColumnsDataTable(ref dt, "tCO2e", _columnOptions);

                //    _columnOptions = new ColumnOptions();
                //    _columnOptions.ColumnCaption = "CO<sub>2</sub> [tCO<sub>2e</sub>]";
                //    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                //    _columnOptions.IsPrimaryKey = false;
                //    _columnOptions.DisplayInCombo = false;
                //    _columnOptions.DisplayInManage = true;
                //    _columnOptions.IsSearchable = false;
                //    _columnOptions.AllowNull = false;
                //    _columnOptions.IsContextMenuCaption = false;
                //    _columnOptions.IsSortedBy = false;
                //    BuildColumnsDataTable(ref dt, "CO2", _columnOptions);

                //    _columnOptions = new ColumnOptions();
                //    _columnOptions.ColumnCaption = "CH<sub>4</sub> [tCO<sub>2e</sub>]";
                //    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                //    _columnOptions.IsPrimaryKey = false;
                //    _columnOptions.DisplayInCombo = false;
                //    _columnOptions.DisplayInManage = true;
                //    _columnOptions.IsSearchable = false;
                //    _columnOptions.AllowNull = false;
                //    _columnOptions.IsContextMenuCaption = false;
                //    _columnOptions.IsSortedBy = false;
                //    BuildColumnsDataTable(ref dt, "CH4", _columnOptions);

                //    _columnOptions = new ColumnOptions();
                //    _columnOptions.ColumnCaption = "N<sub>2</sub>O [tCO<sub>2e</sub>]";
                //    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                //    _columnOptions.IsPrimaryKey = false;
                //    _columnOptions.DisplayInCombo = false;
                //    _columnOptions.DisplayInManage = true;
                //    _columnOptions.IsSearchable = false;
                //    _columnOptions.AllowNull = false;
                //    _columnOptions.IsContextMenuCaption = false;
                //    _columnOptions.IsSortedBy = false;
                //    BuildColumnsDataTable(ref dt, "N2O", _columnOptions);

                //    _columnOptions = new ColumnOptions();
                //    _columnOptions.ColumnCaption = "PFC [tCO<sub>2e</sub>]";
                //    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                //    _columnOptions.IsPrimaryKey = false;
                //    _columnOptions.DisplayInCombo = false;
                //    _columnOptions.DisplayInManage = true;
                //    _columnOptions.IsSearchable = false;
                //    _columnOptions.AllowNull = false;
                //    _columnOptions.IsContextMenuCaption = false;
                //    _columnOptions.IsSortedBy = false;
                //    BuildColumnsDataTable(ref dt, "PFC", _columnOptions);

                //    _columnOptions = new ColumnOptions();
                //    _columnOptions.ColumnCaption = "HFC [tCO<sub>2e</sub>]";
                //    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                //    _columnOptions.IsPrimaryKey = false;
                //    _columnOptions.DisplayInCombo = false;
                //    _columnOptions.DisplayInManage = true;
                //    _columnOptions.IsSearchable = false;
                //    _columnOptions.AllowNull = false;
                //    _columnOptions.IsContextMenuCaption = false;
                //    _columnOptions.IsSortedBy = false;
                //    BuildColumnsDataTable(ref dt, "HFC", _columnOptions);

                //    _columnOptions = new ColumnOptions();
                //    _columnOptions.ColumnCaption = "SF<sub>6</sub> [tCO<sub>2e</sub>]";
                //    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                //    _columnOptions.IsPrimaryKey = false;
                //    _columnOptions.DisplayInCombo = false;
                //    _columnOptions.DisplayInManage = true;
                //    _columnOptions.IsSearchable = false;
                //    _columnOptions.AllowNull = false;
                //    _columnOptions.IsContextMenuCaption = false;
                //    _columnOptions.IsSortedBy = false;
                //    BuildColumnsDataTable(ref dt, "SF6", _columnOptions);

                //    _columnOptions = new ColumnOptions();
                //    _columnOptions.ColumnCaption = "HCT [Mg]";
                //    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                //    _columnOptions.IsPrimaryKey = false;
                //    _columnOptions.DisplayInCombo = false;
                //    _columnOptions.DisplayInManage = true;
                //    _columnOptions.IsSearchable = false;
                //    _columnOptions.AllowNull = false;
                //    _columnOptions.IsContextMenuCaption = false;
                //    _columnOptions.IsSortedBy = false;
                //    BuildColumnsDataTable(ref dt, "HCT", _columnOptions);

                //    _columnOptions = new ColumnOptions();
                //    _columnOptions.ColumnCaption = "HCNM [Mg]";
                //    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                //    _columnOptions.IsPrimaryKey = false;
                //    _columnOptions.DisplayInCombo = false;
                //    _columnOptions.DisplayInManage = true;
                //    _columnOptions.IsSearchable = false;
                //    _columnOptions.AllowNull = false;
                //    _columnOptions.IsContextMenuCaption = false;
                //    _columnOptions.IsSortedBy = false;
                //    BuildColumnsDataTable(ref dt, "HCNM", _columnOptions);

                //    _columnOptions = new ColumnOptions();
                //    _columnOptions.ColumnCaption = "C<sub>2</sub>H<sub>6</sub> [Mg]";
                //    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                //    _columnOptions.IsPrimaryKey = false;
                //    _columnOptions.DisplayInCombo = false;
                //    _columnOptions.DisplayInManage = true;
                //    _columnOptions.IsSearchable = false;
                //    _columnOptions.AllowNull = false;
                //    _columnOptions.IsContextMenuCaption = false;
                //    _columnOptions.IsSortedBy = false;
                //    BuildColumnsDataTable(ref dt, "C2H6", _columnOptions);

                //    _columnOptions = new ColumnOptions();
                //    _columnOptions.ColumnCaption = "C<sub>3</sub>H<sub>8</sub> [Mg]";
                //    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                //    _columnOptions.IsPrimaryKey = false;
                //    _columnOptions.DisplayInCombo = false;
                //    _columnOptions.DisplayInManage = true;
                //    _columnOptions.IsSearchable = false;
                //    _columnOptions.AllowNull = false;
                //    _columnOptions.IsContextMenuCaption = false;
                //    _columnOptions.IsSortedBy = false;
                //    BuildColumnsDataTable(ref dt, "C3H8", _columnOptions);

                //    _columnOptions = new ColumnOptions();
                //    _columnOptions.ColumnCaption = "C<sub>4</sub>H<sub>10</sub> [Mg]";
                //    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                //    _columnOptions.IsPrimaryKey = false;
                //    _columnOptions.DisplayInCombo = false;
                //    _columnOptions.DisplayInManage = true;
                //    _columnOptions.IsSearchable = false;
                //    _columnOptions.AllowNull = false;
                //    _columnOptions.IsContextMenuCaption = false;
                //    _columnOptions.IsSortedBy = false;
                //    BuildColumnsDataTable(ref dt, "C4H10", _columnOptions);

                //    _columnOptions = new ColumnOptions();
                //    _columnOptions.ColumnCaption = "CO [Mg]";
                //    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                //    _columnOptions.IsPrimaryKey = false;
                //    _columnOptions.DisplayInCombo = false;
                //    _columnOptions.DisplayInManage = true;
                //    _columnOptions.IsSearchable = false;
                //    _columnOptions.AllowNull = false;
                //    _columnOptions.IsContextMenuCaption = false;
                //    _columnOptions.IsSortedBy = false;
                //    BuildColumnsDataTable(ref dt, "CO", _columnOptions);

                //    _columnOptions = new ColumnOptions();
                //    _columnOptions.ColumnCaption = "NOx [Mg]";
                //    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                //    _columnOptions.IsPrimaryKey = false;
                //    _columnOptions.DisplayInCombo = false;
                //    _columnOptions.DisplayInManage = true;
                //    _columnOptions.IsSearchable = false;
                //    _columnOptions.AllowNull = false;
                //    _columnOptions.IsContextMenuCaption = false;
                //    _columnOptions.IsSortedBy = false;
                //    BuildColumnsDataTable(ref dt, "NOx", _columnOptions);

                //    _columnOptions = new ColumnOptions();
                //    _columnOptions.ColumnCaption = "SOx [Mg]";
                //    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                //    _columnOptions.IsPrimaryKey = false;
                //    _columnOptions.DisplayInCombo = false;
                //    _columnOptions.DisplayInManage = true;
                //    _columnOptions.IsSearchable = false;
                //    _columnOptions.AllowNull = false;
                //    _columnOptions.IsContextMenuCaption = false;
                //    _columnOptions.IsSortedBy = false;
                //    BuildColumnsDataTable(ref dt, "SOx", _columnOptions);

                //    _columnOptions = new ColumnOptions();
                //    _columnOptions.ColumnCaption = "SO<sub>2</sub> [Mg]";
                //    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                //    _columnOptions.IsPrimaryKey = false;
                //    _columnOptions.DisplayInCombo = false;
                //    _columnOptions.DisplayInManage = true;
                //    _columnOptions.IsSearchable = false;
                //    _columnOptions.AllowNull = false;
                //    _columnOptions.IsContextMenuCaption = false;
                //    _columnOptions.IsSortedBy = false;
                //    BuildColumnsDataTable(ref dt, "SO2", _columnOptions);

                //    _columnOptions = new ColumnOptions();
                //    _columnOptions.ColumnCaption = "H<sub>2</sub>S [Mg]";
                //    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                //    _columnOptions.IsPrimaryKey = false;
                //    _columnOptions.DisplayInCombo = false;
                //    _columnOptions.DisplayInManage = true;
                //    _columnOptions.IsSearchable = false;
                //    _columnOptions.AllowNull = false;
                //    _columnOptions.IsContextMenuCaption = false;
                //    _columnOptions.IsSortedBy = false;
                //    BuildColumnsDataTable(ref dt, "H2S", _columnOptions);

                //    _columnOptions = new ColumnOptions();
                //    _columnOptions.ColumnCaption = "PM [Mg]";
                //    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                //    _columnOptions.IsPrimaryKey = false;
                //    _columnOptions.DisplayInCombo = false;
                //    _columnOptions.DisplayInManage = true;
                //    _columnOptions.IsSearchable = false;
                //    _columnOptions.AllowNull = false;
                //    _columnOptions.IsContextMenuCaption = false;
                //    _columnOptions.IsSortedBy = false;
                //    BuildColumnsDataTable(ref dt, "PM", _columnOptions);

                //    _columnOptions = new ColumnOptions();
                //    _columnOptions.ColumnCaption = "PM<sub>10</sub> [Mg]";
                //    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                //    _columnOptions.IsPrimaryKey = false;
                //    _columnOptions.DisplayInCombo = false;
                //    _columnOptions.DisplayInManage = true;
                //    _columnOptions.IsSearchable = false;
                //    _columnOptions.AllowNull = false;
                //    _columnOptions.IsContextMenuCaption = false;
                //    _columnOptions.IsSortedBy = false;
                //    BuildColumnsDataTable(ref dt, "PM10", _columnOptions);
                //}
                //public DataTable ReportEvolution(Dictionary<String, Object> param)
                //{
                //    //Construye el datatable
                //    DataTable _dt = BuildDataTable("ReportEvolution");
                //    BuildColumnReportEvolution(ref _dt);

                //    DateTime _startDate = (DateTime)System.Data.SqlTypes.SqlDateTime.MinValue;
                //    DateTime _endDate = (DateTime)System.Data.SqlTypes.SqlDateTime.MaxValue;
                //    if (param["StartDate"] != null)
                //    { _startDate = Convert.ToDateTime(param["StartDate"]); }
                //    if (param["EndDate"] != null)
                //    { _endDate = Convert.ToDateTime(param["EndDate"]); }

                //    Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
                //    Int64 _idScope = Convert.ToInt64(param["IdScope"]);
                //    Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
                //    Int64 _idIndicator_tnCO2e = Convert.ToInt64(param["IdIndicator_tnCO2e"]);
                //    Int64 _idIndicator_CO2 = Convert.ToInt64(param["IdIndicator_CO2"]);
                //    Int64 _idIndicator_CH4 = Convert.ToInt64(param["IdIndicator_CH4"]);
                //    Int64 _idIndicator_N2O = Convert.ToInt64(param["IdIndicator_N2O"]);
                //    Int64 _idIndicator_PFC = Convert.ToInt64(param["IdIndicator_PFC"]);
                //    Int64 _idIndicator_HFC = Convert.ToInt64(param["IdIndicator_HFC"]);
                //    Int64 _idIndicator_SF6 = Convert.ToInt64(param["IdIndicator_SF6"]);
                //    Int64 _idIndicator_HCNM = Convert.ToInt64(param["IdIndicator_HCNM"]);
                //    Int64 _idIndicator_HCT = Convert.ToInt64(param["IdIndicator_HCT"]);
                //    Int64 _idIndicator_CO = Convert.ToInt64(param["IdIndicator_CO"]);
                //    Int64 _idIndicator_NOx = Convert.ToInt64(param["IdIndicator_NOx"]);
                //    Int64 _idIndicator_SOx = Convert.ToInt64(param["IdIndicator_SOx"]);
                //    Int64 _idIndicator_PM = Convert.ToInt64(param["IdIndicator_PM"]);
                //    Int64 _idIndicator_SO2 = Convert.ToInt64(param["IdIndicator_SO2"]);
                //    Int64 _idIndicator_H2S = Convert.ToInt64(param["IdIndicator_H2S"]);
                //    Int64 _idIndicator_PM10 = Convert.ToInt64(param["IdIndicator_PM10"]);
                //    Int64 _idIndicator_C2H6 = Convert.ToInt64(param["IdIndicator_C2H6"]);
                //    Int64 _idIndicator_C3H8 = Convert.ToInt64(param["IdIndicator_C3H8"]);
                //    Int64 _idIndicator_C4H10 = Convert.ToInt64(param["IdIndicator_C4H10"]);


                //    List<Condesus.EMS.Business.RG.Entities.Evolutionary_O> _listO = ((ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess)).EvolutionaryItems(_idScope, _idIndicator_tnCO2e, _idIndicator_CO2,
                //        _idIndicator_CH4, _idIndicator_N2O, _idIndicator_PFC, _idIndicator_HFC, _idIndicator_SF6, _idIndicator_HCT,
                //        _idIndicator_HCNM, _idIndicator_C2H6, _idIndicator_C3H8, _idIndicator_C4H10, _idIndicator_CO, _idIndicator_NOx,
                //        _idIndicator_SOx, _idIndicator_SO2, _idIndicator_H2S, _idIndicator_PM, _idIndicator_PM10, _startDate, _endDate);

                //    var _lnqEvolution = from e in _listO
                //                        where e.IdOrganization == _idOrganization
                //                        orderby e.TimeYear ascending
                //                        select e;
                //    //Carga los resultados!
                //    foreach (Condesus.EMS.Business.RG.Entities.Evolutionary_O _icolumns in _lnqEvolution)
                //    {
                //        _dt.Rows.Add(_icolumns.TimeYear,
                //            Common.Functions.CustomEMSRound(_icolumns.Result_tCO2e),
                //            Common.Functions.CustomEMSRound(_icolumns.Result_CO2),
                //            Common.Functions.CustomEMSRound(_icolumns.Result_CH4),
                //            Common.Functions.CustomEMSRound(_icolumns.Result_N2O),
                //            Common.Functions.CustomEMSRound(_icolumns.Result_PFC),
                //            Common.Functions.CustomEMSRound(_icolumns.Result_HFC),
                //            Common.Functions.CustomEMSRound(_icolumns.Result_SF6),
                //            Common.Functions.CustomEMSRound(_icolumns.Result_HCT),
                //            Common.Functions.CustomEMSRound(_icolumns.Result_HCNM),
                //            Common.Functions.CustomEMSRound(_icolumns.Result_C2H6),
                //            Common.Functions.CustomEMSRound(_icolumns.Result_C3H8),
                //            Common.Functions.CustomEMSRound(_icolumns.Result_C4H10),
                //            Common.Functions.CustomEMSRound(_icolumns.Result_CO),
                //            Common.Functions.CustomEMSRound(_icolumns.Result_NOx),
                //            Common.Functions.CustomEMSRound(_icolumns.Result_SOx),
                //            Common.Functions.CustomEMSRound(_icolumns.Result_SO2),
                //            Common.Functions.CustomEMSRound(_icolumns.Result_H2S),
                //            Common.Functions.CustomEMSRound(_icolumns.Result_PM),
                //            Common.Functions.CustomEMSRound(_icolumns.Result_PM10));
                //    }

                //    //_dt.Rows.Add("2000",
                //    //    "46584300.5169936",
                //    //    "84150.214993152",
                //    //    "31.50008047872",
                //    //    "46500118.80192", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                //    //_dt.Rows.Add("2001",
                //    //    "45956661.4196944",
                //    //    "84150.214993152",
                //    //    "31.50008047872",
                //    //    "46500118.80192", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                //    //_dt.Rows.Add("2002",
                //    //    "46584300.5169936",
                //    //    "84150.214993152",
                //    //    "31.50008047872",
                //    //    "46500118.80192", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                //    //_dt.Rows.Add("2003",
                //    //    "46584300.5169936",
                //    //    "84150.214993152",
                //    //    "31.50008047872",
                //    //    "46500118.80192", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

                //    return _dt;
                //}

                private void BuildColumnReportEvolution(ref DataTable dt)
                {
                    //Contruye las columnas y sus atributos.
                    ColumnOptions _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.Year;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    BuildColumnsDataTable(ref dt, "Year", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "CO<sub>2e</sub> [tn]";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "tCO2e", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "% CO<sub>2e</sub>";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "tCO2e_Deviation", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "CO<sub>2</sub> [tCO<sub>2e</sub>]";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "CO2", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "% CO<sub>2</sub>";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "CO2_Deviation", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "CH<sub>4</sub> [tCO<sub>2e</sub>]";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "CH4", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "% CH<sub>4</sub>";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "CH4_Deviation", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "N<sub>2</sub>O [tCO<sub>2e</sub>]";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "N2O", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "% N<sub>2</sub>O";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "N2O_Deviation", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "PFC [tCO<sub>2e</sub>]";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "PFC", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "% PFC";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "PFC_Deviation", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "HFC [tCO<sub>2e</sub>]";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "HFC", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "% HFC";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "HFC_Deviation", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "SF<sub>6</sub> [tCO<sub>2e</sub>]";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "SF6", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "% SF<sub>6</sub>";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "SF6_Deviation", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "HCT [Mg]";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "HCT", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "% HCT";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "HCT_Deviation", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "HCNM [Mg]";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "HCNM", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "% HCNM";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "HCNM_Deviation", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "C<sub>2</sub>H<sub>6</sub> [Mg]";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "C2H6", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "% C<sub>2</sub>H<sub>6</sub>";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "C2H6_Deviation", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "C<sub>3</sub>H<sub>8</sub> [Mg]";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "C3H8", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "% C<sub>3</sub>H<sub>8</sub>";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "C3H8_Deviation", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "C<sub>4</sub>H<sub>10</sub> [Mg]";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "C4H10", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "% C<sub>4</sub>H<sub>10</sub>";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "C4H10_Deviation", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "CO [Mg]";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "CO", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "% CO";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "CO_Deviation", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "NOx [Mg]";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "NOx", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "% NOx";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "NOx_Deviation", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "SOx [Mg]";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "SOx", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "% SOx";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "SOx_Deviation", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "SO<sub>2</sub> [Mg]";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "SO2", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "% SO<sub>2</sub>";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "SO2_Deviation", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "H<sub>2</sub>S [Mg]";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "H2S", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "% H<sub>2</sub>S";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "H2S_Deviation", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "PM [Mg]";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "PM", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "% PM";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "PM_Deviation", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "PM<sub>10</sub> [Mg]";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "PM10", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "% PM<sub>10</sub>";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "PM10_Deviation", _columnOptions);
                }
                public DataTable ReportEvolution(Dictionary<String, Object> param)
                {
                    //Construye el datatable
                    DataTable _dt = BuildDataTable("ReportEvolution");
                    BuildColumnReportEvolution(ref _dt);

                    DateTime _startDate = (DateTime)System.Data.SqlTypes.SqlDateTime.MinValue;
                    DateTime _endDate = (DateTime)System.Data.SqlTypes.SqlDateTime.MaxValue;
                    if (param["StartDate"] != null)
                    { _startDate = Convert.ToDateTime(param["StartDate"]); }
                    if (param["EndDate"] != null)
                    { _endDate = Convert.ToDateTime(param["EndDate"]); }

                    Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
                    Int64 _idScope = Convert.ToInt64(param["IdScope"]);
                    Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
                    Int64 _idIndicator_tnCO2e = Convert.ToInt64(param["IdIndicator_tnCO2e"]);
                    Int64 _idIndicator_CO2 = Convert.ToInt64(param["IdIndicator_CO2"]);
                    Int64 _idIndicator_CH4 = Convert.ToInt64(param["IdIndicator_CH4"]);
                    Int64 _idIndicator_N2O = Convert.ToInt64(param["IdIndicator_N2O"]);
                    Int64 _idIndicator_PFC = Convert.ToInt64(param["IdIndicator_PFC"]);
                    Int64 _idIndicator_HFC = Convert.ToInt64(param["IdIndicator_HFC"]);
                    Int64 _idIndicator_SF6 = Convert.ToInt64(param["IdIndicator_SF6"]);
                    Int64 _idIndicator_HCNM = Convert.ToInt64(param["IdIndicator_HCNM"]);
                    Int64 _idIndicator_HCT = Convert.ToInt64(param["IdIndicator_HCT"]);
                    Int64 _idIndicator_CO = Convert.ToInt64(param["IdIndicator_CO"]);
                    Int64 _idIndicator_NOx = Convert.ToInt64(param["IdIndicator_NOx"]);
                    Int64 _idIndicator_SOx = Convert.ToInt64(param["IdIndicator_SOx"]);
                    Int64 _idIndicator_PM = Convert.ToInt64(param["IdIndicator_PM"]);
                    Int64 _idIndicator_SO2 = Convert.ToInt64(param["IdIndicator_SO2"]);
                    Int64 _idIndicator_H2S = Convert.ToInt64(param["IdIndicator_H2S"]);
                    Int64 _idIndicator_PM10 = Convert.ToInt64(param["IdIndicator_PM10"]);
                    Int64 _idIndicator_C2H6 = Convert.ToInt64(param["IdIndicator_C2H6"]);
                    Int64 _idIndicator_C3H8 = Convert.ToInt64(param["IdIndicator_C3H8"]);
                    Int64 _idIndicator_C4H10 = Convert.ToInt64(param["IdIndicator_C4H10"]);


                    Int64 _yearOld = 0;
                    Double _tCO2eOld = 0;
                    Double _CO2Old = 0;
                    Double _CH4Old = 0;
                    Double _N2OOld = 0;
                    Double _PFCOld = 0;
                    Double _HFCOld = 0;
                    Double _SF6Old = 0;
                    Double _HCNMOld = 0;
                    Double _HCTOld = 0;
                    Double _COOld = 0;
                    Double _NOxOld = 0;
                    Double _SOxOld = 0;
                    Double _PMOld = 0;
                    Double _SO2Old = 0;
                    Double _H2SOld = 0;
                    Double _PM10Old = 0;
                    Double _C2H6Old = 0;
                    Double _C3H8Old = 0;
                    Double _C4H10Old = 0;
                    
                    String _tCO2e_Deviation = String.Empty;
                    String _CO2_Deviation = String.Empty;
                    String _CH4_Deviation = String.Empty;
                    String _N2O_Deviation = String.Empty;
                    String _PFC_Deviation = String.Empty;
                    String _HFC_Deviation = String.Empty;
                    String _SF6_Deviation = String.Empty;
                    String _HCNM_Deviation = String.Empty;
                    String _HCT_Deviation = String.Empty;
                    String _CO_Deviation = String.Empty;
                    String _NOx_Deviation = String.Empty;
                    String _SOx_Deviation = String.Empty;
                    String _PM_Deviation = String.Empty;
                    String _SO2_Deviation = String.Empty;
                    String _H2S_Deviation = String.Empty;
                    String _PM10_Deviation = String.Empty;
                    String _C2H6_Deviation = String.Empty;
                    String _C3H8_Deviation = String.Empty;
                    String _C4H10_Deviation = String.Empty;

                    List<Condesus.EMS.Business.RG.Entities.Evolutionary_O> _listO = ((ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess)).EvolutionaryItems(_idScope, _idIndicator_tnCO2e, _idIndicator_CO2,
                        _idIndicator_CH4, _idIndicator_N2O, _idIndicator_PFC, _idIndicator_HFC, _idIndicator_SF6, _idIndicator_HCT,
                        _idIndicator_HCNM, _idIndicator_C2H6, _idIndicator_C3H8, _idIndicator_C4H10, _idIndicator_CO, _idIndicator_NOx,
                        _idIndicator_SOx, _idIndicator_SO2, _idIndicator_H2S, _idIndicator_PM, _idIndicator_PM10, _startDate, _endDate);

                    var _lnqEvolution = from e in _listO
                                        where e.IdOrganization == _idOrganization
                                        orderby e.TimeYear ascending
                                        select e;
                    //Carga los resultados!
                    foreach (Condesus.EMS.Business.RG.Entities.Evolutionary_O _icolumns in _lnqEvolution)
                    {
                        //Para el 1° Periodo, no se puede calcular el desvio, entonces lo saltea...
                        if (_yearOld != 0)
                        {
                            if (_yearOld != _icolumns.TimeYear)
                            {    /*
                                 * A= Valor periodo actual
                                 * B= Valor Periodo Anterior
                                 * Desviacion = ((A-B)*100)/B
                                 */
                                _tCO2e_Deviation = (_icolumns.Result_tCO2e + _tCO2eOld) == 0 ? String.Empty : Common.Functions.CustomEMSRound(((_icolumns.Result_tCO2e - _tCO2eOld) * 100 / _tCO2eOld));
                                _CO2_Deviation = (_icolumns.Result_CO2 + _CO2Old) == 0 ? String.Empty : Common.Functions.CustomEMSRound(((_icolumns.Result_CO2 - _CO2Old) * 100 / _CO2Old));
                                _CH4_Deviation = (_icolumns.Result_CH4 + _CH4Old) == 0 ? String.Empty : Common.Functions.CustomEMSRound(((_icolumns.Result_CH4 - _CH4Old) * 100 / _CH4Old));
                                _N2O_Deviation = (_icolumns.Result_N2O + _N2OOld) == 0 ? String.Empty : Common.Functions.CustomEMSRound(((_icolumns.Result_N2O - _N2OOld) * 100 / _N2OOld));
                                _PFC_Deviation = (_icolumns.Result_PFC + _PFCOld) == 0 ? String.Empty : Common.Functions.CustomEMSRound(((_icolumns.Result_PFC - _PFCOld) * 100 / _PFCOld));
                                _HFC_Deviation = (_icolumns.Result_HFC + _HFCOld) == 0 ? String.Empty : Common.Functions.CustomEMSRound(((_icolumns.Result_HFC - _HFCOld) * 100 / _HFCOld));
                                _SF6_Deviation = (_icolumns.Result_SF6 + _SF6Old) == 0 ? String.Empty : Common.Functions.CustomEMSRound(((_icolumns.Result_SF6 - _SF6Old) * 100 / _SF6Old));
                                _HCNM_Deviation = (_icolumns.Result_HCNM + _HCNMOld) == 0 ? String.Empty : Common.Functions.CustomEMSRound(((_icolumns.Result_HCNM - _HCNMOld) * 100 / _HCNMOld));
                                _HCT_Deviation = (_icolumns.Result_HCT + _HCTOld) == 0 ? String.Empty : Common.Functions.CustomEMSRound(((_icolumns.Result_HCT - _HCTOld) * 100 / _HCTOld));
                                _CO_Deviation = (_icolumns.Result_CO + _COOld) == 0 ? String.Empty : Common.Functions.CustomEMSRound(((_icolumns.Result_CO - _COOld) * 100 / _COOld));
                                _NOx_Deviation = (_icolumns.Result_NOx + _NOxOld) == 0 ? String.Empty : Common.Functions.CustomEMSRound(((_icolumns.Result_NOx - _NOxOld) * 100 / _NOxOld));
                                _SOx_Deviation = (_icolumns.Result_SOx + _SOxOld) == 0 ? String.Empty : Common.Functions.CustomEMSRound(((_icolumns.Result_SOx - _SOxOld) * 100 / _SOxOld));
                                _PM_Deviation = (_icolumns.Result_PM + _PMOld) == 0 ? String.Empty : Common.Functions.CustomEMSRound(((_icolumns.Result_PM - _PMOld) * 100 / _PMOld));
                                _SO2_Deviation = (_icolumns.Result_SO2 + _SO2Old) == 0 ? String.Empty : Common.Functions.CustomEMSRound(((_icolumns.Result_SO2 - _SO2Old) * 100 / _SO2Old));
                                _H2S_Deviation = (_icolumns.Result_H2S + _H2SOld) == 0 ? String.Empty : Common.Functions.CustomEMSRound(((_icolumns.Result_H2S - _H2SOld) * 100 / _H2SOld));
                                _PM10_Deviation = (_icolumns.Result_PM10 + _PM10Old) == 0 ? String.Empty : Common.Functions.CustomEMSRound(((_icolumns.Result_PM10 - _PM10Old) * 100 / _PM10Old));
                                _C2H6_Deviation = (_icolumns.Result_C2H6 + _C2H6Old) == 0 ? String.Empty : Common.Functions.CustomEMSRound(((_icolumns.Result_C2H6 - _C2H6Old) * 100 / _C2H6Old));
                                _C3H8_Deviation = (_icolumns.Result_C3H8 + _C3H8Old) == 0 ? String.Empty : Common.Functions.CustomEMSRound(((_icolumns.Result_C3H8 - _C3H8Old) * 100 / _C3H8Old));
                                _C4H10_Deviation = (_icolumns.Result_C4H10 + _C4H10Old) == 0 ? String.Empty : Common.Functions.CustomEMSRound(((_icolumns.Result_C4H10 - _C4H10Old) * 100 / _C4H10Old));
                            }
                        }
                        _yearOld = _icolumns.TimeYear;
                        _tCO2eOld = _icolumns.Result_tCO2e;
                        _CO2Old = _icolumns.Result_CO2;
                        _CH4Old = _icolumns.Result_CH4;
                        _N2OOld = _icolumns.Result_N2O;
                        _PFCOld = _icolumns.Result_PFC;
                        _HFCOld = _icolumns.Result_HFC;
                        _SF6Old = _icolumns.Result_SF6;
                        _HCNMOld = _icolumns.Result_HCNM;
                        _HCTOld = _icolumns.Result_HCT;
                        _COOld = _icolumns.Result_CO;
                        _NOxOld = _icolumns.Result_NOx;
                        _SOxOld = _icolumns.Result_SOx;
                        _PMOld = _icolumns.Result_PM;
                        _SO2Old = _icolumns.Result_SO2;
                        _H2SOld = _icolumns.Result_H2S;
                        _PM10Old = _icolumns.Result_PM10;
                        _C2H6Old = _icolumns.Result_C2H6;
                        _C3H8Old = _icolumns.Result_C3H8;
                        _C4H10Old = _icolumns.Result_C4H10;

                        _dt.Rows.Add(_icolumns.TimeYear,
                            Common.Functions.CustomEMSRound(_icolumns.Result_tCO2e),
                            _tCO2e_Deviation,
                            Common.Functions.CustomEMSRound(_icolumns.Result_CO2),
                            _CO2_Deviation,
                            Common.Functions.CustomEMSRound(_icolumns.Result_CH4),
                            _CH4_Deviation,
                            Common.Functions.CustomEMSRound(_icolumns.Result_N2O),
                            _N2O_Deviation,
                            Common.Functions.CustomEMSRound(_icolumns.Result_PFC),
                            _PFC_Deviation,
                            Common.Functions.CustomEMSRound(_icolumns.Result_HFC),
                            _HFC_Deviation,
                            Common.Functions.CustomEMSRound(_icolumns.Result_SF6),
                            _SF6_Deviation,
                            Common.Functions.CustomEMSRound(_icolumns.Result_HCT),
                            _HCT_Deviation,
                            Common.Functions.CustomEMSRound(_icolumns.Result_HCNM),
                            _HCNM_Deviation,
                            Common.Functions.CustomEMSRound(_icolumns.Result_C2H6),
                            _C2H6_Deviation,
                            Common.Functions.CustomEMSRound(_icolumns.Result_C3H8),
                            _C3H8_Deviation,
                            Common.Functions.CustomEMSRound(_icolumns.Result_C4H10),
                            _C4H10_Deviation,
                            Common.Functions.CustomEMSRound(_icolumns.Result_CO),
                            _CO_Deviation,
                            Common.Functions.CustomEMSRound(_icolumns.Result_NOx),
                            _NOx_Deviation,
                            Common.Functions.CustomEMSRound(_icolumns.Result_SOx),
                            _SOx_Deviation,
                            Common.Functions.CustomEMSRound(_icolumns.Result_SO2),
                            _SO2_Deviation,
                            Common.Functions.CustomEMSRound(_icolumns.Result_H2S),
                            _H2S_Deviation,
                            Common.Functions.CustomEMSRound(_icolumns.Result_PM),
                            _PM_Deviation,
                            Common.Functions.CustomEMSRound(_icolumns.Result_PM10),
                            _PM10_Deviation);
                    }

                    return _dt;
                }


                private void BuildColumnChartEvolution(ref DataTable dt)
                {
                    //Contruye las columnas y sus atributos.
                    ColumnOptions _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.Year;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    BuildColumnsDataTable(ref dt, "Year", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "CO<sub>2e</sub> [tn]";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "tCO2e", _columnOptions);
                }
                public DataTable ChartEvolution(Dictionary<String, Object> param)
                {
                    //Construye el datatable
                    DataTable _dt = BuildDataTable("ChartEvolution");
                    BuildColumnChartEvolution(ref _dt);

                    DateTime _startDate = (DateTime)System.Data.SqlTypes.SqlDateTime.MinValue;
                    DateTime _endDate = (DateTime)System.Data.SqlTypes.SqlDateTime.MaxValue;
                    if (param["StartDate"] != null)
                    { _startDate = Convert.ToDateTime(param["StartDate"]); }
                    if (param["EndDate"] != null)
                    { _endDate = Convert.ToDateTime(param["EndDate"]); }

                    Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
                    Int64 _idScope = Convert.ToInt64(param["IdScope"]);
                    Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
                    Int64 _idIndicator_tnCO2e = Convert.ToInt64(param["IdIndicator_tnCO2e"]);
                    Int64 _idIndicator_CO2 = Convert.ToInt64(param["IdIndicator_CO2"]);
                    Int64 _idIndicator_CH4 = Convert.ToInt64(param["IdIndicator_CH4"]);
                    Int64 _idIndicator_N2O = Convert.ToInt64(param["IdIndicator_N2O"]);
                    Int64 _idIndicator_PFC = Convert.ToInt64(param["IdIndicator_PFC"]);
                    Int64 _idIndicator_HFC = Convert.ToInt64(param["IdIndicator_HFC"]);
                    Int64 _idIndicator_SF6 = Convert.ToInt64(param["IdIndicator_SF6"]);
                    Int64 _idIndicator_HCNM = Convert.ToInt64(param["IdIndicator_HCNM"]);
                    Int64 _idIndicator_HCT = Convert.ToInt64(param["IdIndicator_HCT"]);
                    Int64 _idIndicator_CO = Convert.ToInt64(param["IdIndicator_CO"]);
                    Int64 _idIndicator_NOx = Convert.ToInt64(param["IdIndicator_NOx"]);
                    Int64 _idIndicator_SOx = Convert.ToInt64(param["IdIndicator_SOx"]);
                    Int64 _idIndicator_PM = Convert.ToInt64(param["IdIndicator_PM"]);
                    Int64 _idIndicator_SO2 = Convert.ToInt64(param["IdIndicator_SO2"]);
                    Int64 _idIndicator_H2S = Convert.ToInt64(param["IdIndicator_H2S"]);
                    Int64 _idIndicator_PM10 = Convert.ToInt64(param["IdIndicator_PM10"]);
                    Int64 _idIndicator_C2H6 = Convert.ToInt64(param["IdIndicator_C2H6"]);
                    Int64 _idIndicator_C3H8 = Convert.ToInt64(param["IdIndicator_C3H8"]);
                    Int64 _idIndicator_C4H10 = Convert.ToInt64(param["IdIndicator_C4H10"]);


                    List<Condesus.EMS.Business.RG.Entities.Evolutionary_O> _listO = ((ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess)).EvolutionaryItems(_idScope,_idIndicator_tnCO2e, _idIndicator_CO2,
                                           _idIndicator_CH4, _idIndicator_N2O, _idIndicator_PFC, _idIndicator_HFC, _idIndicator_SF6, _idIndicator_HCT,
                                           _idIndicator_HCNM, _idIndicator_C2H6, _idIndicator_C3H8, _idIndicator_C4H10, _idIndicator_CO, _idIndicator_NOx,
                                           _idIndicator_SOx, _idIndicator_SO2, _idIndicator_H2S, _idIndicator_PM, _idIndicator_PM10, _startDate, _endDate);

                    var _lnqEvolution = from e in _listO
                                        where e.IdOrganization == _idOrganization
                                        orderby e.TimeYear ascending
                                        select e;
                    //Carga los resultados!
                    foreach (Condesus.EMS.Business.RG.Entities.Evolutionary_O _icolumns in _lnqEvolution)
                    {
                        _dt.Rows.Add(_icolumns.TimeYear,
                            Common.Functions.CustomEMSRound(_icolumns.Result_tCO2e));
                    }

                    return _dt;
                }

                private void BuildColumnChartEvolutionCO2(ref DataTable dt)
                {
                    //Contruye las columnas y sus atributos.
                    ColumnOptions _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.Year;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    BuildColumnsDataTable(ref dt, "Year", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "CO<sub>2</sub> [tCO<sub>2e</sub>]";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "CO2", _columnOptions);
                }
                public DataTable ChartEvolutionCO2(Dictionary<String, Object> param)
                {
                    //Construye el datatable
                    DataTable _dt = BuildDataTable("ChartEvolution");
                    BuildColumnChartEvolutionCO2(ref _dt);

                    DateTime _startDate = (DateTime)System.Data.SqlTypes.SqlDateTime.MinValue;
                    DateTime _endDate = (DateTime)System.Data.SqlTypes.SqlDateTime.MaxValue;
                    if (param["StartDate"] != null)
                    { _startDate = Convert.ToDateTime(param["StartDate"]); }
                    if (param["EndDate"] != null)
                    { _endDate = Convert.ToDateTime(param["EndDate"]); }

                    Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
                    Int64 _idScope = Convert.ToInt64(param["IdScope"]);
                    Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
                    Int64 _idIndicator_tnCO2e = Convert.ToInt64(param["IdIndicator_tnCO2e"]);
                    Int64 _idIndicator_CO2 = Convert.ToInt64(param["IdIndicator_CO2"]);
                    Int64 _idIndicator_CH4 = Convert.ToInt64(param["IdIndicator_CH4"]);
                    Int64 _idIndicator_N2O = Convert.ToInt64(param["IdIndicator_N2O"]);
                    Int64 _idIndicator_PFC = Convert.ToInt64(param["IdIndicator_PFC"]);
                    Int64 _idIndicator_HFC = Convert.ToInt64(param["IdIndicator_HFC"]);
                    Int64 _idIndicator_SF6 = Convert.ToInt64(param["IdIndicator_SF6"]);
                    Int64 _idIndicator_HCNM = Convert.ToInt64(param["IdIndicator_HCNM"]);
                    Int64 _idIndicator_HCT = Convert.ToInt64(param["IdIndicator_HCT"]);
                    Int64 _idIndicator_CO = Convert.ToInt64(param["IdIndicator_CO"]);
                    Int64 _idIndicator_NOx = Convert.ToInt64(param["IdIndicator_NOx"]);
                    Int64 _idIndicator_SOx = Convert.ToInt64(param["IdIndicator_SOx"]);
                    Int64 _idIndicator_PM = Convert.ToInt64(param["IdIndicator_PM"]);
                    Int64 _idIndicator_SO2 = Convert.ToInt64(param["IdIndicator_SO2"]);
                    Int64 _idIndicator_H2S = Convert.ToInt64(param["IdIndicator_H2S"]);
                    Int64 _idIndicator_PM10 = Convert.ToInt64(param["IdIndicator_PM10"]);
                    Int64 _idIndicator_C2H6 = Convert.ToInt64(param["IdIndicator_C2H6"]);
                    Int64 _idIndicator_C3H8 = Convert.ToInt64(param["IdIndicator_C3H8"]);
                    Int64 _idIndicator_C4H10 = Convert.ToInt64(param["IdIndicator_C4H10"]);


                    List<Condesus.EMS.Business.RG.Entities.Evolutionary_O> _listO = ((ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess)).EvolutionaryItems(_idScope, _idIndicator_tnCO2e, _idIndicator_CO2,
                                           _idIndicator_CH4, _idIndicator_N2O, _idIndicator_PFC, _idIndicator_HFC, _idIndicator_SF6, _idIndicator_HCT,
                                           _idIndicator_HCNM, _idIndicator_C2H6, _idIndicator_C3H8, _idIndicator_C4H10, _idIndicator_CO, _idIndicator_NOx,
                                           _idIndicator_SOx, _idIndicator_SO2, _idIndicator_H2S, _idIndicator_PM, _idIndicator_PM10, _startDate, _endDate);

                    var _lnqEvolution = from e in _listO
                                        where e.IdOrganization == _idOrganization
                                        orderby e.TimeYear ascending
                                        select e;
                    //Carga los resultados!
                    foreach (Condesus.EMS.Business.RG.Entities.Evolutionary_O _icolumns in _lnqEvolution)
                    {
                        _dt.Rows.Add(_icolumns.TimeYear,
                            Common.Functions.CustomEMSRound(_icolumns.Result_CO2));
                    }

                    return _dt;
                }

                private void BuildColumnChartEvolutionCH4(ref DataTable dt)
                {
                    //Contruye las columnas y sus atributos.
                    ColumnOptions _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.Year;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    BuildColumnsDataTable(ref dt, "Year", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "CH<sub>4</sub> [tCO<sub>2e</sub>]";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "CH4", _columnOptions);
                }
                public DataTable ChartEvolutionCH4(Dictionary<String, Object> param)
                {
                    //Construye el datatable
                    DataTable _dt = BuildDataTable("ChartEvolution");
                    BuildColumnChartEvolutionCH4(ref _dt);

                    DateTime _startDate = (DateTime)System.Data.SqlTypes.SqlDateTime.MinValue;
                    DateTime _endDate = (DateTime)System.Data.SqlTypes.SqlDateTime.MaxValue;
                    if (param["StartDate"] != null)
                    { _startDate = Convert.ToDateTime(param["StartDate"]); }
                    if (param["EndDate"] != null)
                    { _endDate = Convert.ToDateTime(param["EndDate"]); }

                    Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
                    Int64 _idScope = Convert.ToInt64(param["IdScope"]);
                    Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
                    Int64 _idIndicator_tnCO2e = Convert.ToInt64(param["IdIndicator_tnCO2e"]);
                    Int64 _idIndicator_CO2 = Convert.ToInt64(param["IdIndicator_CO2"]);
                    Int64 _idIndicator_CH4 = Convert.ToInt64(param["IdIndicator_CH4"]);
                    Int64 _idIndicator_N2O = Convert.ToInt64(param["IdIndicator_N2O"]);
                    Int64 _idIndicator_PFC = Convert.ToInt64(param["IdIndicator_PFC"]);
                    Int64 _idIndicator_HFC = Convert.ToInt64(param["IdIndicator_HFC"]);
                    Int64 _idIndicator_SF6 = Convert.ToInt64(param["IdIndicator_SF6"]);
                    Int64 _idIndicator_HCNM = Convert.ToInt64(param["IdIndicator_HCNM"]);
                    Int64 _idIndicator_HCT = Convert.ToInt64(param["IdIndicator_HCT"]);
                    Int64 _idIndicator_CO = Convert.ToInt64(param["IdIndicator_CO"]);
                    Int64 _idIndicator_NOx = Convert.ToInt64(param["IdIndicator_NOx"]);
                    Int64 _idIndicator_SOx = Convert.ToInt64(param["IdIndicator_SOx"]);
                    Int64 _idIndicator_PM = Convert.ToInt64(param["IdIndicator_PM"]);
                    Int64 _idIndicator_SO2 = Convert.ToInt64(param["IdIndicator_SO2"]);
                    Int64 _idIndicator_H2S = Convert.ToInt64(param["IdIndicator_H2S"]);
                    Int64 _idIndicator_PM10 = Convert.ToInt64(param["IdIndicator_PM10"]);
                    Int64 _idIndicator_C2H6 = Convert.ToInt64(param["IdIndicator_C2H6"]);
                    Int64 _idIndicator_C3H8 = Convert.ToInt64(param["IdIndicator_C3H8"]);
                    Int64 _idIndicator_C4H10 = Convert.ToInt64(param["IdIndicator_C4H10"]);


                    List<Condesus.EMS.Business.RG.Entities.Evolutionary_O> _listO = ((ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess)).EvolutionaryItems(_idScope, _idIndicator_tnCO2e, _idIndicator_CO2,
                                           _idIndicator_CH4, _idIndicator_N2O, _idIndicator_PFC, _idIndicator_HFC, _idIndicator_SF6, _idIndicator_HCT,
                                           _idIndicator_HCNM, _idIndicator_C2H6, _idIndicator_C3H8, _idIndicator_C4H10, _idIndicator_CO, _idIndicator_NOx,
                                           _idIndicator_SOx, _idIndicator_SO2, _idIndicator_H2S, _idIndicator_PM, _idIndicator_PM10, _startDate, _endDate);

                    var _lnqEvolution = from e in _listO
                                        where e.IdOrganization == _idOrganization
                                        orderby e.TimeYear ascending
                                        select e;
                    //Carga los resultados!
                    foreach (Condesus.EMS.Business.RG.Entities.Evolutionary_O _icolumns in _lnqEvolution)
                    {
                        _dt.Rows.Add(_icolumns.TimeYear,
                            Common.Functions.CustomEMSRound(_icolumns.Result_CH4));
                    }

                    return _dt;
                }

                private void BuildColumnChartEvolutionN2O(ref DataTable dt)
                {
                    //Contruye las columnas y sus atributos.
                    ColumnOptions _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.Year;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    BuildColumnsDataTable(ref dt, "Year", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "N<sub>2</sub>O [tCO<sub>2e</sub>]";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "N2O", _columnOptions);
                }
                public DataTable ChartEvolutionN2O(Dictionary<String, Object> param)
                {
                    //Construye el datatable
                    DataTable _dt = BuildDataTable("ChartEvolution");
                    BuildColumnChartEvolutionN2O(ref _dt);

                    DateTime _startDate = (DateTime)System.Data.SqlTypes.SqlDateTime.MinValue;
                    DateTime _endDate = (DateTime)System.Data.SqlTypes.SqlDateTime.MaxValue;
                    if (param["StartDate"] != null)
                    { _startDate = Convert.ToDateTime(param["StartDate"]); }
                    if (param["EndDate"] != null)
                    { _endDate = Convert.ToDateTime(param["EndDate"]); }

                    Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
                    Int64 _idScope = Convert.ToInt64(param["IdScope"]);
                    Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
                    Int64 _idIndicator_tnCO2e = Convert.ToInt64(param["IdIndicator_tnCO2e"]);
                    Int64 _idIndicator_CO2 = Convert.ToInt64(param["IdIndicator_CO2"]);
                    Int64 _idIndicator_CH4 = Convert.ToInt64(param["IdIndicator_CH4"]);
                    Int64 _idIndicator_N2O = Convert.ToInt64(param["IdIndicator_N2O"]);
                    Int64 _idIndicator_PFC = Convert.ToInt64(param["IdIndicator_PFC"]);
                    Int64 _idIndicator_HFC = Convert.ToInt64(param["IdIndicator_HFC"]);
                    Int64 _idIndicator_SF6 = Convert.ToInt64(param["IdIndicator_SF6"]);
                    Int64 _idIndicator_HCNM = Convert.ToInt64(param["IdIndicator_HCNM"]);
                    Int64 _idIndicator_HCT = Convert.ToInt64(param["IdIndicator_HCT"]);
                    Int64 _idIndicator_CO = Convert.ToInt64(param["IdIndicator_CO"]);
                    Int64 _idIndicator_NOx = Convert.ToInt64(param["IdIndicator_NOx"]);
                    Int64 _idIndicator_SOx = Convert.ToInt64(param["IdIndicator_SOx"]);
                    Int64 _idIndicator_PM = Convert.ToInt64(param["IdIndicator_PM"]);
                    Int64 _idIndicator_SO2 = Convert.ToInt64(param["IdIndicator_SO2"]);
                    Int64 _idIndicator_H2S = Convert.ToInt64(param["IdIndicator_H2S"]);
                    Int64 _idIndicator_PM10 = Convert.ToInt64(param["IdIndicator_PM10"]);
                    Int64 _idIndicator_C2H6 = Convert.ToInt64(param["IdIndicator_C2H6"]);
                    Int64 _idIndicator_C3H8 = Convert.ToInt64(param["IdIndicator_C3H8"]);
                    Int64 _idIndicator_C4H10 = Convert.ToInt64(param["IdIndicator_C4H10"]);


                    List<Condesus.EMS.Business.RG.Entities.Evolutionary_O> _listO = ((ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess)).EvolutionaryItems(_idScope, _idIndicator_tnCO2e, _idIndicator_CO2,
                                           _idIndicator_CH4, _idIndicator_N2O, _idIndicator_PFC, _idIndicator_HFC, _idIndicator_SF6, _idIndicator_HCT,
                                           _idIndicator_HCNM, _idIndicator_C2H6, _idIndicator_C3H8, _idIndicator_C4H10, _idIndicator_CO, _idIndicator_NOx,
                                           _idIndicator_SOx, _idIndicator_SO2, _idIndicator_H2S, _idIndicator_PM, _idIndicator_PM10, _startDate, _endDate);

                    var _lnqEvolution = from e in _listO
                                        where e.IdOrganization == _idOrganization
                                        orderby e.TimeYear ascending
                                        select e;
                    //Carga los resultados!
                    foreach (Condesus.EMS.Business.RG.Entities.Evolutionary_O _icolumns in _lnqEvolution)
                    {
                        _dt.Rows.Add(_icolumns.TimeYear,
                            Common.Functions.CustomEMSRound(_icolumns.Result_N2O));
                    }

                    return _dt;
                }

            #endregion

            //private void BuildColumReportTransformation(ref DataTable dt)
            //{
            //    //Contruye las columnas y sus atributos.
            //    ColumnOptions _columnOptions = new ColumnOptions();
            //    _columnOptions.ColumnCaption = Resources.CommonListManage.IdActivity;
            //    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            //    _columnOptions.IsPrimaryKey = false;
            //    _columnOptions.DisplayInCombo = false;
            //    _columnOptions.DisplayInManage = false;
            //    _columnOptions.IsSearchable = false;
            //    _columnOptions.AllowNull = false;
            //    BuildColumnsDataTable(ref dt, "IdActivity", _columnOptions);

            //    _columnOptions = new ColumnOptions();
            //    _columnOptions.ColumnCaption = Resources.CommonListManage.IdParentActivity;
            //    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            //    _columnOptions.IsPrimaryKey = false;
            //    _columnOptions.DisplayInCombo = false;
            //    _columnOptions.DisplayInManage = false;
            //    _columnOptions.IsSearchable = false;
            //    _columnOptions.AllowNull = true;
            //    BuildColumnsDataTable(ref dt, "IdParentActivity", _columnOptions);

            //    _columnOptions = new ColumnOptions();
            //    _columnOptions.ColumnCaption = Resources.CommonListManage.AccountingActivity;
            //    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            //    _columnOptions.IsPrimaryKey = false;
            //    _columnOptions.DisplayInCombo = false;
            //    _columnOptions.DisplayInManage = true;
            //    _columnOptions.IsSearchable = false;
            //    _columnOptions.AllowNull = true;
            //    _columnOptions.IsContextMenuCaption = false;
            //    _columnOptions.IsSortedBy = false;
            //    BuildColumnsDataTable(ref dt, Resources.CommonListManage.AccountingActivity, _columnOptions);

            //    //_columnOptions = new ColumnOptions();
            //    //_columnOptions.ColumnCaption = Resources.CommonListManage.IdFacility;
            //    //_columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            //    //_columnOptions.IsPrimaryKey = false;
            //    //_columnOptions.DisplayInCombo = false;
            //    //_columnOptions.DisplayInManage = false;
            //    //_columnOptions.IsSearchable = false;
            //    //_columnOptions.AllowNull = true;
            //    //BuildColumnsDataTable(ref dt, "IdFacility", _columnOptions);

            //    _columnOptions = new ColumnOptions();
            //    _columnOptions.ColumnCaption = Resources.CommonListManage.Facility;
            //    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            //    _columnOptions.IsPrimaryKey = false;
            //    _columnOptions.DisplayInCombo = false;
            //    _columnOptions.DisplayInManage = true;
            //    _columnOptions.IsSearchable = true;
            //    _columnOptions.AllowNull = true;
            //    _columnOptions.IsContextMenuCaption = false;
            //    _columnOptions.IsSortedBy = true;
            //    BuildColumnsDataTable(ref dt, Resources.CommonListManage.Facility, _columnOptions);

            //    //_columnOptions = new ColumnOptions();
            //    //_columnOptions.ColumnCaption = Resources.CommonListManage.IdMeasurement;
            //    //_columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
            //    //_columnOptions.IsPrimaryKey = false;
            //    //_columnOptions.DisplayInCombo = false;
            //    //_columnOptions.DisplayInManage = false;
            //    //_columnOptions.IsSearchable = false;
            //    //_columnOptions.AllowNull = true;
            //    //BuildColumnsDataTable(ref dt, "IdMeasurement", _columnOptions);

            //    _columnOptions = new ColumnOptions();
            //    _columnOptions.ColumnCaption = Resources.CommonListManage.Measurement;
            //    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            //    _columnOptions.IsPrimaryKey = false;
            //    _columnOptions.DisplayInCombo = false;
            //    _columnOptions.DisplayInManage = true;
            //    _columnOptions.IsSearchable = true;
            //    _columnOptions.AllowNull = true;
            //    _columnOptions.IsContextMenuCaption = false;
            //    _columnOptions.IsSortedBy = true;
            //    BuildColumnsDataTable(ref dt, Resources.CommonListManage.Measurement, _columnOptions);

            //    _columnOptions = new ColumnOptions();
            //    _columnOptions.ColumnCaption = "tnCO2e";
            //    _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
            //    _columnOptions.IsPrimaryKey = false;
            //    _columnOptions.DisplayInCombo = false;
            //    _columnOptions.DisplayInManage = true;
            //    _columnOptions.IsSearchable = false;
            //    _columnOptions.AllowNull = false;
            //    _columnOptions.IsContextMenuCaption = false;
            //    _columnOptions.IsSortedBy = false;
            //    BuildColumnsDataTable(ref dt, "tnCO2e", _columnOptions);

            //    _columnOptions = new ColumnOptions();
            //    _columnOptions.ColumnCaption = "CO2";
            //    _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
            //    _columnOptions.IsPrimaryKey = false;
            //    _columnOptions.DisplayInCombo = false;
            //    _columnOptions.DisplayInManage = true;
            //    _columnOptions.IsSearchable = false;
            //    _columnOptions.AllowNull = false;
            //    _columnOptions.IsContextMenuCaption = false;
            //    _columnOptions.IsSortedBy = false;
            //    BuildColumnsDataTable(ref dt, "CO2", _columnOptions);

            //    _columnOptions = new ColumnOptions();
            //    _columnOptions.ColumnCaption = "CH4";
            //    _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
            //    _columnOptions.IsPrimaryKey = false;
            //    _columnOptions.DisplayInCombo = false;
            //    _columnOptions.DisplayInManage = true;
            //    _columnOptions.IsSearchable = false;
            //    _columnOptions.AllowNull = false;
            //    _columnOptions.IsContextMenuCaption = false;
            //    _columnOptions.IsSortedBy = false;
            //    BuildColumnsDataTable(ref dt, "CH4", _columnOptions);

            //    _columnOptions = new ColumnOptions();
            //    _columnOptions.ColumnCaption = "N2O";
            //    _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
            //    _columnOptions.IsPrimaryKey = false;
            //    _columnOptions.DisplayInCombo = false;
            //    _columnOptions.DisplayInManage = true;
            //    _columnOptions.IsSearchable = false;
            //    _columnOptions.AllowNull = false;
            //    _columnOptions.IsContextMenuCaption = false;
            //    _columnOptions.IsSortedBy = false;
            //    BuildColumnsDataTable(ref dt, "N2O", _columnOptions);

            //    _columnOptions = new ColumnOptions();
            //    _columnOptions.ColumnCaption = "PFC";
            //    _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
            //    _columnOptions.IsPrimaryKey = false;
            //    _columnOptions.DisplayInCombo = false;
            //    _columnOptions.DisplayInManage = true;
            //    _columnOptions.IsSearchable = false;
            //    _columnOptions.AllowNull = false;
            //    _columnOptions.IsContextMenuCaption = false;
            //    _columnOptions.IsSortedBy = false;
            //    BuildColumnsDataTable(ref dt, "PFC", _columnOptions);

            //    _columnOptions = new ColumnOptions();
            //    _columnOptions.ColumnCaption = "HFC";
            //    _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
            //    _columnOptions.IsPrimaryKey = false;
            //    _columnOptions.DisplayInCombo = false;
            //    _columnOptions.DisplayInManage = true;
            //    _columnOptions.IsSearchable = false;
            //    _columnOptions.AllowNull = false;
            //    _columnOptions.IsContextMenuCaption = false;
            //    _columnOptions.IsSortedBy = false;
            //    BuildColumnsDataTable(ref dt, "HFC", _columnOptions);

            //    _columnOptions = new ColumnOptions();
            //    _columnOptions.ColumnCaption = "SF6";
            //    _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
            //    _columnOptions.IsPrimaryKey = false;
            //    _columnOptions.DisplayInCombo = false;
            //    _columnOptions.DisplayInManage = true;
            //    _columnOptions.IsSearchable = false;
            //    _columnOptions.AllowNull = false;
            //    _columnOptions.IsContextMenuCaption = false;
            //    _columnOptions.IsSortedBy = false;
            //    BuildColumnsDataTable(ref dt, "SF6", _columnOptions);
            //}

            //private void BuildColumChartTransformationTotalActivityByGasNew(ref DataTable dt)
            //{
            //    //Contruye las columnas y sus atributos.
            //    ColumnOptions _columnOptions = new ColumnOptions();
            //    _columnOptions.ColumnCaption = "Name";
            //    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            //    _columnOptions.IsPrimaryKey = false;
            //    _columnOptions.DisplayInCombo = false;
            //    _columnOptions.DisplayInManage = true;
            //    _columnOptions.IsSearchable = false;
            //    _columnOptions.AllowNull = false;
            //    _columnOptions.IsContextMenuCaption = false;
            //    _columnOptions.IsSortedBy = false;
            //    BuildColumnsDataTable(ref dt, "Name", _columnOptions);

        //}

            #region Nuevo Reporte AG-S-A-FT-F
                private void BuildColumnReportAG_S_A_FT_F(ref DataTable dt)
                {
                    //Contruye las columnas y sus atributos.
                    ColumnOptions _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "Id";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = false;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    BuildColumnsDataTable(ref dt, "Id", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "IdParent";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = false;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = true;
                    BuildColumnsDataTable(ref dt, "IdParent", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.Name;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = true;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, Resources.CommonListManage.Name, _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "tCO2e";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "tCO<sub>2</sub>e", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "CO2";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "CO<sub>2</sub>", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "CH4";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "CH<sub>4</sub>", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "N2O";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "N<sub>2</sub>O", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "PFC";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "PFC", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "HFC";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "HFC", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "SF<sub>6</sub>";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "SF<sub>6</sub>", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "HCT";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "HCT", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "HCNM";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "HCNM", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "C<sub>2</sub>H<sub>6</sub>";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "C<sub>2</sub>H<sub>6</sub>", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "C3H8";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "C<sub>3</sub>H<sub>8</sub>", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "C4H10";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "C<sub>4</sub>H<sub>10</sub>", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "CO";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "CO", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "NOx";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "NOx", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "SOx";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "SOx", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "SO2";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "SO<sub>2</sub>", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "H2S";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "H<sub>2</sub>S", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "PM";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "PM", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "PM10";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "PM<sub>10</sub>", _columnOptions);
                }

                public DataTable ReportAG_S_A_FT_F(Dictionary<String, Object> param)
                {
                    //Construye el datatable
                    DataTable _dt = BuildDataTable("ReportAG_S_A_FT_F");
                    BuildColumnReportAG_S_A_FT_F(ref _dt);

                    DateTime _startDate = (DateTime)System.Data.SqlTypes.SqlDateTime.MinValue;
                    DateTime _endDate = (DateTime)System.Data.SqlTypes.SqlDateTime.MaxValue;
                    if (param["StartDate"] != null)
                    { _startDate = Convert.ToDateTime(param["StartDate"]); }
                    if (param["EndDate"] != null)
                    { _endDate = Convert.ToDateTime(param["EndDate"]); }

                    Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
                    Int64 _idIndicator_tnCO2e = Convert.ToInt64(param["IdIndicator_tnCO2e"]);
                    Int64 _idIndicator_CO2 = Convert.ToInt64(param["IdIndicator_CO2"]);
                    Int64 _idIndicator_CH4 = Convert.ToInt64(param["IdIndicator_CH4"]);
                    Int64 _idIndicator_N2O = Convert.ToInt64(param["IdIndicator_N2O"]);
                    Int64 _idIndicator_PFC = Convert.ToInt64(param["IdIndicator_PFC"]);
                    Int64 _idIndicator_HFC = Convert.ToInt64(param["IdIndicator_HFC"]);
                    Int64 _idIndicator_SF6 = Convert.ToInt64(param["IdIndicator_SF6"]);
                    Int64 _idIndicator_HCNM = Convert.ToInt64(param["IdIndicator_HCNM"]);
                    Int64 _idIndicator_HCT = Convert.ToInt64(param["IdIndicator_HCT"]);
                    Int64 _idIndicator_CO = Convert.ToInt64(param["IdIndicator_CO"]);
                    Int64 _idIndicator_NOx = Convert.ToInt64(param["IdIndicator_NOx"]);
                    Int64 _idIndicator_SOx = Convert.ToInt64(param["IdIndicator_SOx"]);
                    Int64 _idIndicator_PM = Convert.ToInt64(param["IdIndicator_PM"]);
                    Int64 _idIndicator_SO2 = Convert.ToInt64(param["IdIndicator_SO2"]);
                    Int64 _idIndicator_H2S = Convert.ToInt64(param["IdIndicator_H2S"]);
                    Int64 _idIndicator_PM10 = Convert.ToInt64(param["IdIndicator_PM10"]);
                    Int64 _idIndicator_C2H6 = Convert.ToInt64(param["IdIndicator_C2H6"]);
                    Int64 _idIndicator_C3H8 = Convert.ToInt64(param["IdIndicator_C3H8"]);
                    Int64 _idIndicator_C4H10 = Convert.ToInt64(param["IdIndicator_C4H10"]);


                    List<Condesus.EMS.Business.RG.IColumnsReport> _listGA = ((ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess)).Report_GA_S_A_FT_F.GA(_idIndicator_tnCO2e, _idIndicator_CO2,
                        _idIndicator_CH4, _idIndicator_N2O, _idIndicator_PFC, _idIndicator_HFC, _idIndicator_SF6, _idIndicator_HCT,
                        _idIndicator_HCNM, _idIndicator_C2H6, _idIndicator_C3H8, _idIndicator_C4H10, _idIndicator_CO, _idIndicator_NOx,
                        _idIndicator_SOx, _idIndicator_SO2, _idIndicator_H2S, _idIndicator_PM, _idIndicator_PM10, _startDate, _endDate);

                    Int64 _id = 1;

                    //Empezamos con los ROOT de Area Geografica
                    foreach (Condesus.EMS.Business.RG.IColumnsReport _icolumns in _listGA)
                    {
                        _dt.Rows.Add(_id, null, _icolumns.Name, 
                            Common.Functions.CustomEMSRound(_icolumns.Result_tCO2e),
                            Common.Functions.CustomEMSRound(_icolumns.Result_CO2),
                            Common.Functions.CustomEMSRound(_icolumns.Result_CH4),
                            Common.Functions.CustomEMSRound(_icolumns.Result_N2O),
                            Common.Functions.CustomEMSRound(_icolumns.Result_PFC),
                            Common.Functions.CustomEMSRound(_icolumns.Result_HFC),
                            Common.Functions.CustomEMSRound(_icolumns.Result_SF6),
                            Common.Functions.CustomEMSRound(_icolumns.Result_HCT),
                            Common.Functions.CustomEMSRound(_icolumns.Result_HCNM),
                            Common.Functions.CustomEMSRound(_icolumns.Result_C2H6),
                            Common.Functions.CustomEMSRound(_icolumns.Result_C3H8),
                            Common.Functions.CustomEMSRound(_icolumns.Result_C4H10),
                            Common.Functions.CustomEMSRound(_icolumns.Result_CO),
                            Common.Functions.CustomEMSRound(_icolumns.Result_NOx),
                            Common.Functions.CustomEMSRound(_icolumns.Result_SOx),
                            Common.Functions.CustomEMSRound(_icolumns.Result_SO2),
                            Common.Functions.CustomEMSRound(_icolumns.Result_H2S),
                            Common.Functions.CustomEMSRound(_icolumns.Result_PM),
                            Common.Functions.CustomEMSRound(_icolumns.Result_PM10));

                        Int64 _idParent = _id;
                        _id++;

                        //Cargo el Scope de esta Area Geografica
                        GetScopes(ref _dt, _icolumns, _idParent, ref _id);

                        //Ahora le pido los hijos de esta Area Geografica
                        GetGeographicAreaChild(ref _dt, _icolumns, ref _id, _idParent);

                    }


                    return _dt;
                }
                private void GetScopes(ref DataTable _dt, Condesus.EMS.Business.RG.IColumnsReport geoArea, Int64 idGAFather, ref Int64 id)
                {
                    //Despues de cargar el arbol de Area Geografica, me quedo con la ultima Area y desde ahi cuelgo los Scopes
                    List<Condesus.EMS.Business.RG.IColumnsReport> _scopes = geoArea.Items();
                    //List<Condesus.EMS.Business.RG.IColumnsReport> _scopes = geoArea.Items(idIndicator_tnCO2e, idIndicator_CO2,
                    //    idIndicator_CH4, idIndicator_N2O, idIndicator_PFC, idIndicator_HFC, idIndicator_SF6, idIndicator_HCT,
                    //    idIndicator_HCNM, idIndicator_C2H6, idIndicator_C3H8, idIndicator_C4H10, idIndicator_CO, idIndicator_NOx,
                    //    idIndicator_SOx, idIndicator_SO2, idIndicator_H2S, idIndicator_PM, idIndicator_PM10, startDate, endDate);
                    foreach (Condesus.EMS.Business.RG.IColumnsReport _item in _scopes)
                    {
                        _dt.Rows.Add(id, idGAFather, _item.Name,
                            Common.Functions.CustomEMSRound(_item.Result_tCO2e),
                            Common.Functions.CustomEMSRound(_item.Result_CO2),
                            Common.Functions.CustomEMSRound(_item.Result_CH4),
                            Common.Functions.CustomEMSRound(_item.Result_N2O),
                            Common.Functions.CustomEMSRound(_item.Result_PFC),
                            Common.Functions.CustomEMSRound(_item.Result_HFC),
                            Common.Functions.CustomEMSRound(_item.Result_SF6),
                            Common.Functions.CustomEMSRound(_item.Result_HCT),
                            Common.Functions.CustomEMSRound(_item.Result_HCNM),
                            Common.Functions.CustomEMSRound(_item.Result_C2H6),
                            Common.Functions.CustomEMSRound(_item.Result_C3H8),
                            Common.Functions.CustomEMSRound(_item.Result_C4H10),
                            Common.Functions.CustomEMSRound(_item.Result_CO),
                            Common.Functions.CustomEMSRound(_item.Result_NOx),
                            Common.Functions.CustomEMSRound(_item.Result_SOx),
                            Common.Functions.CustomEMSRound(_item.Result_SO2),
                            Common.Functions.CustomEMSRound(_item.Result_H2S),
                            Common.Functions.CustomEMSRound(_item.Result_PM),
                            Common.Functions.CustomEMSRound(_item.Result_PM10));

                        Int64 _idScopeFather = id;
                        id++;

                        GetActivities(ref _dt, _item, _idScopeFather, ref id);
                    }
                }
                private void GetActivities(ref DataTable _dt, Condesus.EMS.Business.RG.IColumnsReport scope, Int64 idScopeFather, ref Int64 id)
                {
                    //var _activities = from aa in scope.Items(idIndicator_tnCO2e, idIndicator_CO2,
                    //            idIndicator_CH4, idIndicator_N2O, idIndicator_PFC, idIndicator_HFC, idIndicator_SF6, idIndicator_HCT,
                    //            idIndicator_HCNM, idIndicator_C2H6, idIndicator_C3H8, idIndicator_C4H10, idIndicator_CO, idIndicator_NOx,
                    //            idIndicator_SOx, idIndicator_SO2, idIndicator_H2S, idIndicator_PM, idIndicator_PM10, startDate, endDate)
                    //                  orderby aa.Name ascending
                    //                  select aa;

                    var _activities = from aa in scope.Items()
                                      orderby aa.Name ascending
                                      select aa;
                    foreach (Condesus.EMS.Business.RG.IColumnsReport _activity in _activities)
                    {
                        //El scope es el padre de todas las actividades que se cargan aca...
                        _dt.Rows.Add(id, idScopeFather, _activity.Name,
                            Common.Functions.CustomEMSRound(_activity.Result_tCO2e),
                            Common.Functions.CustomEMSRound(_activity.Result_CO2),
                            Common.Functions.CustomEMSRound(_activity.Result_CH4),
                            Common.Functions.CustomEMSRound(_activity.Result_N2O),
                            Common.Functions.CustomEMSRound(_activity.Result_PFC),
                            Common.Functions.CustomEMSRound(_activity.Result_HFC),
                            Common.Functions.CustomEMSRound(_activity.Result_SF6),
                            Common.Functions.CustomEMSRound(_activity.Result_HCT),
                            Common.Functions.CustomEMSRound(_activity.Result_HCNM),
                            Common.Functions.CustomEMSRound(_activity.Result_C2H6),
                            Common.Functions.CustomEMSRound(_activity.Result_C3H8),
                            Common.Functions.CustomEMSRound(_activity.Result_C4H10),
                            Common.Functions.CustomEMSRound(_activity.Result_CO),
                            Common.Functions.CustomEMSRound(_activity.Result_NOx),
                            Common.Functions.CustomEMSRound(_activity.Result_SOx),
                            Common.Functions.CustomEMSRound(_activity.Result_SO2),
                            Common.Functions.CustomEMSRound(_activity.Result_H2S),
                            Common.Functions.CustomEMSRound(_activity.Result_PM),
                            Common.Functions.CustomEMSRound(_activity.Result_PM10));

                        Int64 _idParent = id;
                        id++;

                        //Cargo los facility Types de esta Actividad
                        GetFacilityTypes(ref _dt, _activity, _idParent, ref id);

                        //Con esto cargo todos los hijos de esta actividad...
                        GetActivitiesChild(ref _dt, _activity, ref id, _idParent);
                    }
                }
                private void GetFacilityTypes(ref DataTable _dt, Condesus.EMS.Business.RG.IColumnsReport activity, Int64? idActivityFather, ref Int64 id)
                {
                    //List<Condesus.EMS.Business.RG.IColumnsReport> _facilities = activity.Items(idIndicator_tnCO2e, idIndicator_CO2,
                    //    idIndicator_CH4, idIndicator_N2O, idIndicator_PFC, idIndicator_HFC, idIndicator_SF6, idIndicator_HCT,
                    //    idIndicator_HCNM, idIndicator_C2H6, idIndicator_C3H8, idIndicator_C4H10, idIndicator_CO, idIndicator_NOx,
                    //    idIndicator_SOx, idIndicator_SO2, idIndicator_H2S, idIndicator_PM, idIndicator_PM10, startDate, endDate);
                    //Despues de cargar el arbol de Area Geografica, me quedo con la ultima Area y desde ahi cuelgo los Scopes
                    List<Condesus.EMS.Business.RG.IColumnsReport> _facilities = activity.Items();
                    foreach (Condesus.EMS.Business.RG.IColumnsReport _item in _facilities)
                    {
                        _dt.Rows.Add(id, idActivityFather, _item.Name,
                            Common.Functions.CustomEMSRound(_item.Result_tCO2e),
                            Common.Functions.CustomEMSRound(_item.Result_CO2),
                            Common.Functions.CustomEMSRound(_item.Result_CH4),
                            Common.Functions.CustomEMSRound(_item.Result_N2O),
                            Common.Functions.CustomEMSRound(_item.Result_PFC),
                            Common.Functions.CustomEMSRound(_item.Result_HFC),
                            Common.Functions.CustomEMSRound(_item.Result_SF6),
                            Common.Functions.CustomEMSRound(_item.Result_HCT),
                            Common.Functions.CustomEMSRound(_item.Result_HCNM),
                            Common.Functions.CustomEMSRound(_item.Result_C2H6),
                            Common.Functions.CustomEMSRound(_item.Result_C3H8),
                            Common.Functions.CustomEMSRound(_item.Result_C4H10),
                            Common.Functions.CustomEMSRound(_item.Result_CO),
                            Common.Functions.CustomEMSRound(_item.Result_NOx),
                            Common.Functions.CustomEMSRound(_item.Result_SOx),
                            Common.Functions.CustomEMSRound(_item.Result_SO2),
                            Common.Functions.CustomEMSRound(_item.Result_H2S),
                            Common.Functions.CustomEMSRound(_item.Result_PM),
                            Common.Functions.CustomEMSRound(_item.Result_PM10));

                        Int64 _idActivityFather = id;
                        id++;

                        GetFacilities(ref _dt, _item, _idActivityFather, ref id);
                    }
                }
                private void GetFacilities(ref DataTable _dt, Condesus.EMS.Business.RG.IColumnsReport facilityType, Int64 idFacilityTypeFather, ref Int64 id)
                {
                    //    var _facilities = from aa in facilityType.Items(idIndicator_tnCO2e, idIndicator_CO2,
                    //idIndicator_CH4, idIndicator_N2O, idIndicator_PFC, idIndicator_HFC, idIndicator_SF6, idIndicator_HCT,
                    //idIndicator_HCNM, idIndicator_C2H6, idIndicator_C3H8, idIndicator_C4H10, idIndicator_CO, idIndicator_NOx,
                    //idIndicator_SOx, idIndicator_SO2, idIndicator_H2S, idIndicator_PM, idIndicator_PM10, startDate, endDate)
                    //                      orderby aa.Name ascending
                    //                      select aa;

                    var _facilities = from aa in facilityType.Items()
                                      orderby aa.Name ascending
                                      select aa;
                    foreach (Condesus.EMS.Business.RG.IColumnsReport _facility in _facilities)
                    {
                        //El scope es el padre de todas las actividades que se cargan aca...
                        _dt.Rows.Add(id, idFacilityTypeFather, _facility.Name,
                            Common.Functions.CustomEMSRound(_facility.Result_tCO2e),
                            Common.Functions.CustomEMSRound(_facility.Result_CO2),
                            Common.Functions.CustomEMSRound(_facility.Result_CH4),
                            Common.Functions.CustomEMSRound(_facility.Result_N2O),
                            Common.Functions.CustomEMSRound(_facility.Result_PFC),
                            Common.Functions.CustomEMSRound(_facility.Result_HFC),
                            Common.Functions.CustomEMSRound(_facility.Result_SF6),
                            Common.Functions.CustomEMSRound(_facility.Result_HCT),
                            Common.Functions.CustomEMSRound(_facility.Result_HCNM),
                            Common.Functions.CustomEMSRound(_facility.Result_C2H6),
                            Common.Functions.CustomEMSRound(_facility.Result_C3H8),
                            Common.Functions.CustomEMSRound(_facility.Result_C4H10),
                            Common.Functions.CustomEMSRound(_facility.Result_CO),
                            Common.Functions.CustomEMSRound(_facility.Result_NOx),
                            Common.Functions.CustomEMSRound(_facility.Result_SOx),
                            Common.Functions.CustomEMSRound(_facility.Result_SO2),
                            Common.Functions.CustomEMSRound(_facility.Result_H2S),
                            Common.Functions.CustomEMSRound(_facility.Result_PM),
                            Common.Functions.CustomEMSRound(_facility.Result_PM10));

                        Int64 _idParent = id;
                        id++;
                        //Con esto cargo todos los hijos de esta actividad...
                        GetFacilitiesChild(ref _dt, _facility, ref id, _idParent);
                    }
                }
                private void GetGeographicAreaChild(ref DataTable _dt, Condesus.EMS.Business.RG.IColumnsReport _item, ref Int64 id, Int64? idGeoAreaParent)
                {
                    //var _geographicAreas = from geoarea in _item.Child(idIndicator_tnCO2e, idIndicator_CO2,
                    //    idIndicator_CH4, idIndicator_N2O, idIndicator_PFC, idIndicator_HFC, idIndicator_SF6, idIndicator_HCT,
                    //    idIndicator_HCNM, idIndicator_C2H6, idIndicator_C3H8, idIndicator_C4H10, idIndicator_CO, idIndicator_NOx,
                    //    idIndicator_SOx, idIndicator_SO2, idIndicator_H2S, idIndicator_PM, idIndicator_PM10, startDate, endDate)
                    //                       orderby geoarea.Name ascending
                    //                       select geoarea;
                    //Ahora por cada Scope, cargo las actividades
                    
                        var _geographicAreas = from geoarea in _item.Child()
                                               orderby geoarea.Name ascending
                                               select geoarea;
                        foreach (Condesus.EMS.Business.RG.IColumnsReport _geographicArea in _geographicAreas)
                        {
                            //El scope es el padre de todas las actividades que se cargan aca...
                            _dt.Rows.Add(id, idGeoAreaParent, _geographicArea.Name,
                                Common.Functions.CustomEMSRound(_geographicArea.Result_tCO2e),
                                Common.Functions.CustomEMSRound(_geographicArea.Result_CO2),
                                Common.Functions.CustomEMSRound(_geographicArea.Result_CH4),
                                Common.Functions.CustomEMSRound(_geographicArea.Result_N2O),
                                Common.Functions.CustomEMSRound(_geographicArea.Result_PFC),
                                Common.Functions.CustomEMSRound(_geographicArea.Result_HFC),
                                Common.Functions.CustomEMSRound(_geographicArea.Result_SF6),
                                Common.Functions.CustomEMSRound(_geographicArea.Result_HCT),
                                Common.Functions.CustomEMSRound(_geographicArea.Result_HCNM),
                                Common.Functions.CustomEMSRound(_geographicArea.Result_C2H6),
                                Common.Functions.CustomEMSRound(_geographicArea.Result_C3H8),
                                Common.Functions.CustomEMSRound(_geographicArea.Result_C4H10),
                                Common.Functions.CustomEMSRound(_geographicArea.Result_CO),
                                Common.Functions.CustomEMSRound(_geographicArea.Result_NOx),
                                Common.Functions.CustomEMSRound(_geographicArea.Result_SOx),
                                Common.Functions.CustomEMSRound(_geographicArea.Result_SO2),
                                Common.Functions.CustomEMSRound(_geographicArea.Result_H2S),
                                Common.Functions.CustomEMSRound(_geographicArea.Result_PM),
                                Common.Functions.CustomEMSRound(_geographicArea.Result_PM10));

                            Int64 _idParent = id;
                            id++;

                            //Cargo el Scope de esta Area Geografica
                            GetScopes(ref _dt, _geographicArea, _idParent, ref id);

                            //Ahora le pido los hijos de esta Area Geografica
                            GetGeographicAreaChild(ref _dt, _geographicArea, ref id, _idParent);
                        }
                }
                private void GetActivitiesChild(ref DataTable _dt, Condesus.EMS.Business.RG.IColumnsReport _item, ref Int64 id, Int64? idScopeFather)
                {
                    //var _activities = from aa in _item.Child(idIndicator_tnCO2e, idIndicator_CO2,
                    //    idIndicator_CH4, idIndicator_N2O, idIndicator_PFC, idIndicator_HFC, idIndicator_SF6, idIndicator_HCT,
                    //    idIndicator_HCNM, idIndicator_C2H6, idIndicator_C3H8, idIndicator_C4H10, idIndicator_CO, idIndicator_NOx,
                    //    idIndicator_SOx, idIndicator_SO2, idIndicator_H2S, idIndicator_PM, idIndicator_PM10, startDate, endDate)
                    //                  //where aa.Result != 0
                    //                  orderby aa.Name ascending
                    //                  select aa;
                    //Ahora por cada Scope, cargo las actividades
                    //List<Condesus.EMS.Business.RG.IColumnsReport> _activities = _item.Child(37, startDate, endDate);
                    var _activities = from aa in _item.Child()
                                      //where aa.Result != 0
                                      orderby aa.Name ascending
                                      select aa;
                    foreach (Condesus.EMS.Business.RG.IColumnsReport _activity in _activities)
                    {
                        //El scope es el padre de todas las actividades que se cargan aca...
                        _dt.Rows.Add(id, idScopeFather, _activity.Name,
                            Common.Functions.CustomEMSRound(_activity.Result_tCO2e),
                            Common.Functions.CustomEMSRound(_activity.Result_CO2),
                            Common.Functions.CustomEMSRound(_activity.Result_CH4),
                            Common.Functions.CustomEMSRound(_activity.Result_N2O),
                            Common.Functions.CustomEMSRound(_activity.Result_PFC),
                            Common.Functions.CustomEMSRound(_activity.Result_HFC),
                            Common.Functions.CustomEMSRound(_activity.Result_SF6),
                            Common.Functions.CustomEMSRound(_activity.Result_HCT),
                            Common.Functions.CustomEMSRound(_activity.Result_HCNM),
                            Common.Functions.CustomEMSRound(_activity.Result_C2H6),
                            Common.Functions.CustomEMSRound(_activity.Result_C3H8),
                            Common.Functions.CustomEMSRound(_activity.Result_C4H10),
                            Common.Functions.CustomEMSRound(_activity.Result_CO),
                            Common.Functions.CustomEMSRound(_activity.Result_NOx),
                            Common.Functions.CustomEMSRound(_activity.Result_SOx),
                            Common.Functions.CustomEMSRound(_activity.Result_SO2),
                            Common.Functions.CustomEMSRound(_activity.Result_H2S),
                            Common.Functions.CustomEMSRound(_activity.Result_PM),
                            Common.Functions.CustomEMSRound(_activity.Result_PM10));

                        Int64? _idParent = id;
                        id++;

                        //Cargo los facility Types de esta Actividad
                        GetFacilityTypes(ref _dt, _activity, _idParent, ref id);

                        //Carga los hijos
                        GetActivitiesChild(ref _dt, _activity, ref id, _idParent);
                    }
                }
                private void GetFacilitiesChild(ref DataTable _dt, Condesus.EMS.Business.RG.IColumnsReport _item, ref Int64 id, Int64? idFacilityTypeFather)
                {
                    //var _facilities = from aa in _item.Child(idIndicator_tnCO2e, idIndicator_CO2,
                    //    idIndicator_CH4, idIndicator_N2O, idIndicator_PFC, idIndicator_HFC, idIndicator_SF6, idIndicator_HCT,
                    //    idIndicator_HCNM, idIndicator_C2H6, idIndicator_C3H8, idIndicator_C4H10, idIndicator_CO, idIndicator_NOx,
                    //    idIndicator_SOx, idIndicator_SO2, idIndicator_H2S, idIndicator_PM, idIndicator_PM10, startDate, endDate)
                    //                  //where aa.Result != 0
                    //                  orderby aa.Name ascending
                    //                  select aa;
                    //Ahora por cada Scope, cargo las actividades
                    //List<Condesus.EMS.Business.RG.IColumnsReport> _activities = _item.Child(37, startDate, endDate);
                    var _facilities = from aa in _item.Child()
                                      //where aa.Result != 0
                                      orderby aa.Name ascending
                                      select aa;
                    foreach (Condesus.EMS.Business.RG.IColumnsReport _facility in _facilities)
                    {
                        //El scope es el padre de todas las actividades que se cargan aca...
                        _dt.Rows.Add(id, idFacilityTypeFather, _facility.Name,
                            Common.Functions.CustomEMSRound(_facility.Result_tCO2e),
                            Common.Functions.CustomEMSRound(_facility.Result_CO2),
                            Common.Functions.CustomEMSRound(_facility.Result_CH4),
                            Common.Functions.CustomEMSRound(_facility.Result_N2O),
                            Common.Functions.CustomEMSRound(_facility.Result_PFC),
                            Common.Functions.CustomEMSRound(_facility.Result_HFC),
                            Common.Functions.CustomEMSRound(_facility.Result_SF6),
                            Common.Functions.CustomEMSRound(_facility.Result_HCT),
                            Common.Functions.CustomEMSRound(_facility.Result_HCNM),
                            Common.Functions.CustomEMSRound(_facility.Result_C2H6),
                            Common.Functions.CustomEMSRound(_facility.Result_C3H8),
                            Common.Functions.CustomEMSRound(_facility.Result_C4H10),
                            Common.Functions.CustomEMSRound(_facility.Result_CO),
                            Common.Functions.CustomEMSRound(_facility.Result_NOx),
                            Common.Functions.CustomEMSRound(_facility.Result_SOx),
                            Common.Functions.CustomEMSRound(_facility.Result_SO2),
                            Common.Functions.CustomEMSRound(_facility.Result_H2S),
                            Common.Functions.CustomEMSRound(_facility.Result_PM),
                            Common.Functions.CustomEMSRound(_facility.Result_PM10));

                        Int64? _idParent = id;
                        id++;

                        GetFacilitiesChild(ref _dt, _facility, ref id, _idParent);
                    }
                }

    
    
         
            
            #endregion


            #region Report Emission Grouping By Activities
                private void BuildColumReportTransformation(ref DataTable dt)
                {
                    //Contruye las columnas y sus atributos.
                    ColumnOptions _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.IdActivity;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = false;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    BuildColumnsDataTable(ref dt, "IdActivity", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.IdParentActivity;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = false;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = true;
                    BuildColumnsDataTable(ref dt, "IdParentActivity", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.AccountingActivity;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = true;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, Resources.CommonListManage.AccountingActivity, _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "tnCO2e";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "tnCO2e", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "CO2";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "CO2", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "CH4";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "CH4", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "N2O";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "N2O", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "PFC";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "PFC", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "HFC";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "HFC", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "SF6";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "SF6", _columnOptions);
                }
                /// <summary>
                /// Construye el DataTable a modo List con los datos de la Coleccion ReportTransformationByScope.
                /// </summary>
                /// <param name="param">Parametros opcionales para filtrar</param>
                /// <returns>Un <c>DataTable</c></returns>
                public DataTable ReportTransformationByScope(Dictionary<String, Object> param)
                {
                    //Construye el datatable
                    DataTable _dt = BuildDataTable("ReportTransformationByScope");

                    BuildColumReportTransformation(ref _dt);

                    //Estas son las columnas
                    //IdActivity    //AccountingActivity
                    //IdFacility    //Facility
                    //IdIndicator   //Indicator
                    //tnCO2e    //CO2   //CH4   //N2O   //PFC   //HFC   //SF6

                    DateTime? _startDate = null;
                    DateTime? _endDate = null;
                    if (param["StartDate"] != null)
                    { _startDate = Convert.ToDateTime(param["StartDate"]); }
                    if (param["EndDate"] != null)
                    { _endDate = Convert.ToDateTime(param["EndDate"]); }

                    Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
                    Int64 _idScope = Convert.ToInt64(param["IdScope"]); ;
                    Int64 _idIndicator_tnCO2e = Convert.ToInt64(param["IdIndicator_tnCO2e"]);
                    Int64 _idIndicator_CO2 = Convert.ToInt64(param["IdIndicator_CO2"]);
                    Int64 _idIndicator_CH4 = Convert.ToInt64(param["IdIndicator_CH4"]);
                    Int64 _idIndicator_N2O = Convert.ToInt64(param["IdIndicator_N2O"]);
                    Int64 _idIndicator_PFC = Convert.ToInt64(param["IdIndicator_PFC"]);
                    Int64 _idIndicator_HFC = Convert.ToInt64(param["IdIndicator_HFC"]);
                    Int64 _idIndicator_SF6 = Convert.ToInt64(param["IdIndicator_SF6"]);

                    Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
                    AccountingScope _accountingScope = EMSLibrary.User.PerformanceAssessments.Configuration.AccountingScope(_idScope);

                    Indicator _indicator_tnCO2e = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_tnCO2e);
                    Indicator _indicator_CO2 = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_CO2);
                    Indicator _indicator_CH4 = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_CH4);
                    Indicator _indicator_N2O = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_N2O);
                    Indicator _indicator_PFC = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_PFC);
                    Indicator _indicator_HFC = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_HFC);
                    Indicator _indicator_SF6 = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_SF6);

                    //Construye el dictionary de actividades completas!!!
                    BuildAllAccountingActivity(EMSLibrary.User.PerformanceAssessments.Configuration.AccountingActivities());

                    var _activitiesWithFacilities = from aa in _AccountingActivities.Values
                                                where aa.Facilities(_organization).Count > 0
                                                orderby aa.LanguageOption.Name ascending
                                                select aa;

                    //Recorre todas las Activities
                    //foreach (AccountingActivity _accountingActivity in _AccountingActivities.Values)
                    foreach (AccountingActivity _accountingActivity in _activitiesWithFacilities)
                    {
                        //Decimal _total_tnCO2eByActivity = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_tnCO2e, _startDate, _endDate);
                        //Se trae los facilities de la actividad para la organizacion seleccionada
                        Dictionary<Int64, Facility> _facilities = _accountingActivity.Facilities(_organization);
                        Int64? _idParentActivity;
                        if (_accountingActivity.IdParentActivity == 0)
                        { _idParentActivity = null; }
                        else
                        { _idParentActivity = _accountingActivity.IdParentActivity; }

                        Decimal _total_tnCO2eByActivity = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_tnCO2e, _startDate, _endDate);
                        Decimal _total_CO2ByActivity = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_CO2, _startDate, _endDate);
                        Decimal _total_CH4ByActivity = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_CH4, _startDate, _endDate);
                        Decimal _total_N2OByActivity = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_N2O, _startDate, _endDate);
                        Decimal _total_PFCByActivity = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_PFC, _startDate, _endDate);
                        Decimal _total_HFCByActivity = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_HFC, _startDate, _endDate);
                        Decimal _total_SF6ByActivity = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_SF6, _startDate, _endDate);

                        //Arma el filtro(where) para buscar en el DT que si ya fue cargado el registro
                        String _filter = "IdActivity=" + _accountingActivity.IdActivity.ToString();
                        if (_idParentActivity != null)
                        {
                            _filter += " And (IdParentActivity=" + _idParentActivity.ToString() + " OR IdParentActivity is null)";
                        }
                        else
                        {
                            _filter += " And IdParentActivity is null";
                        }
                        //Filtra sobre el DataTable
                        DataRow[] _dataRow = _dt.Select(_filter);
                        //Si ya esta cargada, no hace nada!!!
                        if (_dataRow.Count() == 0)
                        {
                            //Inserta la medicion y los valores de su transformacion...
                            _dt.Rows.Add(_accountingActivity.IdActivity,
                                _idParentActivity,
                                _accountingActivity.LanguageOption.Name,
                                _total_tnCO2eByActivity,
                                _total_CO2ByActivity,
                                _total_CH4ByActivity,
                                _total_N2OByActivity,
                                _total_PFCByActivity,
                                _total_HFCByActivity,
                                _total_SF6ByActivity);
                            //Si no estoy en una actividad root, entonces armo para arriba el arbol
                            if (_accountingActivity.IdParentActivity != 0)
                            {
                                //Limpio el dictionary y vuelve a cargar para recorrer...
                                _AccountingActivitiesParents = new Dictionary<Int64, AccountingActivity>();
                                //Obtiene los padres
                                GetParentsAccountingActivity(_accountingActivity);
                                //Ahora se cargan en el Tree los padres de item que se esta insertando
                                foreach (AccountingActivity _item in _AccountingActivitiesParents.Values)
                                {
                                    //Si es un root, entonces el idparent es null!
                                    Int64? _idParentActivityItem;
                                    if (_item.IdParentActivity == 0)
                                    { _idParentActivityItem = null; }
                                    else
                                    { _idParentActivityItem = _item.IdParentActivity; }

                                    //Arma el filtro(where) para buscar en el DT que si ya fue cargado el registro
                                    _filter = "IdActivity=" + _item.IdActivity.ToString();
                                    if (_idParentActivityItem != null)
                                    {
                                        _filter += " And (IdParentActivity=" + _idParentActivityItem.ToString() + " OR IdParentActivity is null)";
                                    }
                                    else
                                    {
                                        _filter += " And IdParentActivity is null";
                                    }
                                    //Filtra sobre el DataTable
                                    _dataRow = _dt.Select(_filter);
                                    if (_dataRow.Count() == 0)
                                    {
                                        _total_tnCO2eByActivity = _item.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_tnCO2e, _startDate, _endDate);
                                        _total_CO2ByActivity = _item.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_CO2, _startDate, _endDate);
                                        _total_CH4ByActivity = _item.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_CH4, _startDate, _endDate);
                                        _total_N2OByActivity = _item.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_N2O, _startDate, _endDate);
                                        _total_PFCByActivity = _item.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_PFC, _startDate, _endDate);
                                        _total_HFCByActivity = _item.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_HFC, _startDate, _endDate);
                                        _total_SF6ByActivity = _item.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_SF6, _startDate, _endDate);

                                        //El registro no existe lo agrega al DataTable.
                                        _dt.Rows.Add(_item.IdActivity,
                                        _idParentActivityItem,
                                        _item.LanguageOption.Name,
                                        _total_tnCO2eByActivity,
                                        _total_CO2ByActivity,
                                        _total_CH4ByActivity,
                                        _total_N2OByActivity,
                                        _total_PFCByActivity,
                                        _total_HFCByActivity,
                                        _total_SF6ByActivity);
                                    }
                                }
                            }
                        }
                    }

                    //pongo el total general
                    if (_dt.Rows.Count > 0)
                    {
                        Decimal _total_tnCO2eByActivity = 0;
                        Decimal _total_CO2ByActivity = 0;
                        Decimal _total_CH4ByActivity = 0;
                        Decimal _total_N2OByActivity = 0;
                        Decimal _total_PFCByActivity = 0;
                        Decimal _total_HFCByActivity = 0;
                        Decimal _total_SF6ByActivity = 0;

                        //Recorre todas las Activities Roots
                        foreach (AccountingActivity _accountingActivity in EMSLibrary.User.PerformanceAssessments.Configuration.AccountingActivities().Values)
                        {
                            _total_tnCO2eByActivity += _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_tnCO2e, _startDate, _endDate);
                            _total_CO2ByActivity += _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_CO2, _startDate, _endDate);
                            _total_CH4ByActivity += _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_CH4, _startDate, _endDate);
                            _total_N2OByActivity += _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_N2O, _startDate, _endDate);
                            _total_PFCByActivity += _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_PFC, _startDate, _endDate);
                            _total_HFCByActivity += _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_HFC, _startDate, _endDate);
                            _total_SF6ByActivity += _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_SF6, _startDate, _endDate);
                        }

                        //Inserta el total para cada columna
                        _dt.Rows.Add(-1,
                            null, "<b>" + Resources.Common.Total + "</b>",
                            _total_tnCO2eByActivity,
                            _total_CO2ByActivity,
                            _total_CH4ByActivity,
                            _total_N2OByActivity,
                            _total_PFCByActivity,
                            _total_HFCByActivity,
                            _total_SF6ByActivity);
                    }

                    //Retorna el DataTable
                    return _dt;
                }
            #endregion
            //public DataTable ReportTransformationByScopeOLD(Dictionary<String, Object> param)
            //{
            //    //Construye el datatable
            //    DataTable _dt = BuildDataTable("ReportTransformationByScope");

            //    BuildColumReportTransformation(ref _dt);

            //    //Estas son las columnas
            //    //Measurement
            //    //tnCO2e    //CO2   //CH4   //N2O   //PFC   //HFC   //SF6

            //    DateTime? _startDate = null;
            //    DateTime? _endDate = null;
            //    if (param["StartDate"] != null)
            //    { _startDate = Convert.ToDateTime(param["StartDate"]); }
            //    if (param["EndDate"] != null)
            //    { _endDate = Convert.ToDateTime(param["EndDate"]); }

            //    Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
            //    Int64 _idScope = Convert.ToInt64(param["IdScope"]); ;
            //    Int64 _idIndicator_tnCO2e = Convert.ToInt64(param["IdIndicator_tnCO2e"]);
            //    Int64 _idIndicator_CO2 = Convert.ToInt64(param["IdIndicator_CO2"]);
            //    Int64 _idIndicator_CH4 = Convert.ToInt64(param["IdIndicator_CH4"]);
            //    Int64 _idIndicator_N2O = Convert.ToInt64(param["IdIndicator_N2O"]);
            //    Int64 _idIndicator_PFC = Convert.ToInt64(param["IdIndicator_PFC"]);
            //    Int64 _idIndicator_HFC = Convert.ToInt64(param["IdIndicator_HFC"]);
            //    Int64 _idIndicator_SF6 = Convert.ToInt64(param["IdIndicator_SF6"]);

            //    Decimal _result_tnCO2e = 0;
            //    Decimal _result_CO2 = 0;
            //    Decimal _result_CH4 = 0;
            //    Decimal _result_N2O = 0;
            //    Decimal _result_PFC = 0;
            //    Decimal _result_HFC = 0;
            //    Decimal _result_SF6 = 0;

            //    //Indicator _indicator = null;
            //    Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
            //    AccountingScope _accountingScope = EMSLibrary.User.PerformanceAssessments.Configuration.AccountingScope(_idScope);

            //    Indicator _indicator_tnCO2e = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_tnCO2e);
            //    Indicator _indicator_CO2 = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_CO2);
            //    Indicator _indicator_CH4 = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_CH4);
            //    Indicator _indicator_N2O = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_N2O);
            //    Indicator _indicator_PFC = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_PFC);
            //    Indicator _indicator_HFC = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_HFC);
            //    Indicator _indicator_SF6 = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_SF6);

            //    //Construye el dictionary de actividades completas!!!
            //    BuildAllAccountingActivity(EMSLibrary.User.PerformanceAssessments.Configuration.AccountingActivities());

            //    //Recorre todas las Activities
            //    foreach (AccountingActivity _accountingActivity in _AccountingActivities.Values)
            //    {
            //        //Decimal _total_tnCO2eByActivity = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_tnCO2e, _startDate, _endDate);

            //        //Se trae los facilities de la actividad para la organizacion seleccionada
            //        Dictionary<Int64, Facility> _facilities = _accountingActivity.Facilities(_organization);
            //        Int64? _idParentActivity;
            //        if (_accountingActivity.IdParentActivity == 0)
            //        { _idParentActivity = null; }
            //        else
            //        { _idParentActivity = _accountingActivity.IdParentActivity; }

            //        //Recorre todos los facilities
            //        foreach (Facility _facility in _facilities.Values)
            //        {
            //            //Se trae las mediciones para cada facility del scope seleccionado
            //            Dictionary<Int64, Measurement> _measurements = _facility.Measurements(_accountingScope, _accountingActivity);

            //            //Recorre las mediciones
            //            foreach (Measurement _measurement in _measurements.Values)
            //            {
            //                //Obtiene el resultado para cada columna
            //                _result_tnCO2e = _measurement.ResultTransformationByIndicator(_indicator_tnCO2e, _startDate, _endDate);
            //                _result_CO2 = _measurement.ResultTransformationByIndicator(_indicator_CO2, _startDate, _endDate);
            //                _result_CH4 = _measurement.ResultTransformationByIndicator(_indicator_CH4, _startDate, _endDate);
            //                _result_N2O = _measurement.ResultTransformationByIndicator(_indicator_N2O, _startDate, _endDate);
            //                _result_PFC = _measurement.ResultTransformationByIndicator(_indicator_PFC, _startDate, _endDate);
            //                _result_HFC = _measurement.ResultTransformationByIndicator(_indicator_HFC, _startDate, _endDate);
            //                _result_SF6 = _measurement.ResultTransformationByIndicator(_indicator_SF6, _startDate, _endDate);

            //                //Inserta la medicion y los valores de su transformacion...
            //                _dt.Rows.Add(_accountingActivity.IdActivity,
            //                    _idParentActivity, _accountingActivity.LanguageOption.Name,
            //                    //_facility.IdFacility, 
            //                    _facility.LanguageOption.Name,
            //                    //_measurement.IdMeasurement, 
            //                    _measurement.LanguageOption.Name,
            //                    _result_tnCO2e, _result_CO2, _result_CH4, _result_N2O, _result_PFC, _result_HFC, _result_SF6);

            //                //Si no estoy en una actividad root, entonces armo para arriba el arbol
            //                if (_accountingActivity.IdParentActivity != 0)
            //                {
            //                    //Limpio el dictionary y vuelve a cargar para recorrer...
            //                    _AccountingActivitiesParents = new Dictionary<Int64, AccountingActivity>();
            //                    //Obtiene los padres
            //                    GetParentsAccountingActivity(_accountingActivity);
            //                    //Ahora se cargan en el Tree los padres de item que se esta insertando
            //                    foreach (AccountingActivity _item in _AccountingActivitiesParents.Values)
            //                    {
            //                        //Si es un root, entonces el idparent es null!
            //                        Int64? _idParentActivityItem;
            //                        if (_item.IdParentActivity == 0)
            //                        { _idParentActivityItem = null; }
            //                        else
            //                        { _idParentActivityItem = _item.IdParentActivity; }

            //                        //Arma el filtro(where) para buscar en el DT que si ya fue cargado el registro
            //                        String _filter = "IdActivity=" + _item.IdActivity.ToString();
            //                        if (_idParentActivityItem != null)
            //                        {
            //                            _filter += " And (IdParentActivity=" + _idParentActivityItem.ToString() + " OR IdParentActivity is null)";
            //                        }
            //                        else
            //                        {
            //                            _filter += " And IdParentActivity is null";
            //                        }
            //                        //Filtra sobre el DataTable
            //                        DataRow[] _dataRow = _dt.Select(_filter);
            //                        if (_dataRow.Count() == 0)
            //                        {
            //                            //El registro no existe lo agrega al DataTable.
            //                            _dt.Rows.Add(_item.IdActivity,
            //                            _idParentActivityItem, _item.LanguageOption.Name,
            //                                //null, 
            //                            String.Empty,
            //                                //null, 
            //                            String.Empty,
            //                            0, 0, 0, 0, 0, 0, 0);
            //                        }
            //                    }
            //                }
            //            }
            //        }
            //    }

            //    for (int i = 0; i < _dt.Rows.Count; i++)
            //    {
            //        //Solo calcula los totales, cuando no es una medicion, porque ahi ya esta el resultado...
            //        if (String.IsNullOrEmpty(_dt.Rows[i]["Measurement"].ToString()))
            //        {
            //            Int64 _idActivity = Convert.ToInt64(_dt.Rows[i]["IdActivity"]);
            //            AccountingActivity _accountingActivity = EMSLibrary.User.PerformanceAssessments.Configuration.AccountingActivity(_idActivity);

            //            _dt.Rows[i]["tnCO2e"] = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_tnCO2e, _startDate, _endDate);
            //            _dt.Rows[i]["CO2"] = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_CO2, _startDate, _endDate);
            //            _dt.Rows[i]["CH4"] = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_CH4, _startDate, _endDate);
            //            _dt.Rows[i]["N2O"] = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_N2O, _startDate, _endDate);
            //            _dt.Rows[i]["PFC"] = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_PFC, _startDate, _endDate);
            //            _dt.Rows[i]["HFC"] = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_HFC, _startDate, _endDate);
            //            _dt.Rows[i]["SF6"] = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_SF6, _startDate, _endDate);
            //        }
            //    }


            //    //pongo el total general
            //    if (_dt.Rows.Count > 0)
            //    {
            //        Decimal _total_tnCO2eByActivity = 0;
            //        Decimal _total_CO2ByActivity = 0;
            //        Decimal _total_CH4ByActivity = 0;
            //        Decimal _total_N2OByActivity = 0;
            //        Decimal _total_PFCByActivity = 0;
            //        Decimal _total_HFCByActivity = 0;
            //        Decimal _total_SF6ByActivity = 0;

            //        //Recorre todas las Activities Roots
            //        foreach (AccountingActivity _accountingActivity in EMSLibrary.User.PerformanceAssessments.Configuration.AccountingActivities().Values)
            //        {
            //            _total_tnCO2eByActivity += _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_tnCO2e, _startDate, _endDate);
            //            _total_CO2ByActivity += _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_CO2, _startDate, _endDate);
            //            _total_CH4ByActivity += _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_CH4, _startDate, _endDate);
            //            _total_N2OByActivity += _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_N2O, _startDate, _endDate);
            //            _total_PFCByActivity += _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_PFC, _startDate, _endDate);
            //            _total_HFCByActivity += _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_HFC, _startDate, _endDate);
            //            _total_SF6ByActivity += _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_SF6, _startDate, _endDate);
            //        }

            //        //Inserta el total para cada columna
            //        _dt.Rows.Add(-1,
            //            null, "TOTAL",
            //            //null, 
            //            String.Empty,
            //            //null, 
            //            String.Empty,
            //            _total_tnCO2eByActivity, _total_CO2ByActivity, _total_CH4ByActivity, _total_N2OByActivity, _total_PFCByActivity, _total_HFCByActivity, _total_SF6ByActivity);
            //    }

            //    //Retorna el DataTable
            //    return _dt;
            //}
            //public DataTable ReportTransformationByScopeBKP(Dictionary<String, Object> param)
            //{
            //    //Construye el datatable
            //    DataTable _dt = BuildDataTable("ReportTransformationByScope");

            //    BuildColumReportTransformation(ref _dt);

            //    //Estas son las columnas
            //    //IdActivity    //AccountingActivity
            //    //IdFacility    //Facility
            //    //IdIndicator   //Indicator
            //    //tnCO2e    //CO2   //CH4   //N2O   //PFC   //HFC   //SF6

            //    DateTime? _startDate = null;
            //    DateTime? _endDate = null;
            //    if (param["StartDate"] != null)
            //    { _startDate = Convert.ToDateTime(param["StartDate"]); }
            //    if (param["EndDate"] != null)
            //    { _endDate = Convert.ToDateTime(param["EndDate"]); }

            //    Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
            //    Int64 _idScope = Convert.ToInt64(param["IdScope"]); ;
            //    Int64 _idIndicator_tnCO2e = Convert.ToInt64(param["IdIndicator_tnCO2e"]);
            //    Int64 _idIndicator_CO2 = Convert.ToInt64(param["IdIndicator_CO2"]);
            //    Int64 _idIndicator_CH4 = Convert.ToInt64(param["IdIndicator_CH4"]);
            //    Int64 _idIndicator_N2O = Convert.ToInt64(param["IdIndicator_N2O"]);
            //    Int64 _idIndicator_PFC = Convert.ToInt64(param["IdIndicator_PFC"]);
            //    Int64 _idIndicator_HFC = Convert.ToInt64(param["IdIndicator_HFC"]);
            //    Int64 _idIndicator_SF6 = Convert.ToInt64(param["IdIndicator_SF6"]);

            //    Decimal _result_tnCO2e = 0;
            //    Decimal _result_CO2 = 0;
            //    Decimal _result_CH4 = 0;
            //    Decimal _result_N2O = 0;
            //    Decimal _result_PFC = 0;
            //    Decimal _result_HFC = 0;
            //    Decimal _result_SF6 = 0;
            //    Decimal _sum_tnCO2e = 0;
            //    Decimal _sum_CO2 = 0;
            //    Decimal _sum_CH4 = 0;
            //    Decimal _sum_N2O = 0;
            //    Decimal _sum_PFC = 0;
            //    Decimal _sum_HFC = 0;
            //    Decimal _sum_SF6 = 0;


            //    Indicator _indicator = null;
            //    Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
            //    AccountingScope _accountingScope = EMSLibrary.User.PerformanceAssessments.Configuration.AccountingScope(_idScope);

            //    Indicator _indicator_tnCO2e = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_tnCO2e);
            //    Indicator _indicator_CO2 = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_CO2);
            //    Indicator _indicator_CH4 = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_CH4);
            //    Indicator _indicator_N2O = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_N2O);
            //    Indicator _indicator_PFC = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_PFC);
            //    Indicator _indicator_HFC = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_HFC);
            //    Indicator _indicator_SF6 = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_SF6);

            //    //Construye el dictionary de actividades completas!!!
            //    BuildAllAccountingActivity(EMSLibrary.User.PerformanceAssessments.Configuration.AccountingActivities());

            //    //Indicator _indicator_tnCO2e = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_tnCO2e);

            //    //Recorre todas las Activities
            //    foreach (AccountingActivity _accountingActivity in _AccountingActivities.Values)
            //    {
            //        //Decimal _total_tnCO2eByActivity = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_tnCO2e, _startDate, _endDate);

            //        //Se trae los facilities de la actividad para la organizacion seleccionada
            //        Dictionary<Int64, Facility> _facilities = _accountingActivity.Facilities(_organization);
            //        Int64? _idParentActivity;
            //        if (_accountingActivity.IdParentActivity == 0)
            //        { _idParentActivity = null; }
            //        else
            //        { _idParentActivity = _accountingActivity.IdParentActivity; }

            //        //Recorre todos los facilities
            //        foreach (Facility _facility in _facilities.Values)
            //        {
            //            //Decimal _total_tnCO2eByFacility = _facility.ReadTotalMeasurementResultByIndicator(_accountingScope, _accountingActivity, _indicator_tnCO2e, _startDate, _endDate);

            //            //Se trae las mediciones para cada facility del scope seleccionado
            //            Dictionary<Int64, Measurement> _measurements = _facility.Measurements(_accountingScope, _accountingActivity);

            //            //Recorre las mediciones
            //            foreach (Measurement _measurement in _measurements.Values)
            //            {
            //                //Obtiene el resultado para cada columna
            //                _result_tnCO2e = _measurement.ResultTransformationByIndicator(_indicator_tnCO2e, _startDate, _endDate);
            //                //_result_tnCO2e = 1;
            //                _result_CO2 = _measurement.ResultTransformationByIndicator(_indicator_CO2, _startDate, _endDate);
            //                _result_CH4 = _measurement.ResultTransformationByIndicator(_indicator_CH4, _startDate, _endDate);
            //                _result_N2O = _measurement.ResultTransformationByIndicator(_indicator_N2O, _startDate, _endDate);
            //                _result_PFC = _measurement.ResultTransformationByIndicator(_indicator_PFC, _startDate, _endDate);
            //                _result_HFC = _measurement.ResultTransformationByIndicator(_indicator_HFC, _startDate, _endDate);
            //                _result_SF6 = _measurement.ResultTransformationByIndicator(_indicator_SF6, _startDate, _endDate);

            //                //Inserta la medicion y los valores de su transformacion...
            //                _dt.Rows.Add(_accountingActivity.IdActivity,
            //                    _idParentActivity, _accountingActivity.LanguageOption.Name,
            //                    _facility.IdFacility, _facility.LanguageOption.Name,
            //                    _measurement.IdMeasurement, _measurement.LanguageOption.Name,
            //                    _result_tnCO2e, _result_CO2, _result_CH4, _result_N2O, _result_PFC, _result_HFC, _result_SF6);

            //                //Si no estoy en una actividad root, entonces armo para arriba el arbol
            //                if (_accountingActivity.IdParentActivity != 0)
            //                {
            //                    //Sumo los resultados para acumularlos en los superiores...
            //                    _sum_tnCO2e += _result_tnCO2e;
            //                    _sum_CO2 += _result_CO2;
            //                    _sum_CH4 += _result_CH4;
            //                    _sum_N2O += _result_N2O;
            //                    _sum_PFC += _result_PFC;
            //                    _sum_HFC += _result_HFC;
            //                    _sum_SF6 += _result_SF6;

            //                    //Limpio el dictionary y vuelve a cargar para recorrer...
            //                    _AccountingActivitiesParents = new Dictionary<Int64, AccountingActivity>();
            //                    //Obtiene los padres
            //                    GetParentsAccountingActivity(_accountingActivity);
            //                    //Ahora se cargan en el Tree los padres de item que se esta insertando
            //                    foreach (AccountingActivity _item in _AccountingActivitiesParents.Values)
            //                    {
            //                        //Si es un root, entonces el idparent es null!
            //                        Int64? _idParentActivityItem;
            //                        if (_item.IdParentActivity == 0)
            //                        { _idParentActivityItem = null; }
            //                        else
            //                        { _idParentActivityItem = _item.IdParentActivity; }

            //                        //Arma el filtro(where) para buscar en el DT que si ya fue cargado el registro
            //                        String _filter = "IdActivity=" + _item.IdActivity.ToString();
            //                        if (_idParentActivityItem != null)
            //                        {
            //                            _filter += " And (IdParentActivity=" + _idParentActivityItem.ToString() + " OR IdParentActivity is null)";
            //                        }
            //                        else
            //                        {
            //                            _filter += " And IdParentActivity is null";
            //                        }
            //                        //Filtra sobre el DataTable
            //                        DataRow[] _dataRow = _dt.Select(_filter);
            //                        if (_dataRow.Count() == 0)
            //                        {
            //                            //El registro no existe lo agrega al DataTable.
            //                            _dt.Rows.Add(_item.IdActivity,
            //                            _idParentActivityItem, _item.LanguageOption.Name,
            //                            null, String.Empty, null, String.Empty,
            //                            _sum_tnCO2e, _sum_CO2, _sum_CH4, _sum_N2O, _sum_PFC, _sum_HFC, _sum_SF6);
            //                        }
            //                        else
            //                        {
            //                            //Como ya existe el registro, entonces actualiza la columna.
            //                            for (int i = 0; i < _dataRow.Count(); i++)
            //                            {
            //                                _dataRow[i]["tnCO2e"] = _sum_tnCO2e;
            //                                _dataRow[i]["CO2"] = _sum_CO2;
            //                                _dataRow[i]["CH4"] = _sum_CH4;
            //                                _dataRow[i]["N2O"] = _sum_N2O;
            //                                _dataRow[i]["PFC"] = _sum_PFC;
            //                                _dataRow[i]["HFC"] = _sum_HFC;
            //                                _dataRow[i]["SF6"] = _sum_SF6;
            //                            }
            //                        }
            //                    }
            //                }
            //            }
            //        }
            //    }

            //    //pongo el total general
            //    if (_dt.Rows.Count > 0)
            //    {
            //        //Indicator _indicator_tnCO2e = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_tnCO2e);
            //        //Indicator _indicator_CO2 = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_CO2);
            //        //Indicator _indicator_CH4 = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_CH4);
            //        //Indicator _indicator_N2O = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_N2O);
            //        //Indicator _indicator_PFC = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_PFC);
            //        //Indicator _indicator_HFC = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_HFC);
            //        //Indicator _indicator_SF6 = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_SF6);

            //        Decimal _total_tnCO2eByActivity = 0;
            //        Decimal _total_CO2ByActivity = 0;
            //        Decimal _total_CH4ByActivity = 0;
            //        Decimal _total_N2OByActivity = 0;
            //        Decimal _total_PFCByActivity = 0;
            //        Decimal _total_HFCByActivity = 0;
            //        Decimal _total_SF6ByActivity = 0;

            //        //Recorre todas las Activities
            //        foreach (AccountingActivity _accountingActivity in EMSLibrary.User.PerformanceAssessments.Configuration.AccountingActivities().Values)
            //        {
            //            _total_tnCO2eByActivity += _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_tnCO2e, _startDate, _endDate);
            //            _total_CO2ByActivity += _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_CO2, _startDate, _endDate);
            //            _total_CH4ByActivity += _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_CH4, _startDate, _endDate);
            //            _total_N2OByActivity += _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_N2O, _startDate, _endDate);
            //            _total_PFCByActivity += _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_PFC, _startDate, _endDate);
            //            _total_HFCByActivity += _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_HFC, _startDate, _endDate);
            //            _total_SF6ByActivity += _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_SF6, _startDate, _endDate);
            //        }

            //        //Inserta el total para cada columna
            //        _dt.Rows.Add(-1,
            //            null, "<b>TOTAL</b>",
            //            null, String.Empty,
            //            null, String.Empty,
            //            _total_tnCO2eByActivity, _total_CO2ByActivity, _total_CH4ByActivity, _total_N2OByActivity, _total_PFCByActivity, _total_HFCByActivity, _total_SF6ByActivity);
            //    }

            //    //Retorna el DataTable
            //    return _dt;
                //}

            #region Report Transformation Measurement
                private void BuildColumReportTransformationMeasurement(ref DataTable dt)
                {
                    //Contruye las columnas y sus atributos.
                    ColumnOptions _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = Resources.CommonListManage.Measurement;
                    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = true;
                    _columnOptions.AllowNull = true;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = true;
                    BuildColumnsDataTable(ref dt, Resources.CommonListManage.Measurement, _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "tnCO2e";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "tnCO2e", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "CO2";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "CO2", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "CH4";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "CH4", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "N2O";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "N2O", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "PFC";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "PFC", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "HFC";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "HFC", _columnOptions);

                    _columnOptions = new ColumnOptions();
                    _columnOptions.ColumnCaption = "SF6";
                    _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                    _columnOptions.IsPrimaryKey = false;
                    _columnOptions.DisplayInCombo = false;
                    _columnOptions.DisplayInManage = true;
                    _columnOptions.IsSearchable = false;
                    _columnOptions.AllowNull = false;
                    _columnOptions.IsContextMenuCaption = false;
                    _columnOptions.IsSortedBy = false;
                    BuildColumnsDataTable(ref dt, "SF6", _columnOptions);
                }
                public DataTable ReportTransformationMeasurement(Dictionary<String, Object> param)
                {
                    //Construye el datatable
                    DataTable _dt = BuildDataTable("ReportTransformationMeasurement");

                    BuildColumReportTransformationMeasurement(ref _dt);

                    //Estas son las columnas
                    //Measurement
                    //tnCO2e    //CO2   //CH4   //N2O   //PFC   //HFC   //SF6

                    DateTime? _startDate = null;
                    DateTime? _endDate = null;
                    if (param["StartDate"] != null)
                    { _startDate = Convert.ToDateTime(param["StartDate"]); }
                    if (param["EndDate"] != null)
                    { _endDate = Convert.ToDateTime(param["EndDate"]); }

                    Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
                    Int64 _idScope = Convert.ToInt64(param["IdScope"]); ;
                    Int64 _idIndicator_tnCO2e = Convert.ToInt64(param["IdIndicator_tnCO2e"]);
                    Int64 _idIndicator_CO2 = Convert.ToInt64(param["IdIndicator_CO2"]);
                    Int64 _idIndicator_CH4 = Convert.ToInt64(param["IdIndicator_CH4"]);
                    Int64 _idIndicator_N2O = Convert.ToInt64(param["IdIndicator_N2O"]);
                    Int64 _idIndicator_PFC = Convert.ToInt64(param["IdIndicator_PFC"]);
                    Int64 _idIndicator_HFC = Convert.ToInt64(param["IdIndicator_HFC"]);
                    Int64 _idIndicator_SF6 = Convert.ToInt64(param["IdIndicator_SF6"]);

                    Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
                    AccountingScope _accountingScope = EMSLibrary.User.PerformanceAssessments.Configuration.AccountingScope(_idScope);

                    Indicator _indicator_tnCO2e = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_tnCO2e);
                    Indicator _indicator_CO2 = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_CO2);
                    Indicator _indicator_CH4 = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_CH4);
                    Indicator _indicator_N2O = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_N2O);
                    Indicator _indicator_PFC = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_PFC);
                    Indicator _indicator_HFC = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_HFC);
                    Indicator _indicator_SF6 = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_SF6);

                    Double _result_tnCO2e = 0;
                    Double _result_CO2 = 0;
                    Double _result_CH4 = 0;
                    Double _result_N2O = 0;
                    Double _result_PFC = 0;
                    Double _result_HFC = 0;
                    Double _result_SF6 = 0;

                    //Construye el dictionary de actividades completas!!!
                    BuildAllAccountingActivity(EMSLibrary.User.PerformanceAssessments.Configuration.AccountingActivities());

                    var _activitiesWithFacilities = from aa in _AccountingActivities.Values
                                                    where aa.Facilities(_organization).Count > 0
                                                    orderby aa.LanguageOption.Name ascending
                                                    select aa;
                    //Recorre todas las Activities
                    foreach (AccountingActivity _accountingActivity in _activitiesWithFacilities)
                    {
                        //Se trae los facilities de la actividad para la organizacion seleccionada
                        Dictionary<Int64, Facility> _facilities = _accountingActivity.Facilities(_organization);
                        
                        //Recorre todos los facilities
                        foreach (Facility _facility in _facilities.Values)
                        {
                            //Se trae las mediciones para cada facility del scope seleccionado
                            Dictionary<Int64, Measurement> _measurements = _facility.Measurements(_accountingScope, _accountingActivity);

                            var _lnqMeasurement = from m in _measurements.Values
                                                  orderby m.LanguageOption.Name ascending
                                                  select m;
                            //Recorre las mediciones
                            foreach (Measurement _measurement in _lnqMeasurement)
                            {
                                //Obtiene el resultado para cada columna
                                _result_tnCO2e = _measurement.ResultTransformationByIndicator(_indicator_tnCO2e, _startDate, _endDate);
                                _result_CO2 = _measurement.ResultTransformationByIndicator(_indicator_CO2, _startDate, _endDate);
                                _result_CH4 = _measurement.ResultTransformationByIndicator(_indicator_CH4, _startDate, _endDate);
                                _result_N2O = _measurement.ResultTransformationByIndicator(_indicator_N2O, _startDate, _endDate);
                                _result_PFC = _measurement.ResultTransformationByIndicator(_indicator_PFC, _startDate, _endDate);
                                _result_HFC = _measurement.ResultTransformationByIndicator(_indicator_HFC, _startDate, _endDate);
                                _result_SF6 = _measurement.ResultTransformationByIndicator(_indicator_SF6, _startDate, _endDate);

                                //Inserta la medicion y los valores de su transformacion...
                                _dt.Rows.Add(_measurement.LanguageOption.Name,
                                    _result_tnCO2e, _result_CO2, _result_CH4, _result_N2O, _result_PFC, _result_HFC, _result_SF6);
                            }
                        }
                    }
                    
                    //Retorna el DataTable
                    return _dt;
                }
            #endregion

            private void BuildColumEmissionByFacility(ref DataTable dt)
            {
                //Contruye las columnas y sus atributos.
                ColumnOptions _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = "IdActivity";
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = false;
                _columnOptions.IsSortedBy = false;
                BuildColumnsDataTable(ref dt, "IdActivity", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = "IdFacility";
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = false;
                _columnOptions.IsSortedBy = false;
                BuildColumnsDataTable(ref dt, "IdFacility", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.AccountingActivity;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = false;
                _columnOptions.IsSortedBy = true;
                _columnOptions.SortOrder = Telerik.Web.UI.GridSortOrder.Ascending;
                BuildColumnsDataTable(ref dt, Resources.CommonListManage.AccountingActivity, _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Facility;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = true;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = false;
                _columnOptions.IsSortedBy = true;
                _columnOptions.SortOrder = Telerik.Web.UI.GridSortOrder.Ascending;
                BuildColumnsDataTable(ref dt, Resources.CommonListManage.Facility, _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = "CO<sub>2e</sub> [tn]";
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = false;
                _columnOptions.IsSortedBy = false;
                BuildColumnsDataTable(ref dt, "CO2e", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = "CO<sub>2</sub> [tCO<sub>2e</sub>]";
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = false;
                _columnOptions.IsSortedBy = false;
                BuildColumnsDataTable(ref dt, "CO2", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = "CH<sub>4</sub> [tCO<sub>2e</sub>]";
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = false;
                _columnOptions.IsSortedBy = false;
                BuildColumnsDataTable(ref dt, "CH4", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = "N<sub>2</sub>O [tCO<sub>2e</sub>]";
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = false;
                _columnOptions.IsSortedBy = false;
                BuildColumnsDataTable(ref dt, "N2O", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = "PFC [tCO<sub>2e</sub>]";
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = false;
                _columnOptions.IsSortedBy = false;
                BuildColumnsDataTable(ref dt, "PFC", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = "HFC [tCO<sub>2e</sub>]";
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = false;
                _columnOptions.IsSortedBy = false;
                BuildColumnsDataTable(ref dt, "HFC", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = "SF<sub>6</sub> [tCO<sub>2e</sub>]";
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = false;
                _columnOptions.IsSortedBy = false;
                BuildColumnsDataTable(ref dt, "SF6", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = "HCNM [Mg]";
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = false;
                _columnOptions.IsSortedBy = false;
                BuildColumnsDataTable(ref dt, "HCNM", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = "HCT [Mg]";
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = false;
                _columnOptions.IsSortedBy = false;
                BuildColumnsDataTable(ref dt, "HCT", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = "CO [Mg]";
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = false;
                _columnOptions.IsSortedBy = false;
                BuildColumnsDataTable(ref dt, "CO", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = "NO<sub>x</sub> [Mg]";
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = false;
                _columnOptions.IsSortedBy = false;
                BuildColumnsDataTable(ref dt, "NOx", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = "SO<sub>x</sub> [Mg]";
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = false;
                _columnOptions.IsSortedBy = false;
                BuildColumnsDataTable(ref dt, "SOx", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = "PM [Mg]";
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = false;
                _columnOptions.IsSortedBy = false;
                BuildColumnsDataTable(ref dt, "PM", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = "SO<sub>2</sub> [Mg]";
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = false;
                _columnOptions.IsSortedBy = false;
                BuildColumnsDataTable(ref dt, "SO2", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = "H<sub>2</sub>S [Mg]";
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = false;
                _columnOptions.IsSortedBy = false;
                BuildColumnsDataTable(ref dt, "H2S", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = "PM<sub>10</sub> [Mg]";
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = false;
                _columnOptions.IsSortedBy = false;
                BuildColumnsDataTable(ref dt, "PM10", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = "C<sub>2</sub>H<sub>6</sub> [Mg]";
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = false;
                _columnOptions.IsSortedBy = false;
                BuildColumnsDataTable(ref dt, "C2H6", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = "C<sub>3</sub>H<sub>8</sub> [Mg]";
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = false;
                _columnOptions.IsSortedBy = false;
                BuildColumnsDataTable(ref dt, "C3H8", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = "C<sub>4</sub>H<sub>10</sub> [Mg]";
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = false;
                _columnOptions.IsSortedBy = false;
                BuildColumnsDataTable(ref dt, "C4H10", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.PermissionType;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                BuildColumnsDataTable(ref dt, "PermissionType", _columnOptions);
            }
            public DataTable EmissionByFacility(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable("EmissionByFacility");

                BuildColumEmissionByFacility(ref _dt);

                DateTime _startDate = (DateTime)System.Data.SqlTypes.SqlDateTime.MinValue;
                DateTime _endDate = (DateTime)System.Data.SqlTypes.SqlDateTime.MaxValue;

                Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
                Int64 _idIndicator_tnCO2e = Convert.ToInt64(param["IdIndicator_tnCO2e"]);
                Int64 _idIndicator_CO2 = Convert.ToInt64(param["IdIndicator_CO2"]);
                Int64 _idIndicator_CH4 = Convert.ToInt64(param["IdIndicator_CH4"]);
                Int64 _idIndicator_N2O = Convert.ToInt64(param["IdIndicator_N2O"]);
                Int64 _idIndicator_PFC = Convert.ToInt64(param["IdIndicator_PFC"]);
                Int64 _idIndicator_HFC = Convert.ToInt64(param["IdIndicator_HFC"]);
                Int64 _idIndicator_SF6 = Convert.ToInt64(param["IdIndicator_SF6"]);
                Int64 _idIndicator_HCNM = Convert.ToInt64(param["IdIndicator_HCNM"]);
                Int64 _idIndicator_HCT = Convert.ToInt64(param["IdIndicator_HCT"]);
                Int64 _idIndicator_CO = Convert.ToInt64(param["IdIndicator_CO"]);
                Int64 _idIndicator_NOx = Convert.ToInt64(param["IdIndicator_NOx"]);
                Int64 _idIndicator_SOx = Convert.ToInt64(param["IdIndicator_SOx"]);
                Int64 _idIndicator_PM = Convert.ToInt64(param["IdIndicator_PM"]);
                Int64 _idIndicator_SO2 = Convert.ToInt64(param["IdIndicator_SO2"]);
                Int64 _idIndicator_H2S = Convert.ToInt64(param["IdIndicator_H2S"]);
                Int64 _idIndicator_PM10 = Convert.ToInt64(param["IdIndicator_PM10"]);
                Int64 _idIndicator_C2H6 = Convert.ToInt64(param["IdIndicator_C2H6"]);
                Int64 _idIndicator_C3H8 = Convert.ToInt64(param["IdIndicator_C3H8"]);
                Int64 _idIndicator_C4H10 = Convert.ToInt64(param["IdIndicator_C4H10"]);


                ProcessGroupProcess _process = (ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess);
                _startDate = _process.CurrentCampaignStartDate;

                //Recorro todos los Scope que me devuelve el metodo y los agrega al DT
                foreach (DataRow _item in _process.Report_A_F_by_I_COL(_idIndicator_tnCO2e, _idIndicator_CO2,
                                    _idIndicator_CH4, _idIndicator_N2O, _idIndicator_PFC, _idIndicator_HFC, _idIndicator_SF6, _idIndicator_HCT,
                                    _idIndicator_HCNM, _idIndicator_C2H6, _idIndicator_C3H8, _idIndicator_C4H10, _idIndicator_CO, _idIndicator_NOx,
                                    _idIndicator_SOx, _idIndicator_SO2, _idIndicator_H2S, _idIndicator_PM, _idIndicator_PM10, _startDate, _endDate).Rows)
                {
                    //Inserta el total para cada columna
                    _dt.Rows.Add(_item["IdActivity"],
                        _item["IdFacility"],
                        _item["ActivityName"],
                        _item["FacilityName"],
                        Common.Functions.CustomEMSRound(Convert.ToDouble(_item["Result_tCO2e"])),
                        Common.Functions.CustomEMSRound(Convert.ToDouble(_item["Result_CO2"])),
                        Common.Functions.CustomEMSRound(Convert.ToDouble(_item["Result_CH4"])),
                        Common.Functions.CustomEMSRound(Convert.ToDouble(_item["Result_N2O"])),
                        Common.Functions.CustomEMSRound(Convert.ToDouble(_item["Result_PFC"])),
                        Common.Functions.CustomEMSRound(Convert.ToDouble(_item["Result_HFC"])),
                        Common.Functions.CustomEMSRound(Convert.ToDouble(_item["Result_SF6"])),
                        Common.Functions.CustomEMSRound(Convert.ToDouble(_item["Result_HCNM"])),
                        Common.Functions.CustomEMSRound(Convert.ToDouble(_item["Result_HCT"])),
                        Common.Functions.CustomEMSRound(Convert.ToDouble(_item["Result_CO"])),
                        Common.Functions.CustomEMSRound(Convert.ToDouble(_item["Result_NOx"])),
                        Common.Functions.CustomEMSRound(Convert.ToDouble(_item["Result_SOx"])),
                        Common.Functions.CustomEMSRound(Convert.ToDouble(_item["Result_PM"])),
                        Common.Functions.CustomEMSRound(Convert.ToDouble(_item["Result_SO2"])),
                        Common.Functions.CustomEMSRound(Convert.ToDouble(_item["Result_H2S"])),
                        Common.Functions.CustomEMSRound(Convert.ToDouble(_item["Result_PM10"])),
                        Common.Functions.CustomEMSRound(Convert.ToDouble(_item["Result_C2H6"])),
                        Common.Functions.CustomEMSRound(Convert.ToDouble(_item["Result_C3H8"])),
                        Common.Functions.CustomEMSRound(Convert.ToDouble(_item["Result_C4H10"])),
                        Common.Constants.PermissionViewName);
                }

                return _dt;
            }

            #region Charts

                #region Chart Pie Total Scope by Indicator
                    private void BuildColumChartTotalScopeByIndicator(ref DataTable dt)
                    {
                        //Contruye las columnas y sus atributos.
                        ColumnOptions _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "Name";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "Name", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "Value";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "Value", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "Percentage";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "Percentage", _columnOptions);
                    }
                    public DataTable ChartPieScopeByIndicator(Dictionary<String, Object> param)
                    {
                        //Construye el datatable
                        DataTable _dt = BuildDataTable("ChartPieScopeByIndicator");

                        BuildColumChartTotalScopeByIndicator(ref _dt);

                        DateTime _startDate = (DateTime)System.Data.SqlTypes.SqlDateTime.MinValue;
                        DateTime _endDate = (DateTime)System.Data.SqlTypes.SqlDateTime.MaxValue;

                        if (param["StartDate"] != null)
                        { _startDate = Convert.ToDateTime(param["StartDate"]); }
                        if (param["EndDate"] != null)
                        { _endDate = Convert.ToDateTime(param["EndDate"]); }

                        Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
                        Int64 _idIndicator_tnCO2e = Convert.ToInt64(param["IdIndicator_tnCO2e"]);

                        var _lnqScopeByIndicator = from scopes in ((ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess)).Graphic_Pie.Pie_Scopes(_idIndicator_tnCO2e, _startDate, _endDate)
                                                   orderby scopes.Name ascending
                                                   select scopes;
//                        foreach (Condesus.EMS.Business.RG.IGraphicPie _item in ((ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess)).Graphic_Pie.Pie_Scopes(_idIndicator_tnCO2e, _startDate, _endDate))
                        foreach (Condesus.EMS.Business.RG.IGraphicPie _item in _lnqScopeByIndicator)
                        {
                            //Inserta el total para cada columna
                            _dt.Rows.Add(_item.Name, Common.Functions.CustomEMSRound(_item.Value), _item.Percentage);
                        }

                        return _dt;
                    }
                #endregion

                #region Chart Pie Total Scope by Facility
                    private void BuildColumChartTotalScopeByFacility(ref DataTable dt)
                    {
                        //Contruye las columnas y sus atributos.
                        ColumnOptions _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "Name";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "Name", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "Value";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "Value", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "Percentage";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "Percentage", _columnOptions);
                    }
                    public DataTable ChartPieScopeByFacility(Dictionary<String, Object> param)
                    {
                        //Construye el datatable
                        DataTable _dt = BuildDataTable("ChartPieScopeByFacility");

                        BuildColumChartTotalScopeByFacility(ref _dt);

                        DateTime _startDate = (DateTime)System.Data.SqlTypes.SqlDateTime.MinValue;
                        DateTime _endDate = (DateTime)System.Data.SqlTypes.SqlDateTime.MaxValue;

                        if (param["StartDate"] != null)
                        { _startDate = Convert.ToDateTime(param["StartDate"]); }
                        if (param["EndDate"] != null)
                        { _endDate = Convert.ToDateTime(param["EndDate"]); }

                        Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
                        Int64 _idFacility = Convert.ToInt64(param["IdFacility"]);
                        Int64 _idIndicator_tnCO2e = Convert.ToInt64(param["IdIndicator_tnCO2e"]);

                        //Recorro todos los Scope que me devuelve el metodo y los agrega al DT
                        foreach (Condesus.EMS.Business.RG.IGraphicPie _item in ((ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess)).Graphic_Pie.Pie_ScopesByFacility(_idIndicator_tnCO2e, _idFacility, _startDate, _endDate))
                        {
                            //Inserta el total para cada columna
                            _dt.Rows.Add(_item.Name, Common.Functions.CustomEMSRound(_item.Value), _item.Percentage);
                        }

                        return _dt;
                    }
                #endregion

                #region Chart Bar FacilityType By Scope
                    private void BuildColumChartBarFacilityTypeByScopeGEI(ref DataTable dt)
                    {
                        //Contruye las columnas y sus atributos.
                        ColumnOptions _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "FacilityType";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "FacilityType", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "CO2";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "CO2", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "CH4";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "CH4", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "N2O";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "N2O", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "PFC";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "PFC", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "HFC";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "HFC", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "SF6";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "SF6", _columnOptions);
                    }
                    public DataTable ChartBarFacilityTypeByScopeGEI(Dictionary<String, Object> param)
                    {
                        //Construye el datatable
                        DataTable _dt = BuildDataTable("ChartBarFacilityTypeByScopeGEI");

                        BuildColumChartBarFacilityTypeByScopeGEI(ref _dt);

                        DateTime _startDate = (DateTime)System.Data.SqlTypes.SqlDateTime.MinValue;
                        DateTime _endDate = (DateTime)System.Data.SqlTypes.SqlDateTime.MaxValue;

                        if (param["StartDate"] != null)
                        { _startDate = Convert.ToDateTime(param["StartDate"]); }
                        if (param["EndDate"] != null)
                        { _endDate = Convert.ToDateTime(param["EndDate"]); }

                        Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
                        Int64 _idScope= Convert.ToInt64(param["IdScope"]);
                        Int64 _idIndicator_tnCO2e = Convert.ToInt64(param["IdIndicator_tnCO2e"]);
                        Int64 _idIndicator_CO2 = Convert.ToInt64(param["IdIndicator_CO2"]);
                        Int64 _idIndicator_CH4 = Convert.ToInt64(param["IdIndicator_CH4"]);
                        Int64 _idIndicator_N2O = Convert.ToInt64(param["IdIndicator_N2O"]);
                        Int64 _idIndicator_PFC = Convert.ToInt64(param["IdIndicator_PFC"]);
                        Int64 _idIndicator_HFC = Convert.ToInt64(param["IdIndicator_HFC"]);
                        Int64 _idIndicator_SF6 = Convert.ToInt64(param["IdIndicator_SF6"]);
                        Int64 _idIndicator_HCNM = Convert.ToInt64(param["IdIndicator_HCNM"]);
                        Int64 _idIndicator_HCT = Convert.ToInt64(param["IdIndicator_HCT"]);
                        Int64 _idIndicator_CO = Convert.ToInt64(param["IdIndicator_CO"]);
                        Int64 _idIndicator_NOx = Convert.ToInt64(param["IdIndicator_NOx"]);
                        Int64 _idIndicator_SOx = Convert.ToInt64(param["IdIndicator_SOx"]);
                        Int64 _idIndicator_PM = Convert.ToInt64(param["IdIndicator_PM"]);
                        Int64 _idIndicator_SO2 = Convert.ToInt64(param["IdIndicator_SO2"]);
                        Int64 _idIndicator_H2S = Convert.ToInt64(param["IdIndicator_H2S"]);
                        Int64 _idIndicator_PM10 = Convert.ToInt64(param["IdIndicator_PM10"]);
                        Int64 _idIndicator_C2H6 = Convert.ToInt64(param["IdIndicator_C2H6"]);
                        Int64 _idIndicator_C3H8 = Convert.ToInt64(param["IdIndicator_C3H8"]);
                        Int64 _idIndicator_C4H10 = Convert.ToInt64(param["IdIndicator_C4H10"]);

                        //Recorro todos los Scope que me devuelve el metodo y los agrega al DT
                        foreach (Condesus.EMS.Business.RG.IGraphicBar _item in ((ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess)).Graphic_Bar.Bar_FacilityTypeByScope(_idScope, _idIndicator_tnCO2e, _idIndicator_CO2,
                                            _idIndicator_CH4, _idIndicator_N2O, _idIndicator_PFC, _idIndicator_HFC, _idIndicator_SF6, _idIndicator_HCT,
                                            _idIndicator_HCNM, _idIndicator_C2H6, _idIndicator_C3H8, _idIndicator_C4H10, _idIndicator_CO, _idIndicator_NOx,
                                            _idIndicator_SOx, _idIndicator_SO2, _idIndicator_H2S, _idIndicator_PM, _idIndicator_PM10, _startDate, _endDate))
                        {
                            //Inserta el total para cada columna
                            _dt.Rows.Add(_item.Name, 
                                _item.Result_CO2,
                                _item.Result_CH4,
                                _item.Result_N2O,
                                _item.Result_PFC,
                                _item.Result_HFC,
                                _item.Result_SF6);
                        }

                        return _dt;
                    }

                    private void BuildColumChartBarFacilityTypeByScopeCL(ref DataTable dt)
                    {
                        //Contruye las columnas y sus atributos.
                        ColumnOptions _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "FacilityType";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "FacilityType", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "HCNM";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "HCNM", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "HCT";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "HCT", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "CO";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "CO", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "NOx";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "NOx", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "SOx";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "SOx", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "PM";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "PM", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "SO2";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "SO2", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "H2S";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "H2S", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "PM10";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "PM10", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "C2H6";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "C2H6", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "C3H8";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "C3H8", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "C4H10";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "C4H10", _columnOptions);
                    }
                    public DataTable ChartBarFacilityTypeByScopeCL(Dictionary<String, Object> param)
                    {
                        //Construye el datatable
                        DataTable _dt = BuildDataTable("ChartBarFacilityTypeByScopeCL");

                        BuildColumChartBarFacilityTypeByScopeCL(ref _dt);

                        DateTime _startDate = (DateTime)System.Data.SqlTypes.SqlDateTime.MinValue;
                        DateTime _endDate = (DateTime)System.Data.SqlTypes.SqlDateTime.MaxValue;

                        if (param["StartDate"] != null)
                        { _startDate = Convert.ToDateTime(param["StartDate"]); }
                        if (param["EndDate"] != null)
                        { _endDate = Convert.ToDateTime(param["EndDate"]); }

                        Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
                        Int64 _idScope = Convert.ToInt64(param["IdScope"]);
                        Int64 _idIndicator_tnCO2e = Convert.ToInt64(param["IdIndicator_tnCO2e"]);
                        Int64 _idIndicator_CO2 = Convert.ToInt64(param["IdIndicator_CO2"]);
                        Int64 _idIndicator_CH4 = Convert.ToInt64(param["IdIndicator_CH4"]);
                        Int64 _idIndicator_N2O = Convert.ToInt64(param["IdIndicator_N2O"]);
                        Int64 _idIndicator_PFC = Convert.ToInt64(param["IdIndicator_PFC"]);
                        Int64 _idIndicator_HFC = Convert.ToInt64(param["IdIndicator_HFC"]);
                        Int64 _idIndicator_SF6 = Convert.ToInt64(param["IdIndicator_SF6"]);
                        Int64 _idIndicator_HCNM = Convert.ToInt64(param["IdIndicator_HCNM"]);
                        Int64 _idIndicator_HCT = Convert.ToInt64(param["IdIndicator_HCT"]);
                        Int64 _idIndicator_CO = Convert.ToInt64(param["IdIndicator_CO"]);
                        Int64 _idIndicator_NOx = Convert.ToInt64(param["IdIndicator_NOx"]);
                        Int64 _idIndicator_SOx = Convert.ToInt64(param["IdIndicator_SOx"]);
                        Int64 _idIndicator_PM = Convert.ToInt64(param["IdIndicator_PM"]);
                        Int64 _idIndicator_SO2 = Convert.ToInt64(param["IdIndicator_SO2"]);
                        Int64 _idIndicator_H2S = Convert.ToInt64(param["IdIndicator_H2S"]);
                        Int64 _idIndicator_PM10 = Convert.ToInt64(param["IdIndicator_PM10"]);
                        Int64 _idIndicator_C2H6 = Convert.ToInt64(param["IdIndicator_C2H6"]);
                        Int64 _idIndicator_C3H8 = Convert.ToInt64(param["IdIndicator_C3H8"]);
                        Int64 _idIndicator_C4H10 = Convert.ToInt64(param["IdIndicator_C4H10"]);

                        //Recorro todos los Scope que me devuelve el metodo y los agrega al DT
                        foreach (Condesus.EMS.Business.RG.IGraphicBar _item in ((ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess)).Graphic_Bar.Bar_FacilityTypeByScope(_idScope, _idIndicator_tnCO2e, _idIndicator_CO2,
                                            _idIndicator_CH4, _idIndicator_N2O, _idIndicator_PFC, _idIndicator_HFC, _idIndicator_SF6, _idIndicator_HCT,
                                            _idIndicator_HCNM, _idIndicator_C2H6, _idIndicator_C3H8, _idIndicator_C4H10, _idIndicator_CO, _idIndicator_NOx,
                                            _idIndicator_SOx, _idIndicator_SO2, _idIndicator_H2S, _idIndicator_PM, _idIndicator_PM10, _startDate, _endDate))
                        {
                            //Inserta el total para cada columna
                            _dt.Rows.Add(_item.Name,
                                _item.Result_HCNM,
                                _item.Result_HCT,
                                _item.Result_CO,
                                _item.Result_NOx,
                                _item.Result_SOx,
                                _item.Result_PM,
                                _item.Result_SO2,
                                _item.Result_H2S,
                                _item.Result_PM10,
                                _item.Result_C2H6,
                                _item.Result_C3H8,
                                _item.Result_C4H10);
                        }

                        return _dt;
                    }
                #endregion

                #region Chart Bar Activity By Scope
                    private void BuildColumChartBarActivityByScopeGEI(ref DataTable dt)
                    {
                        //Contruye las columnas y sus atributos.
                        ColumnOptions _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "Activity";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "Activity", _columnOptions);

                        //_columnOptions = new ColumnOptions();
                        //_columnOptions.ColumnCaption = "tCO2e";
                        //_columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        //_columnOptions.IsPrimaryKey = false;
                        //_columnOptions.DisplayInCombo = false;
                        //_columnOptions.DisplayInManage = true;
                        //_columnOptions.IsSearchable = false;
                        //_columnOptions.AllowNull = false;
                        //_columnOptions.IsContextMenuCaption = false;
                        //_columnOptions.IsSortedBy = false;
                        //BuildColumnsDataTable(ref dt, "tCO2e", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "CO2";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "CO2", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "CH4";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "CH4", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "N2O";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "N2O", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "PFC";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "PFC", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "HFC";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "HFC", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "SF6";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "SF6", _columnOptions);
                    }
                    public DataTable ChartBarActivityByScopeGEI(Dictionary<String, Object> param)
                    {
                        //Construye el datatable
                        DataTable _dt = BuildDataTable("ChartBarActivityByScopeGEI");

                        BuildColumChartBarActivityByScopeGEI(ref _dt);

                        DateTime _startDate = (DateTime)System.Data.SqlTypes.SqlDateTime.MinValue;
                        DateTime _endDate = (DateTime)System.Data.SqlTypes.SqlDateTime.MaxValue;

                        if (param["StartDate"] != null)
                        { _startDate = Convert.ToDateTime(param["StartDate"]); }
                        if (param["EndDate"] != null)
                        { _endDate = Convert.ToDateTime(param["EndDate"]); }

                        Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
                        Int64 _idScope = Convert.ToInt64(param["IdScope"]);
                        Int64 _idIndicator_tnCO2e = Convert.ToInt64(param["IdIndicator_tnCO2e"]);
                        Int64 _idIndicator_CO2 = Convert.ToInt64(param["IdIndicator_CO2"]);
                        Int64 _idIndicator_CH4 = Convert.ToInt64(param["IdIndicator_CH4"]);
                        Int64 _idIndicator_N2O = Convert.ToInt64(param["IdIndicator_N2O"]);
                        Int64 _idIndicator_PFC = Convert.ToInt64(param["IdIndicator_PFC"]);
                        Int64 _idIndicator_HFC = Convert.ToInt64(param["IdIndicator_HFC"]);
                        Int64 _idIndicator_SF6 = Convert.ToInt64(param["IdIndicator_SF6"]);
                        Int64 _idIndicator_HCNM = Convert.ToInt64(param["IdIndicator_HCNM"]);
                        Int64 _idIndicator_HCT = Convert.ToInt64(param["IdIndicator_HCT"]);
                        Int64 _idIndicator_CO = Convert.ToInt64(param["IdIndicator_CO"]);
                        Int64 _idIndicator_NOx = Convert.ToInt64(param["IdIndicator_NOx"]);
                        Int64 _idIndicator_SOx = Convert.ToInt64(param["IdIndicator_SOx"]);
                        Int64 _idIndicator_PM = Convert.ToInt64(param["IdIndicator_PM"]);
                        Int64 _idIndicator_SO2 = Convert.ToInt64(param["IdIndicator_SO2"]);
                        Int64 _idIndicator_H2S = Convert.ToInt64(param["IdIndicator_H2S"]);
                        Int64 _idIndicator_PM10 = Convert.ToInt64(param["IdIndicator_PM10"]);
                        Int64 _idIndicator_C2H6 = Convert.ToInt64(param["IdIndicator_C2H6"]);
                        Int64 _idIndicator_C3H8 = Convert.ToInt64(param["IdIndicator_C3H8"]);
                        Int64 _idIndicator_C4H10 = Convert.ToInt64(param["IdIndicator_C4H10"]);

                        //Recorro todos los Scope que me devuelve el metodo y los agrega al DT
                        foreach (Condesus.EMS.Business.RG.IGraphicBar _item in ((ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess)).Graphic_Bar.Bar_ActivityByScope(_idScope, _idIndicator_tnCO2e, _idIndicator_CO2,
                                            _idIndicator_CH4, _idIndicator_N2O, _idIndicator_PFC, _idIndicator_HFC, _idIndicator_SF6, _idIndicator_HCT,
                                            _idIndicator_HCNM, _idIndicator_C2H6, _idIndicator_C3H8, _idIndicator_C4H10, _idIndicator_CO, _idIndicator_NOx,
                                            _idIndicator_SOx, _idIndicator_SO2, _idIndicator_H2S, _idIndicator_PM, _idIndicator_PM10, _startDate, _endDate))
                        {
                            AccountingActivity _activity = EMSLibrary.User.PerformanceAssessments.Configuration.AccountingActivity(_item.Id);
                            String _activityName = String.Empty;
                            if (_activity.Parent != null)
                            {
                                _activityName = _activity.Parent.LanguageOption.Name + " - " + _item.Name;
                            }
                            else
                            {
                                _activityName = _item.Name;
                            }
                            //Inserta el total para cada columna
                            _dt.Rows.Add(_activityName,
                                //_item.Result_tCO2e,
                                _item.Result_CO2,
                                _item.Result_CH4,
                                _item.Result_N2O,
                                _item.Result_PFC,
                                _item.Result_HFC,
                                _item.Result_SF6);
                        }

                        return _dt;
                    }

                    private void BuildColumChartBarActivityByScopeCL(ref DataTable dt)
                    {
                        //Contruye las columnas y sus atributos.
                        ColumnOptions _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "Activity";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "Activity", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "HCNM";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "HCNM", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "HCT";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "HCT", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "CO";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "CO", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "NOx";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "NOx", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "SOx";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "SOx", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "PM";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "PM", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "SO2";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "SO2", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "H2S";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "H2S", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "PM10";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "PM10", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "C2H6";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "C2H6", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "C3H8";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "C3H8", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "C4H10";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "C4H10", _columnOptions);
                    }
                    public DataTable ChartBarActivityByScopeCL(Dictionary<String, Object> param)
                    {
                        //Construye el datatable
                        DataTable _dt = BuildDataTable("ChartBarActivityByScopeCL");

                        BuildColumChartBarActivityByScopeCL(ref _dt);

                        DateTime _startDate = (DateTime)System.Data.SqlTypes.SqlDateTime.MinValue;
                        DateTime _endDate = (DateTime)System.Data.SqlTypes.SqlDateTime.MaxValue;

                        if (param["StartDate"] != null)
                        { _startDate = Convert.ToDateTime(param["StartDate"]); }
                        if (param["EndDate"] != null)
                        { _endDate = Convert.ToDateTime(param["EndDate"]); }

                        Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
                        Int64 _idScope = Convert.ToInt64(param["IdScope"]);
                        Int64 _idIndicator_tnCO2e = Convert.ToInt64(param["IdIndicator_tnCO2e"]);
                        Int64 _idIndicator_CO2 = Convert.ToInt64(param["IdIndicator_CO2"]);
                        Int64 _idIndicator_CH4 = Convert.ToInt64(param["IdIndicator_CH4"]);
                        Int64 _idIndicator_N2O = Convert.ToInt64(param["IdIndicator_N2O"]);
                        Int64 _idIndicator_PFC = Convert.ToInt64(param["IdIndicator_PFC"]);
                        Int64 _idIndicator_HFC = Convert.ToInt64(param["IdIndicator_HFC"]);
                        Int64 _idIndicator_SF6 = Convert.ToInt64(param["IdIndicator_SF6"]);
                        Int64 _idIndicator_HCNM = Convert.ToInt64(param["IdIndicator_HCNM"]);
                        Int64 _idIndicator_HCT = Convert.ToInt64(param["IdIndicator_HCT"]);
                        Int64 _idIndicator_CO = Convert.ToInt64(param["IdIndicator_CO"]);
                        Int64 _idIndicator_NOx = Convert.ToInt64(param["IdIndicator_NOx"]);
                        Int64 _idIndicator_SOx = Convert.ToInt64(param["IdIndicator_SOx"]);
                        Int64 _idIndicator_PM = Convert.ToInt64(param["IdIndicator_PM"]);
                        Int64 _idIndicator_SO2 = Convert.ToInt64(param["IdIndicator_SO2"]);
                        Int64 _idIndicator_H2S = Convert.ToInt64(param["IdIndicator_H2S"]);
                        Int64 _idIndicator_PM10 = Convert.ToInt64(param["IdIndicator_PM10"]);
                        Int64 _idIndicator_C2H6 = Convert.ToInt64(param["IdIndicator_C2H6"]);
                        Int64 _idIndicator_C3H8 = Convert.ToInt64(param["IdIndicator_C3H8"]);
                        Int64 _idIndicator_C4H10 = Convert.ToInt64(param["IdIndicator_C4H10"]);

                        //Recorro todos los Scope que me devuelve el metodo y los agrega al DT
                        foreach (Condesus.EMS.Business.RG.IGraphicBar _item in ((ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess)).Graphic_Bar.Bar_ActivityByScope(_idScope, _idIndicator_tnCO2e, _idIndicator_CO2,
                                            _idIndicator_CH4, _idIndicator_N2O, _idIndicator_PFC, _idIndicator_HFC, _idIndicator_SF6, _idIndicator_HCT,
                                            _idIndicator_HCNM, _idIndicator_C2H6, _idIndicator_C3H8, _idIndicator_C4H10, _idIndicator_CO, _idIndicator_NOx,
                                            _idIndicator_SOx, _idIndicator_SO2, _idIndicator_H2S, _idIndicator_PM, _idIndicator_PM10, _startDate, _endDate))
                        {
                            AccountingActivity _activity = EMSLibrary.User.PerformanceAssessments.Configuration.AccountingActivity(_item.Id);
                            String _activityName = String.Empty;
                            if (_activity.Parent != null)
                            {
                                _activityName = _activity.Parent.LanguageOption.Name + " - " + _item.Name;
                            }
                            else
                            {
                                _activityName = _item.Name;
                            }
                            //Inserta el total para cada columna
                            _dt.Rows.Add(_activityName,
                                _item.Result_HCNM,
                                _item.Result_HCT,
                                _item.Result_CO,
                                _item.Result_NOx,
                                _item.Result_SOx,
                                _item.Result_PM,
                                _item.Result_SO2,
                                _item.Result_H2S,
                                _item.Result_PM10,
                                _item.Result_C2H6,
                                _item.Result_C3H8,
                                _item.Result_C4H10);
                        }

                        return _dt;
                    }
                #endregion

                #region Chart Bar State By Scope
                    private void BuildColumChartBarStateByScopeGEI(ref DataTable dt)
                    {
                        //Contruye las columnas y sus atributos.
                        ColumnOptions _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "State";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "State", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "CO2";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "CO2", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "CH4";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "CH4", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "N2O";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "N2O", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "PFC";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "PFC", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "HFC";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "HFC", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "SF6";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "SF6", _columnOptions);
                    }
                    public DataTable ChartBarStateByScopeGEI(Dictionary<String, Object> param)
                    {
                        //Construye el datatable
                        DataTable _dt = BuildDataTable("ChartBarStateByScopeGEI");

                        BuildColumChartBarStateByScopeGEI(ref _dt);

                        DateTime _startDate = (DateTime)System.Data.SqlTypes.SqlDateTime.MinValue;
                        DateTime _endDate = (DateTime)System.Data.SqlTypes.SqlDateTime.MaxValue;

                        if (param["StartDate"] != null)
                        { _startDate = Convert.ToDateTime(param["StartDate"]); }
                        if (param["EndDate"] != null)
                        { _endDate = Convert.ToDateTime(param["EndDate"]); }

                        Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
                        Int64 _idScope = Convert.ToInt64(param["IdScope"]);

                        List<Int64> _states = new List<Int64>();
                        String[] _buff = param["States"].ToString().Split(',');
                        for (int i = 0; i < _buff.Length; i++)
                        {
                            _states.Add(Convert.ToInt64(_buff[i]));
                        }

                        Int64 _idIndicator_tnCO2e = Convert.ToInt64(param["IdIndicator_tnCO2e"]);
                        Int64 _idIndicator_CO2 = Convert.ToInt64(param["IdIndicator_CO2"]);
                        Int64 _idIndicator_CH4 = Convert.ToInt64(param["IdIndicator_CH4"]);
                        Int64 _idIndicator_N2O = Convert.ToInt64(param["IdIndicator_N2O"]);
                        Int64 _idIndicator_PFC = Convert.ToInt64(param["IdIndicator_PFC"]);
                        Int64 _idIndicator_HFC = Convert.ToInt64(param["IdIndicator_HFC"]);
                        Int64 _idIndicator_SF6 = Convert.ToInt64(param["IdIndicator_SF6"]);
                        Int64 _idIndicator_HCNM = Convert.ToInt64(param["IdIndicator_HCNM"]);
                        Int64 _idIndicator_HCT = Convert.ToInt64(param["IdIndicator_HCT"]);
                        Int64 _idIndicator_CO = Convert.ToInt64(param["IdIndicator_CO"]);
                        Int64 _idIndicator_NOx = Convert.ToInt64(param["IdIndicator_NOx"]);
                        Int64 _idIndicator_SOx = Convert.ToInt64(param["IdIndicator_SOx"]);
                        Int64 _idIndicator_PM = Convert.ToInt64(param["IdIndicator_PM"]);
                        Int64 _idIndicator_SO2 = Convert.ToInt64(param["IdIndicator_SO2"]);
                        Int64 _idIndicator_H2S = Convert.ToInt64(param["IdIndicator_H2S"]);
                        Int64 _idIndicator_PM10 = Convert.ToInt64(param["IdIndicator_PM10"]);
                        Int64 _idIndicator_C2H6 = Convert.ToInt64(param["IdIndicator_C2H6"]);
                        Int64 _idIndicator_C3H8 = Convert.ToInt64(param["IdIndicator_C3H8"]);
                        Int64 _idIndicator_C4H10 = Convert.ToInt64(param["IdIndicator_C4H10"]);

                        //Recorro todos los Scope que me devuelve el metodo y los agrega al DT
                        foreach (Condesus.EMS.Business.RG.IGraphicBar _item in ((ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess)).Graphic_Bar.Bar_TotalGasesState_by_Scope(_states, _idScope, _idIndicator_tnCO2e, _idIndicator_CO2,
                                            _idIndicator_CH4, _idIndicator_N2O, _idIndicator_PFC, _idIndicator_HFC, _idIndicator_SF6, _idIndicator_HCT,
                                            _idIndicator_HCNM, _idIndicator_C2H6, _idIndicator_C3H8, _idIndicator_C4H10, _idIndicator_CO, _idIndicator_NOx,
                                            _idIndicator_SOx, _idIndicator_SO2, _idIndicator_H2S, _idIndicator_PM, _idIndicator_PM10, _startDate, _endDate))
                        {
                            //Inserta el total para cada columna
                            _dt.Rows.Add(_item.Name,
                                _item.Result_CO2,
                                _item.Result_CH4,
                                _item.Result_N2O,
                                _item.Result_PFC,
                                _item.Result_HFC,
                                _item.Result_SF6);
                        }

                        return _dt;
                    }

                    private void BuildColumChartBarStateByScopeCL(ref DataTable dt)
                    {
                        //Contruye las columnas y sus atributos.
                        ColumnOptions _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "State";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "State", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "HCNM";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "HCNM", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "HCT";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "HCT", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "CO";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "CO", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "NOx";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "NOx", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "SOx";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "SOx", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "PM";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "PM", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "SO2";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "SO2", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "H2S";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "H2S", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "PM10";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "PM10", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "C2H6";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "C2H6", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "C3H8";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "C3H8", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "C4H10";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "C4H10", _columnOptions);
                    }
                    public DataTable ChartBarStateByScopeCL(Dictionary<String, Object> param)
                    {
                        //Construye el datatable
                        DataTable _dt = BuildDataTable("ChartBarStateByScopeCL");

                        BuildColumChartBarStateByScopeCL(ref _dt);

                        DateTime _startDate = (DateTime)System.Data.SqlTypes.SqlDateTime.MinValue;
                        DateTime _endDate = (DateTime)System.Data.SqlTypes.SqlDateTime.MaxValue;

                        if (param["StartDate"] != null)
                        { _startDate = Convert.ToDateTime(param["StartDate"]); }
                        if (param["EndDate"] != null)
                        { _endDate = Convert.ToDateTime(param["EndDate"]); }

                        Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
                        Int64 _idScope = Convert.ToInt64(param["IdScope"]);

                        List<Int64> _states = new List<Int64>();
                        String[] _buff = param["States"].ToString().Split(',');
                        for (int i = 0; i < _buff.Length; i++)
                        {
                            _states.Add(Convert.ToInt64(_buff[i]));
                        }

                        Int64 _idIndicator_tnCO2e = Convert.ToInt64(param["IdIndicator_tnCO2e"]);
                        Int64 _idIndicator_CO2 = Convert.ToInt64(param["IdIndicator_CO2"]);
                        Int64 _idIndicator_CH4 = Convert.ToInt64(param["IdIndicator_CH4"]);
                        Int64 _idIndicator_N2O = Convert.ToInt64(param["IdIndicator_N2O"]);
                        Int64 _idIndicator_PFC = Convert.ToInt64(param["IdIndicator_PFC"]);
                        Int64 _idIndicator_HFC = Convert.ToInt64(param["IdIndicator_HFC"]);
                        Int64 _idIndicator_SF6 = Convert.ToInt64(param["IdIndicator_SF6"]);
                        Int64 _idIndicator_HCNM = Convert.ToInt64(param["IdIndicator_HCNM"]);
                        Int64 _idIndicator_HCT = Convert.ToInt64(param["IdIndicator_HCT"]);
                        Int64 _idIndicator_CO = Convert.ToInt64(param["IdIndicator_CO"]);
                        Int64 _idIndicator_NOx = Convert.ToInt64(param["IdIndicator_NOx"]);
                        Int64 _idIndicator_SOx = Convert.ToInt64(param["IdIndicator_SOx"]);
                        Int64 _idIndicator_PM = Convert.ToInt64(param["IdIndicator_PM"]);
                        Int64 _idIndicator_SO2 = Convert.ToInt64(param["IdIndicator_SO2"]);
                        Int64 _idIndicator_H2S = Convert.ToInt64(param["IdIndicator_H2S"]);
                        Int64 _idIndicator_PM10 = Convert.ToInt64(param["IdIndicator_PM10"]);
                        Int64 _idIndicator_C2H6 = Convert.ToInt64(param["IdIndicator_C2H6"]);
                        Int64 _idIndicator_C3H8 = Convert.ToInt64(param["IdIndicator_C3H8"]);
                        Int64 _idIndicator_C4H10 = Convert.ToInt64(param["IdIndicator_C4H10"]);

                        //Recorro todos los Scope que me devuelve el metodo y los agrega al DT
                        foreach (Condesus.EMS.Business.RG.IGraphicBar _item in ((ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess)).Graphic_Bar.Bar_TotalGasesState_by_Scope(_states, _idScope, _idIndicator_tnCO2e, _idIndicator_CO2,
                                            _idIndicator_CH4, _idIndicator_N2O, _idIndicator_PFC, _idIndicator_HFC, _idIndicator_SF6, _idIndicator_HCT,
                                            _idIndicator_HCNM, _idIndicator_C2H6, _idIndicator_C3H8, _idIndicator_C4H10, _idIndicator_CO, _idIndicator_NOx,
                                            _idIndicator_SOx, _idIndicator_SO2, _idIndicator_H2S, _idIndicator_PM, _idIndicator_PM10, _startDate, _endDate))
                        {
                            //Inserta el total para cada columna
                            _dt.Rows.Add(_item.Name,
                                _item.Result_HCNM,
                                _item.Result_HCT,
                                _item.Result_CO,
                                _item.Result_NOx,
                                _item.Result_SOx,
                                _item.Result_PM,
                                _item.Result_SO2,
                                _item.Result_H2S,
                                _item.Result_PM10,
                                _item.Result_C2H6,
                                _item.Result_C3H8,
                                _item.Result_C4H10);
                        }

                        return _dt;
                    }
                #endregion

                #region Chart Bar Activity By Scope And Facility
                    private void BuildColumChartBarActivityByScopeAndFacilityGEI(ref DataTable dt)
                    {
                        //Contruye las columnas y sus atributos.
                        ColumnOptions _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "Activity";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "Activity", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "CO2";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "CO2", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "CH4";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "CH4", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "N2O";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "N2O", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "PFC";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "PFC", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "HFC";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "HFC", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "SF6";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "SF6", _columnOptions);
                    }
                    public DataTable ChartBarActivityByScopeAndFacilityGEI(Dictionary<String, Object> param)
                    {
                        //Construye el datatable
                        DataTable _dt = BuildDataTable("ChartBarActivityByScopeAndFacilityGEI");

                        BuildColumChartBarActivityByScopeAndFacilityGEI(ref _dt);

                        DateTime _startDate = (DateTime)System.Data.SqlTypes.SqlDateTime.MinValue;
                        DateTime _endDate = (DateTime)System.Data.SqlTypes.SqlDateTime.MaxValue;

                        if (param["StartDate"] != null)
                        { _startDate = Convert.ToDateTime(param["StartDate"]); }
                        if (param["EndDate"] != null)
                        { _endDate = Convert.ToDateTime(param["EndDate"]); }

                        Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
                        Int64 _idScope = Convert.ToInt64(param["IdScope"]);
                        Int64 _idFacility = Convert.ToInt64(param["IdFacility"]);
                        Int64 _idIndicator_tnCO2e = Convert.ToInt64(param["IdIndicator_tnCO2e"]);
                        Int64 _idIndicator_CO2 = Convert.ToInt64(param["IdIndicator_CO2"]);
                        Int64 _idIndicator_CH4 = Convert.ToInt64(param["IdIndicator_CH4"]);
                        Int64 _idIndicator_N2O = Convert.ToInt64(param["IdIndicator_N2O"]);
                        Int64 _idIndicator_PFC = Convert.ToInt64(param["IdIndicator_PFC"]);
                        Int64 _idIndicator_HFC = Convert.ToInt64(param["IdIndicator_HFC"]);
                        Int64 _idIndicator_SF6 = Convert.ToInt64(param["IdIndicator_SF6"]);
                        Int64 _idIndicator_HCNM = Convert.ToInt64(param["IdIndicator_HCNM"]);
                        Int64 _idIndicator_HCT = Convert.ToInt64(param["IdIndicator_HCT"]);
                        Int64 _idIndicator_CO = Convert.ToInt64(param["IdIndicator_CO"]);
                        Int64 _idIndicator_NOx = Convert.ToInt64(param["IdIndicator_NOx"]);
                        Int64 _idIndicator_SOx = Convert.ToInt64(param["IdIndicator_SOx"]);
                        Int64 _idIndicator_PM = Convert.ToInt64(param["IdIndicator_PM"]);
                        Int64 _idIndicator_SO2 = Convert.ToInt64(param["IdIndicator_SO2"]);
                        Int64 _idIndicator_H2S = Convert.ToInt64(param["IdIndicator_H2S"]);
                        Int64 _idIndicator_PM10 = Convert.ToInt64(param["IdIndicator_PM10"]);
                        Int64 _idIndicator_C2H6 = Convert.ToInt64(param["IdIndicator_C2H6"]);
                        Int64 _idIndicator_C3H8 = Convert.ToInt64(param["IdIndicator_C3H8"]);
                        Int64 _idIndicator_C4H10 = Convert.ToInt64(param["IdIndicator_C4H10"]);

                        //Recorro todos los Scope que me devuelve el metodo y los agrega al DT
                        foreach (Condesus.EMS.Business.RG.IGraphicBar _item in ((ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess)).Graphic_Bar.Bar_ActivityByScopeAndFacility(_idScope, _idFacility, _idIndicator_tnCO2e, _idIndicator_CO2,
                                            _idIndicator_CH4, _idIndicator_N2O, _idIndicator_PFC, _idIndicator_HFC, _idIndicator_SF6, _idIndicator_HCT,
                                            _idIndicator_HCNM, _idIndicator_C2H6, _idIndicator_C3H8, _idIndicator_C4H10, _idIndicator_CO, _idIndicator_NOx,
                                            _idIndicator_SOx, _idIndicator_SO2, _idIndicator_H2S, _idIndicator_PM, _idIndicator_PM10, _startDate, _endDate))
                        {
                            AccountingActivity _activity = EMSLibrary.User.PerformanceAssessments.Configuration.AccountingActivity(_item.Id);
                            String _activityName = String.Empty;
                            if (_activity.Parent != null)
                            {
                                _activityName = _activity.Parent.LanguageOption.Name + " - " + _item.Name;
                            }
                            else
                            {
                                _activityName = _item.Name;
                            }

                            //Inserta el total para cada columna
                            _dt.Rows.Add(_activityName,
                                _item.Result_CO2,
                                _item.Result_CH4,
                                _item.Result_N2O,
                                _item.Result_PFC,
                                _item.Result_HFC,
                                _item.Result_SF6);
                        }

                        return _dt;
                    }

                    private void BuildColumChartBarActivityByScopeAndFacilityCL(ref DataTable dt)
                    {
                        //Contruye las columnas y sus atributos.
                        ColumnOptions _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "Activity";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "Activity", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "HCNM";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "HCNM", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "HCT";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "HCT", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "CO";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "CO", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "NOx";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "NOx", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "SOx";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "SOx", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "PM";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "PM", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "SO2";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "SO2", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "H2S";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "H2S", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "PM10";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "PM10", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "C2H6";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "C2H6", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "C3H8";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "C3H8", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "C4H10";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "C4H10", _columnOptions);
                    }
                    public DataTable ChartBarActivityByScopeAndFacilityCL(Dictionary<String, Object> param)
                    {
                        //Construye el datatable
                        DataTable _dt = BuildDataTable("ChartBarActivityByScopeAndFacilityCL");

                        BuildColumChartBarActivityByScopeAndFacilityCL(ref _dt);

                        DateTime _startDate = (DateTime)System.Data.SqlTypes.SqlDateTime.MinValue;
                        DateTime _endDate = (DateTime)System.Data.SqlTypes.SqlDateTime.MaxValue;

                        if (param["StartDate"] != null)
                        { _startDate = Convert.ToDateTime(param["StartDate"]); }
                        if (param["EndDate"] != null)
                        { _endDate = Convert.ToDateTime(param["EndDate"]); }

                        Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
                        Int64 _idScope = Convert.ToInt64(param["IdScope"]);
                        Int64 _idFacility = Convert.ToInt64(param["IdFacility"]);
                        Int64 _idIndicator_tnCO2e = Convert.ToInt64(param["IdIndicator_tnCO2e"]);
                        Int64 _idIndicator_CO2 = Convert.ToInt64(param["IdIndicator_CO2"]);
                        Int64 _idIndicator_CH4 = Convert.ToInt64(param["IdIndicator_CH4"]);
                        Int64 _idIndicator_N2O = Convert.ToInt64(param["IdIndicator_N2O"]);
                        Int64 _idIndicator_PFC = Convert.ToInt64(param["IdIndicator_PFC"]);
                        Int64 _idIndicator_HFC = Convert.ToInt64(param["IdIndicator_HFC"]);
                        Int64 _idIndicator_SF6 = Convert.ToInt64(param["IdIndicator_SF6"]);
                        Int64 _idIndicator_HCNM = Convert.ToInt64(param["IdIndicator_HCNM"]);
                        Int64 _idIndicator_HCT = Convert.ToInt64(param["IdIndicator_HCT"]);
                        Int64 _idIndicator_CO = Convert.ToInt64(param["IdIndicator_CO"]);
                        Int64 _idIndicator_NOx = Convert.ToInt64(param["IdIndicator_NOx"]);
                        Int64 _idIndicator_SOx = Convert.ToInt64(param["IdIndicator_SOx"]);
                        Int64 _idIndicator_PM = Convert.ToInt64(param["IdIndicator_PM"]);
                        Int64 _idIndicator_SO2 = Convert.ToInt64(param["IdIndicator_SO2"]);
                        Int64 _idIndicator_H2S = Convert.ToInt64(param["IdIndicator_H2S"]);
                        Int64 _idIndicator_PM10 = Convert.ToInt64(param["IdIndicator_PM10"]);
                        Int64 _idIndicator_C2H6 = Convert.ToInt64(param["IdIndicator_C2H6"]);
                        Int64 _idIndicator_C3H8 = Convert.ToInt64(param["IdIndicator_C3H8"]);
                        Int64 _idIndicator_C4H10 = Convert.ToInt64(param["IdIndicator_C4H10"]);

                        //Recorro todos los Scope que me devuelve el metodo y los agrega al DT
                        foreach (Condesus.EMS.Business.RG.IGraphicBar _item in ((ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess)).Graphic_Bar.Bar_ActivityByScopeAndFacility(_idScope, _idFacility, _idIndicator_tnCO2e, _idIndicator_CO2,
                                            _idIndicator_CH4, _idIndicator_N2O, _idIndicator_PFC, _idIndicator_HFC, _idIndicator_SF6, _idIndicator_HCT,
                                            _idIndicator_HCNM, _idIndicator_C2H6, _idIndicator_C3H8, _idIndicator_C4H10, _idIndicator_CO, _idIndicator_NOx,
                                            _idIndicator_SOx, _idIndicator_SO2, _idIndicator_H2S, _idIndicator_PM, _idIndicator_PM10, _startDate, _endDate))
                        {
                            AccountingActivity _activity = EMSLibrary.User.PerformanceAssessments.Configuration.AccountingActivity(_item.Id);
                            String _activityName = String.Empty;
                            if (_activity.Parent != null)
                            {
                                _activityName = _activity.Parent.LanguageOption.Name + " - " + _item.Name;
                            }
                            else
                            {
                                _activityName = _item.Name;
                            }
                            //Inserta el total para cada columna
                            _dt.Rows.Add(_activityName,
                                _item.Result_HCNM,
                                _item.Result_HCT,
                                _item.Result_CO,
                                _item.Result_NOx,
                                _item.Result_SOx,
                                _item.Result_PM,
                                _item.Result_SO2,
                                _item.Result_H2S,
                                _item.Result_PM10,
                                _item.Result_C2H6,
                                _item.Result_C3H8,
                                _item.Result_C4H10);
                        }

                        return _dt;
                    }
                #endregion


                #region Totals
                private void BuildColumChartTransformationTotalGas(ref DataTable dt)
                    {
                        //Contruye las columnas y sus atributos.
                        ColumnOptions _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "Name";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "Name", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "Value";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "Value", _columnOptions);
                    }
                    public DataTable ChartTransformationTotalGases(Dictionary<String, Object> param)
                    {   
                        //Construye el datatable
                        DataTable _dt = BuildDataTable("ReportTransformationTotalGases");

                        BuildColumChartTransformationTotalGas(ref _dt);

                        DateTime? _startDate = null;
                        DateTime? _endDate = null;
                        if (param["StartDate"] != null)
                        { _startDate = Convert.ToDateTime(param["StartDate"]); }
                        if (param["EndDate"] != null)
                        { _endDate = Convert.ToDateTime(param["EndDate"]); }

                        Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
                        Int64 _idScope = Convert.ToInt64(param["IdScope"]); ;
                        //Int64 _idIndicator_tnCO2e = Convert.ToInt64(param["IdIndicator_tnCO2e"]);
                        Int64 _idIndicator_CO2 = Convert.ToInt64(param["IdIndicator_CO2"]);
                        Int64 _idIndicator_CH4 = Convert.ToInt64(param["IdIndicator_CH4"]);
                        Int64 _idIndicator_N2O = Convert.ToInt64(param["IdIndicator_N2O"]);
                        Int64 _idIndicator_PFC = Convert.ToInt64(param["IdIndicator_PFC"]);
                        Int64 _idIndicator_HFC = Convert.ToInt64(param["IdIndicator_HFC"]);
                        Int64 _idIndicator_SF6 = Convert.ToInt64(param["IdIndicator_SF6"]);

                        Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
                        AccountingScope _accountingScope = EMSLibrary.User.PerformanceAssessments.Configuration.AccountingScope(_idScope);

                        //Indicator _indicator_tnCO2e = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_tnCO2e);
                        Indicator _indicator_CO2 = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_CO2);
                        Indicator _indicator_CH4 = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_CH4);
                        Indicator _indicator_N2O = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_N2O);
                        Indicator _indicator_PFC = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_PFC);
                        Indicator _indicator_HFC = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_HFC);
                        Indicator _indicator_SF6 = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_SF6);

                        //Decimal _total_tnCO2eByActivity = 0;
                        Decimal _total_CO2ByActivity = 0;
                        Decimal _total_CH4ByActivity = 0;
                        Decimal _total_N2OByActivity = 0;
                        Decimal _total_PFCByActivity = 0;
                        Decimal _total_HFCByActivity = 0;
                        Decimal _total_SF6ByActivity = 0;

                        //Se busca los Accounting que tengan relacion con la organizacion.
                        GetAllAccountingActivityRootByOrganization(EMSLibrary.User.PerformanceAssessments.Configuration.AccountingActivities(), _organization);
                        //Recorre todas las Activities, solo las ROOTs
                        var _lnqAccountingActivities = from aa in _AccountingActivitiesParents.Values
                                                       where aa.IdParentActivity == 0 //Recorre todas las Activities, solo las ROOTs
                                                       select aa;
                        //Recorre todas las Activities, solo las ROOTs
                        //foreach (AccountingActivity _accountingActivityRoot in EMSLibrary.User.PerformanceAssessments.Configuration.AccountingActivities().Values)
                        foreach (AccountingActivity _accountingActivity in _lnqAccountingActivities)
                        {
                            _total_CO2ByActivity += _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_CO2, _startDate, _endDate);
                            _total_CH4ByActivity += _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_CH4, _startDate, _endDate);
                            _total_N2OByActivity += _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_N2O, _startDate, _endDate);
                            _total_PFCByActivity += _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_PFC, _startDate, _endDate);
                            _total_HFCByActivity += _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_HFC, _startDate, _endDate);
                            _total_SF6ByActivity += _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_SF6, _startDate, _endDate);
                        }

                        //tnCO2e    //CO2   //CH4   //N2O   //PFC   //HFC   //SF6

                        //Inserta el total para cada columna
                        //_dt.Rows.Add("tnCO2e", _total_tnCO2eByActivity);
                        _dt.Rows.Add("CO2", _total_CO2ByActivity);
                        _dt.Rows.Add("CH4", _total_CH4ByActivity);
                        _dt.Rows.Add("N2O", _total_N2OByActivity);
                        _dt.Rows.Add("PFC", _total_PFCByActivity);
                        _dt.Rows.Add("HFC", _total_HFCByActivity);
                        _dt.Rows.Add("SF6", _total_SF6ByActivity);

                        return _dt;
                    }

                    private void BuildColumChartTransformationTotaltnCO2ByActivity(ref DataTable dt)
                    {
                        //Contruye las columnas y sus atributos.
                        ColumnOptions _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = Resources.CommonListManage.AccountingActivity;
                        _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = true;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, Resources.CommonListManage.AccountingActivity, _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "tnCO2e";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "tnCO2e", _columnOptions);
                    }
                    public DataTable ChartTransformationTotaltnCO2ByActivity(Dictionary<String, Object> param)
                    {
                        //Construye el datatable
                        DataTable _dt = BuildDataTable("ReportTransformationTotaltnCO2ByActivity");

                        BuildColumChartTransformationTotaltnCO2ByActivity(ref _dt);

                        DateTime? _startDate = null;
                        DateTime? _endDate = null;
                        if (param["StartDate"] != null)
                        { _startDate = Convert.ToDateTime(param["StartDate"]); }
                        if (param["EndDate"] != null)
                        { _endDate = Convert.ToDateTime(param["EndDate"]); }

                        Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
                        Int64 _idScope = Convert.ToInt64(param["IdScope"]); ;
                        Int64 _idIndicator_tnCO2e = Convert.ToInt64(param["IdIndicator_tnCO2e"]);

                        Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
                        AccountingScope _accountingScope = EMSLibrary.User.PerformanceAssessments.Configuration.AccountingScope(_idScope);

                        Indicator _indicator_tnCO2e = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_tnCO2e);

                        Decimal _total_tnCO2eByActivity = 0;

                        //Se busca los Accounting que tengan relacion con la organizacion.
                        GetAllAccountingActivityRootByOrganization(EMSLibrary.User.PerformanceAssessments.Configuration.AccountingActivities(), _organization);
                        //Recorre todas las Activities, solo las ROOTs
                        var _lnqAccountingActivities = from aa in _AccountingActivitiesParents.Values
                                                       where aa.IdParentActivity == 0 //Recorre todas las Activities, solo las ROOTs
                                                       select aa;
                        //foreach (AccountingActivity _accountingActivity in EMSLibrary.User.PerformanceAssessments.Configuration.AccountingActivities().Values)
                        foreach (AccountingActivity _accountingActivity in _lnqAccountingActivities)
                        {
                            foreach (AccountingActivity _activityChildren in _accountingActivity.Childrens.Values)
                            {
                                _total_tnCO2eByActivity = _activityChildren.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_tnCO2e, _startDate, _endDate);

                                String _activityName = _accountingActivity.LanguageOption.Name + " - " + _activityChildren.LanguageOption.Name;
                                _dt.Rows.Add(_activityName, _total_tnCO2eByActivity);
                            }
                        }

                        return _dt;
                    }
                #endregion

                #region Details
                    private void BuildColumChartTransformationTotalGasByActivity(ref DataTable dt)
                    {
                        //Contruye las columnas y sus atributos.
                        ColumnOptions _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = Resources.CommonListManage.AccountingActivity;
                        _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = true;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "AccountingActivity", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "CO2";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "CO2", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "CH4";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "CH4", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "N2O";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "N2O", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "PFC";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "PFC", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "HFC";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "HFC", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "SF6";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "SF6", _columnOptions);
                    }
                    public DataTable ChartTransformationTotalGasByActivity(Dictionary<String, Object> param)
                    {   
                        //Construye el datatable
                        DataTable _dt = BuildDataTable("ReportTransformationTotalGasesByActivity");

                        BuildColumChartTransformationTotalGasByActivity(ref _dt);

                        DateTime? _startDate = null;
                        DateTime? _endDate = null;
                        if (param["StartDate"] != null)
                        { _startDate = Convert.ToDateTime(param["StartDate"]); }
                        if (param["EndDate"] != null)
                        { _endDate = Convert.ToDateTime(param["EndDate"]); }

                        Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
                        Int64 _idScope = Convert.ToInt64(param["IdScope"]); ;
                        Int64 _idIndicator_CO2 = Convert.ToInt64(param["IdIndicator_CO2"]);
                        Int64 _idIndicator_CH4 = Convert.ToInt64(param["IdIndicator_CH4"]);
                        Int64 _idIndicator_N2O = Convert.ToInt64(param["IdIndicator_N2O"]);
                        Int64 _idIndicator_PFC = Convert.ToInt64(param["IdIndicator_PFC"]);
                        Int64 _idIndicator_HFC = Convert.ToInt64(param["IdIndicator_HFC"]);
                        Int64 _idIndicator_SF6 = Convert.ToInt64(param["IdIndicator_SF6"]);

                        Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
                        AccountingScope _accountingScope = EMSLibrary.User.PerformanceAssessments.Configuration.AccountingScope(_idScope);

                        Indicator _indicator_CO2 = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_CO2);
                        Indicator _indicator_CH4 = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_CH4);
                        Indicator _indicator_N2O = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_N2O);
                        Indicator _indicator_PFC = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_PFC);
                        Indicator _indicator_HFC = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_HFC);
                        Indicator _indicator_SF6 = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_SF6);

                        //Decimal _total_tnCO2eByActivity = 0;
                        Decimal _total_CO2ByActivity = 0;
                        Decimal _total_CH4ByActivity = 0;
                        Decimal _total_N2OByActivity = 0;
                        Decimal _total_PFCByActivity = 0;
                        Decimal _total_HFCByActivity = 0;
                        Decimal _total_SF6ByActivity = 0;

                        //Se busca los Accounting que tengan relacion con la organizacion.
                        GetAllAccountingActivityRootByOrganization(EMSLibrary.User.PerformanceAssessments.Configuration.AccountingActivities(), _organization);
                        //Recorre todas las Activities, solo las ROOTs
                        var _lnqAccountingActivities = from aa in _AccountingActivitiesParents.Values
                                                       where aa.IdParentActivity == 0 //Recorre todas las Activities, solo las ROOTs
                                                       select aa;
                        foreach (AccountingActivity _accountingActivity in _lnqAccountingActivities)
                        {
                            _total_CO2ByActivity = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_CO2, _startDate, _endDate);
                            _total_CH4ByActivity = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_CH4, _startDate, _endDate);
                            _total_N2OByActivity = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_N2O, _startDate, _endDate);
                            _total_PFCByActivity = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_PFC, _startDate, _endDate);
                            _total_HFCByActivity = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_HFC, _startDate, _endDate);
                            _total_SF6ByActivity = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_SF6, _startDate, _endDate);

                            _dt.Rows.Add(_accountingActivity.LanguageOption.Name,
                                _total_CO2ByActivity, 
                                _total_CH4ByActivity, 
                                _total_N2OByActivity, 
                                _total_PFCByActivity, 
                                _total_HFCByActivity, 
                                _total_SF6ByActivity);

                        }

                        return _dt;
                    }

                    private void BuildColumChartTransformationTotalActivityByGas(ref DataTable dt)
                    {
                        //Contruye las columnas y sus atributos.
                        ColumnOptions _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "Name";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "Name", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "AccountingActivity";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "AccountingActivity", _columnOptions);

                        _columnOptions = new ColumnOptions();
                        _columnOptions.ColumnCaption = "Value";
                        _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
                        _columnOptions.IsPrimaryKey = false;
                        _columnOptions.DisplayInCombo = false;
                        _columnOptions.DisplayInManage = true;
                        _columnOptions.IsSearchable = false;
                        _columnOptions.AllowNull = false;
                        _columnOptions.IsContextMenuCaption = false;
                        _columnOptions.IsSortedBy = false;
                        BuildColumnsDataTable(ref dt, "Value", _columnOptions);
                    }
                    public DataTable ChartTransformationTotalActivityByGas(Dictionary<String, Object> param)
                    {
                        //Construye el datatable
                        DataTable _dt = BuildDataTable("ReportTransformationTotalGases");

                        BuildColumChartTransformationTotalActivityByGas(ref _dt);

                        DateTime? _startDate = null;
                        DateTime? _endDate = null;
                        if (param["StartDate"] != null)
                        { _startDate = Convert.ToDateTime(param["StartDate"]); }
                        if (param["EndDate"] != null)
                        { _endDate = Convert.ToDateTime(param["EndDate"]); }

                        Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
                        Int64 _idScope = Convert.ToInt64(param["IdScope"]); ;
                        //Int64 _idIndicator_tnCO2e = Convert.ToInt64(param["IdIndicator_tnCO2e"]);
                        Int64 _idIndicator_CO2 = Convert.ToInt64(param["IdIndicator_CO2"]);
                        Int64 _idIndicator_CH4 = Convert.ToInt64(param["IdIndicator_CH4"]);
                        Int64 _idIndicator_N2O = Convert.ToInt64(param["IdIndicator_N2O"]);
                        Int64 _idIndicator_PFC = Convert.ToInt64(param["IdIndicator_PFC"]);
                        Int64 _idIndicator_HFC = Convert.ToInt64(param["IdIndicator_HFC"]);
                        Int64 _idIndicator_SF6 = Convert.ToInt64(param["IdIndicator_SF6"]);

                        Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
                        AccountingScope _accountingScope = EMSLibrary.User.PerformanceAssessments.Configuration.AccountingScope(_idScope);

                        //Indicator _indicator_tnCO2e = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_tnCO2e);
                        Indicator _indicator_CO2 = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_CO2);
                        Indicator _indicator_CH4 = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_CH4);
                        Indicator _indicator_N2O = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_N2O);
                        Indicator _indicator_PFC = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_PFC);
                        Indicator _indicator_HFC = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_HFC);
                        Indicator _indicator_SF6 = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_SF6);

                        //Decimal _total_tnCO2eByActivity = 0;
                        Decimal _total_CO2ByActivity = 0;
                        Decimal _total_CH4ByActivity = 0;
                        Decimal _total_N2OByActivity = 0;
                        Decimal _total_PFCByActivity = 0;
                        Decimal _total_HFCByActivity = 0;
                        Decimal _total_SF6ByActivity = 0;

                        //Se busca los Accounting que tengan relacion con la organizacion.
                        GetAllAccountingActivityRootByOrganization(EMSLibrary.User.PerformanceAssessments.Configuration.AccountingActivities(), _organization);
                        //Recorre todas las Activities, solo las ROOTs
                        var _lnqAccountingActivities = from aa in _AccountingActivitiesParents.Values
                                                       where aa.IdParentActivity == 0 //Recorre todas las Activities, solo las ROOTs
                                                       select aa;
                        //Recorre todas las Activities, solo las ROOTs
                        //foreach (AccountingActivity _accountingActivityRoot in EMSLibrary.User.PerformanceAssessments.Configuration.AccountingActivities().Values)
                        foreach (AccountingActivity _accountingActivityRoot in _lnqAccountingActivities)
                        {
                            foreach (AccountingActivity _accountingActivity in _accountingActivityRoot.Childrens.Values)
                            {
                                //_total_tnCO2eByActivity = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_tnCO2e, _startDate, _endDate);
                                _total_CO2ByActivity = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_CO2, _startDate, _endDate);
                                _total_CH4ByActivity = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_CH4, _startDate, _endDate);
                                _total_N2OByActivity = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_N2O, _startDate, _endDate);
                                _total_PFCByActivity = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_PFC, _startDate, _endDate);
                                _total_HFCByActivity = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_HFC, _startDate, _endDate);
                                _total_SF6ByActivity = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_SF6, _startDate, _endDate);

                                String _activityName = _accountingActivityRoot.LanguageOption.Name + " - " + _accountingActivity.LanguageOption.Name;
                                //Inserta el total para cada columna
                                //_dt.Rows.Add("tnCO2e", _activityName, _total_tnCO2eByActivity);
                                _dt.Rows.Add("CO2", _activityName, _total_CO2ByActivity);
                                _dt.Rows.Add("CH4", _activityName, _total_CH4ByActivity);
                                _dt.Rows.Add("N2O", _activityName, _total_N2OByActivity);
                                _dt.Rows.Add("PFC", _activityName, _total_PFCByActivity);
                                _dt.Rows.Add("HFC", _activityName, _total_HFCByActivity);
                                _dt.Rows.Add("SF6", _activityName, _total_SF6ByActivity);

                            }
                        }
                        //tnCO2e    //CO2   //CH4   //N2O   //PFC   //HFC   //SF6


                        return _dt;
                    }
                #endregion

            #endregion

                //public DataTable ChartTransformationTotalActivityByGasNew(Dictionary<String, Object> param)
            //{
            //    //Construye el datatable
            //    DataTable _dt = BuildDataTable("ReportTransformationTotalActivityByGas");

            //    BuildColumChartTransformationTotalGasByActivity(ref _dt);

            //    DateTime? _startDate = null;
            //    DateTime? _endDate = null;
            //    if (param["StartDate"] != null)
            //    { _startDate = Convert.ToDateTime(param["StartDate"]); }
            //    if (param["EndDate"] != null)
            //    { _endDate = Convert.ToDateTime(param["EndDate"]); }

            //    Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
            //    Int64 _idScope = Convert.ToInt64(param["IdScope"]); ;
            //    Int64 _idIndicator_tnCO2e = Convert.ToInt64(param["IdIndicator_tnCO2e"]);
            //    Int64 _idIndicator_CO2 = Convert.ToInt64(param["IdIndicator_CO2"]);
            //    Int64 _idIndicator_CH4 = Convert.ToInt64(param["IdIndicator_CH4"]);
            //    Int64 _idIndicator_N2O = Convert.ToInt64(param["IdIndicator_N2O"]);
            //    Int64 _idIndicator_PFC = Convert.ToInt64(param["IdIndicator_PFC"]);
            //    Int64 _idIndicator_HFC = Convert.ToInt64(param["IdIndicator_HFC"]);
            //    Int64 _idIndicator_SF6 = Convert.ToInt64(param["IdIndicator_SF6"]);

            //    Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
            //    AccountingScope _accountingScope = EMSLibrary.User.PerformanceAssessments.Configuration.AccountingScope(_idScope);

            //    Indicator _indicator_tnCO2e = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_tnCO2e);
            //    Indicator _indicator_CO2 = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_CO2);
            //    Indicator _indicator_CH4 = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_CH4);
            //    Indicator _indicator_N2O = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_N2O);
            //    Indicator _indicator_PFC = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_PFC);
            //    Indicator _indicator_HFC = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_HFC);
            //    Indicator _indicator_SF6 = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_SF6);

            //    Decimal _total_tnCO2eByActivity = 0;
            //    Decimal _total_CO2ByActivity = 0;
            //    Decimal _total_CH4ByActivity = 0;
            //    Decimal _total_N2OByActivity = 0;
            //    Decimal _total_PFCByActivity = 0;
            //    Decimal _total_HFCByActivity = 0;
            //    Decimal _total_SF6ByActivity = 0;

            //    //Recorre todas las Activities, solo las ROOTs
            //    foreach (AccountingActivity _accountingActivity in EMSLibrary.User.PerformanceAssessments.Configuration.AccountingActivities().Values)
            //    {
            //        _total_tnCO2eByActivity = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_tnCO2e, _startDate, _endDate);
            //        _total_CO2ByActivity = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_CO2, _startDate, _endDate);
            //        _total_CH4ByActivity = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_CH4, _startDate, _endDate);
            //        _total_N2OByActivity = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_N2O, _startDate, _endDate);
            //        _total_PFCByActivity = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_PFC, _startDate, _endDate);
            //        _total_HFCByActivity = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_HFC, _startDate, _endDate);
            //        _total_SF6ByActivity = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_SF6, _startDate, _endDate);

            //        String _activityName = _accountingActivity.LanguageOption.Name;
            //        _dt.Rows.Add(_accountingActivity.LanguageOption.Name,
            //            _total_tnCO2eByActivity + 5, _total_CO2ByActivity + 3, _total_CH4ByActivity + 1,
            //            _total_N2OByActivity + 12, _total_PFCByActivity + 9, _total_HFCByActivity + 6, _total_SF6ByActivity + 5);
            //    }

            //    return _dt;
            //}
            //public DataTable Prueba(Dictionary<String, Object> param)
            //{
            //    //Construye el datatable
            //    DataTable _dt = BuildDataTable("ReportTransformationTotalGasesByActivity");

            //    //Contruye las columnas y sus atributos.
            //    ColumnOptions _columnOptions = new ColumnOptions();
            //    _columnOptions.ColumnCaption = "Year";
            //    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            //    _columnOptions.IsPrimaryKey = false;
            //    _columnOptions.DisplayInCombo = false;
            //    _columnOptions.DisplayInManage = true;
            //    _columnOptions.IsSearchable = false;
            //    _columnOptions.AllowNull = true;
            //    _columnOptions.IsContextMenuCaption = false;
            //    _columnOptions.IsSortedBy = false;
            //    BuildColumnsDataTable(ref _dt, "Year", _columnOptions);

            //    _columnOptions = new ColumnOptions();
            //    _columnOptions.ColumnCaption = "Quarter";
            //    _columnOptions.ColumnDataType = System.Type.GetType("System.String");
            //    _columnOptions.IsPrimaryKey = false;
            //    _columnOptions.DisplayInCombo = false;
            //    _columnOptions.DisplayInManage = true;
            //    _columnOptions.IsSearchable = false;
            //    _columnOptions.AllowNull = true;
            //    _columnOptions.IsContextMenuCaption = false;
            //    _columnOptions.IsSortedBy = false;
            //    BuildColumnsDataTable(ref _dt, "Quarter", _columnOptions);
                
            //    _columnOptions = new ColumnOptions();
            //    _columnOptions.ColumnCaption = "Value";
            //    _columnOptions.ColumnDataType = System.Type.GetType("System.Decimal");
            //    _columnOptions.IsPrimaryKey = false;
            //    _columnOptions.DisplayInCombo = false;
            //    _columnOptions.DisplayInManage = true;
            //    _columnOptions.IsSearchable = false;
            //    _columnOptions.AllowNull = true;
            //    _columnOptions.IsContextMenuCaption = false;
            //    _columnOptions.IsSortedBy = false;
            //    BuildColumnsDataTable(ref _dt, "Value", _columnOptions);

            //    _dt.Rows.Add("2007", "Q1", 5);
            //    _dt.Rows.Add("2007", "Q2", 2);
            //    _dt.Rows.Add("2007", "Q3", 3);
            //    _dt.Rows.Add("2007", "Q4", 1);
            //    _dt.Rows.Add("2008", "Q1", 4);
            //    _dt.Rows.Add("2008", "Q2", 3);
            //    _dt.Rows.Add("2008", "Q3", 8);
            //    _dt.Rows.Add("2008", "Q4", 2);

            //    return _dt;
            //}
            //public DataTable ReportTransformationByScopeNEw(Dictionary<String, Object> param)
            //{
            //    //Construye el datatable
            //    DataTable _dt = BuildDataTable("ReportTransformationByScope");

            //    BuildColumReportTransformation(ref _dt);

            //    //Estas son las columnas
            //    //IdActivity    //AccountingActivity
            //    //IdFacility    //Facility
            //    //IdIndicator   //Indicator
            //    //tnCO2e    //CO2   //CH4   //N2O   //PFC   //HFC   //SF6

            //    DateTime? _startDate = null;
            //    DateTime? _endDate = null;
            //    if (param["StartDate"] != null)
            //    { _startDate = Convert.ToDateTime(param["StartDate"]); }
            //    if (param["EndDate"] != null)
            //    { _endDate = Convert.ToDateTime(param["EndDate"]); }

            //    Int64 _idOrganization = Convert.ToInt64(param["IdOrganization"]);
            //    Int64 _idScope = Convert.ToInt64(param["IdScope"]); ;
            //    Int64 _idIndicator_tnCO2e = Convert.ToInt64(param["IdIndicator_tnCO2e"]);
            //    Int64 _idIndicator_CO2 = Convert.ToInt64(param["IdIndicator_CO2"]);
            //    Int64 _idIndicator_CH4 = Convert.ToInt64(param["IdIndicator_CH4"]);
            //    Int64 _idIndicator_N2O = Convert.ToInt64(param["IdIndicator_N2O"]);
            //    Int64 _idIndicator_PFC = Convert.ToInt64(param["IdIndicator_PFC"]);
            //    Int64 _idIndicator_HFC = Convert.ToInt64(param["IdIndicator_HFC"]);
            //    Int64 _idIndicator_SF6 = Convert.ToInt64(param["IdIndicator_SF6"]);

            //    Decimal _result_tnCO2e = 0;
            //    Decimal _result_CO2 = 0;
            //    Decimal _result_CH4 = 0;
            //    Decimal _result_N2O = 0;
            //    Decimal _result_PFC = 0;
            //    Decimal _result_HFC = 0;
            //    Decimal _result_SF6 = 0;
            //    Decimal _sum_tnCO2e = 0;
            //    Decimal _sum_CO2 = 0;
            //    Decimal _sum_CH4 = 0;
            //    Decimal _sum_N2O = 0;
            //    Decimal _sum_PFC = 0;
            //    Decimal _sum_HFC = 0;
            //    Decimal _sum_SF6 = 0;


            //    Indicator _indicator = null;
            //    Organization _organization = EMSLibrary.User.DirectoryServices.Map.Organization(_idOrganization);
            //    AccountingScope _accountingScope = EMSLibrary.User.PerformanceAssessments.Configuration.AccountingScope(_idScope);

            //    //Construye el dictionary de actividades completas!!!
            //    BuildAllAccountingActivity(EMSLibrary.User.PerformanceAssessments.Configuration.AccountingActivities());

            //    Indicator _indicator_tnCO2e = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_tnCO2e);
            //    Indicator _indicator_CO2 = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_CO2);
            //    Indicator _indicator_CH4 = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_CH4);
            //    Indicator _indicator_N2O = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_N2O);
            //    Indicator _indicator_PFC = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_PFC);
            //    Indicator _indicator_HFC = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_HFC);
            //    Indicator _indicator_SF6 = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_SF6);

            //    //Recorre todas las Activities
            //    foreach (AccountingActivity _accountingActivity in _AccountingActivities.Values)
            //    {
            //        Decimal _total_tnCO2eByActivity = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_tnCO2e, _startDate, _endDate);
            //        Decimal _total_CO2ByActivity = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_CO2, _startDate, _endDate);
            //        Decimal _total_CH4ByActivity = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_CH4, _startDate, _endDate);
            //        Decimal _total_N2OByActivity = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_N2O, _startDate, _endDate);
            //        Decimal _total_PFCByActivity = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_PFC, _startDate, _endDate);
            //        Decimal _total_HFCByActivity = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_HFC, _startDate, _endDate);
            //        Decimal _total_SF6ByActivity = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_SF6, _startDate, _endDate);

            //        //Se trae los facilities de la actividad para la organizacion seleccionada
            //        Dictionary<Int64, Facility> _facilities = _accountingActivity.Facilities(_organization);
            //        Int64? _idParentActivity;
            //        if (_accountingActivity.IdParentActivity == 0)
            //            { _idParentActivity = null; }
            //        else
            //            { _idParentActivity = _accountingActivity.IdParentActivity; }

            //        //Inserta el total por Activity
            //        _dt.Rows.Add(_accountingActivity.IdActivity,
            //            _idParentActivity, _accountingActivity.LanguageOption.Name,
            //            null, String.Empty,
            //            null, String.Empty,
            //            _total_tnCO2eByActivity, _total_CO2ByActivity, _total_CH4ByActivity, _total_N2OByActivity, _total_PFCByActivity, _total_HFCByActivity, _total_SF6ByActivity);


            //        //Recorre todos los facilities
            //        foreach (Facility _facility in _facilities.Values)
            //        {
            //            Decimal _total_tnCO2eByFacility = _facility.ReadTotalMeasurementResultByIndicator(_accountingScope, _accountingActivity, _indicator_tnCO2e, _startDate, _endDate);
            //            Decimal _total_CO2ByFacility = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_CO2, _startDate, _endDate);
            //            Decimal _total_CH4ByFacility = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_CH4, _startDate, _endDate);
            //            Decimal _total_N2OByFacility = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_N2O, _startDate, _endDate);
            //            Decimal _total_PFCByFacility = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_PFC, _startDate, _endDate);
            //            Decimal _total_HFCByFacility = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_HFC, _startDate, _endDate);
            //            Decimal _total_SF6ByFacility = _accountingActivity.ReadTotalMeasurementResultByIndicator(_accountingScope, _indicator_SF6, _startDate, _endDate);

            //            //Inserta el total por Activity
            //            _dt.Rows.Add(_accountingActivity.IdActivity,
            //                _idParentActivity, _accountingActivity.LanguageOption.Name,
            //                _facility.IdFacility, _facility.LanguageOption.Name,
            //                null, String.Empty,
            //                _total_tnCO2eByFacility, _total_CO2ByFacility, _total_CH4ByFacility, _total_N2OByFacility, _total_PFCByFacility, _total_HFCByFacility, _total_SF6ByFacility);

            //            //Se trae las mediciones para cada facility del scope seleccionado
            //            Dictionary<Int64, Measurement> _measurements = _facility.Measurements(_accountingScope, _accountingActivity);

            //            //Recorre las mediciones
            //            foreach (Measurement _measurement in _measurements.Values)
            //            {
            //                //Obtiene el resultado para cada columna
            //                _indicator = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_tnCO2e);
            //                _result_tnCO2e = _measurement.ResultTransformationByIndicator(_indicator, _startDate, _endDate);
            //                _result_tnCO2e = 1;

            //                _indicator = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_CO2);
            //                _result_CO2 = _measurement.ResultTransformationByIndicator(_indicator, _startDate, _endDate);

            //                _indicator = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_CH4);
            //                _result_CH4 = _measurement.ResultTransformationByIndicator(_indicator, _startDate, _endDate);

            //                _indicator = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_N2O);
            //                _result_N2O = _measurement.ResultTransformationByIndicator(_indicator, _startDate, _endDate);

            //                _indicator = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_PFC);
            //                _result_PFC = _measurement.ResultTransformationByIndicator(_indicator, _startDate, _endDate);

            //                _indicator = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_HFC);
            //                _result_HFC = _measurement.ResultTransformationByIndicator(_indicator, _startDate, _endDate);

            //                _indicator = EMSLibrary.User.PerformanceAssessments.Map.Indicator(_idIndicator_SF6);
            //                _result_SF6 = _measurement.ResultTransformationByIndicator(_indicator, _startDate, _endDate);


            //                //Inserta la medicion y los valores de su transformacion...
            //                _dt.Rows.Add(_accountingActivity.IdActivity,
            //                    _idParentActivity, _accountingActivity.LanguageOption.Name,
            //                    _facility.IdFacility, _facility.LanguageOption.Name,
            //                    _measurement.IdMeasurement, _measurement.LanguageOption.Name,
            //                    _result_tnCO2e, _result_CO2, _result_CH4, _result_N2O, _result_PFC, _result_HFC, _result_SF6);

            //            }
            //        }
            //    }

            //    //Retorna el DataTable
            //    return _dt;
            //}

            //Este metodo queda comentado, es para hacer pruebas con los textos o cantidad de registros.
            //public DataTable ReportTransformationByScope(Dictionary<String, Object> param)
            //{
            //    //Construye el datatable
            //    DataTable _dt = BuildDataTable("ReportTransformationByScope");

            //    BuildColumReportTransformation(ref _dt);

            //    //Estas son las columnas
            //    //IdActivity    //AccountingActivity
            //    //IdFacility    //Facility
            //    //IdIndicator   //Indicator
            //    //tnCO2e    //CO2   //CH4   //N2O   //PFC   //HFC   //SF6



            //    _dt.Rows.Add(1, null, "Activity 1", null, String.Empty, null, String.Empty, 94307, 0, 833, 237, 0, 0, 0);
            //    _dt.Rows.Add(2, 1, "Activity 1.1", null, String.Empty, null, String.Empty, 84875, 0, 799, 237, 0, 0, 0);
            //    _dt.Rows.Add(3, 2, "Aca voy a poner un texto mas largo para ver como queda por si la moscas", 1, "Facility con mas texto que de costumbre", 1, "Indicador con mas texto que de costumbre", 346341234, 32443554, 435353, 346323, 346363, 43534534, 435636);
            //    _dt.Rows.Add(3, 2, String.Empty, 1, String.Empty, 2, "Indicator Y", 65443, 0, 765, 0, 0, 0, 0);
            //    _dt.Rows.Add(3, 2, String.Empty, 2, "Facility B", 3, "Indicator Z", 8766, 0, 0, 3, 0, 0, 0);

            //    _dt.Rows.Add(4, 1, "Activity 1.2", 1, "Facility A", 4, "Indicator N", 9087, 2345, 0, 0, 0, 3, 0);
            //    _dt.Rows.Add(4, 1, String.Empty, 1, String.Empty, 5, "Indicator I", 345, 0, 0, 0, 0, 3343, 0);

            //    _dt.Rows.Add(5, null, "Activity 2", null, String.Empty, null, String.Empty, 8765, 0, 0, 0, 0, 234, 0);
            //    _dt.Rows.Add(6, 5, "Activity 2.1", 3, "Facility C", 1, "Indicator X", 8765, 0, 0, 0, 0, 234, 0);

            //    //Retorna el DataTable
            //    return _dt;
            //}

            #region Private Methods for Report Transformations
                /// <summary>
                /// Arma un dictionary con todos los AccountingActivities
                /// </summary>
                /// <param name="childrens"></param>
                private void BuildAllAccountingActivity(Dictionary<Int64, AccountingActivity> childrens)
                {
                    foreach (AccountingActivity _accountingActivity in childrens.Values)
                    {
                        _AccountingActivities.Add(_accountingActivity.IdActivity, _accountingActivity);
                        BuildAllAccountingActivity(_accountingActivity.Childrens);
                    }
                }
                /// <summary>
                /// Arma un dictionary con todos los AccountingActivities
                /// </summary>
                /// <param name="childrens"></param>
                private void BuildAllAccountingActivity(Dictionary<Int64, AccountingActivity> childrens, Organization organization)
                {
                    foreach (AccountingActivity _accountingActivity in childrens.Values)
                    {
                        if (_accountingActivity.Facilities(organization).Count > 0)
                        {
                            _AccountingActivities.Add(_accountingActivity.IdActivity, _accountingActivity);
                        }
                        BuildAllAccountingActivity(_accountingActivity.Childrens, organization);
                    }
                }
                /// <summary>
                /// Arma un dictionary con los accountingActivities que son familiares directo del source
                /// </summary>
                /// <param name="accountingActivitySource"></param>
                private void GetParentsAccountingActivity(AccountingActivity accountingActivitySource)
                {
                    if (accountingActivitySource.Parent != null)
                    {
                        //Si no existe lo carga!
                        if (!_AccountingActivitiesParents.ContainsKey(accountingActivitySource.Parent.IdActivity))
                        {
                            _AccountingActivitiesParents.Add(accountingActivitySource.Parent.IdActivity, accountingActivitySource.Parent);
                        }
                        GetParentsAccountingActivity(accountingActivitySource.Parent);
                    }
                }
                /// <summary>
                /// Recorre todos los activities y se queda con los que tienen relacion con la organizacion. finalmente usa _AccountingActivitiesParents
                /// </summary>
                /// <param name="accountingActivities"></param>
                /// <param name="organization"></param>
                private void GetAllAccountingActivityRootByOrganization(Dictionary<Int64, AccountingActivity> accountingActivities, Organization organization)
                {
                    _AccountingActivities = new Dictionary<Int64, AccountingActivity>();
                    BuildAllAccountingActivity(accountingActivities, organization);

                    _AccountingActivitiesParents = new Dictionary<Int64, AccountingActivity>();
                    foreach (AccountingActivity _accountingActivity in _AccountingActivities.Values)
                    {
                        GetParentsAccountingActivity(_accountingActivity);
                    }

                }
            #endregion


        #region Indicator Tracker
            private void BuildColumnrptIndicatorTracker(ref DataTable dt)
            {
                //Contruye las columnas y sus atributos.
                ColumnOptions _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdFacility;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = false;
                _columnOptions.IsSortedBy = false;
                BuildColumnsDataTable(ref dt, "IdFacility", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdMeasurement;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = false;
                _columnOptions.IsSortedBy = false;
                BuildColumnsDataTable(ref dt, "IdMeasurement", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Site;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = false;
                _columnOptions.IsSortedBy = false;
                BuildColumnsDataTable(ref dt, "Site", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Measurement;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = false;
                _columnOptions.IsSortedBy = false;
                BuildColumnsDataTable(ref dt, "Measurement", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.MeasurementUnit;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = false;
                _columnOptions.IsSortedBy = false;
                BuildColumnsDataTable(ref dt, "MeasurementUnit", _columnOptions);
            }
            public DataTable ReportIndicatorTracker(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable("ReportIndicatorTracker");

                BuildColumnrptIndicatorTracker(ref _dt);

                DateTime _startDate = (DateTime)System.Data.SqlTypes.SqlDateTime.MinValue;
                DateTime _endDate = (DateTime)System.Data.SqlTypes.SqlDateTime.MaxValue;
                if (param["StartDate"] != null)
                { _startDate = Convert.ToDateTime(param["StartDate"]); }
                if (param["EndDate"] != null)
                { _endDate = Convert.ToDateTime(param["EndDate"]); }

                Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
                Int64 _idIndicator = Convert.ToInt64(param["IdIndicator"]);
                ProcessGroupProcess _processGroupProcess = (ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess);
                FacilitiesByIndicators _facilitiesByIndicators = _processGroupProcess.FacilitiesByIndicators;

                DataRow[] _dataRow = _facilitiesByIndicators.Sites(_startDate, _endDate).Select("IdIndicator = " + _idIndicator);
                for (Int64 i = 0; i < _dataRow.Length; i++)
                {
                    _dt.Rows.Add(_dataRow[i]["IdFacility"], _dataRow[i]["IdMeasurement"], _dataRow[i]["NameSite"], _dataRow[i]["NameMeasurement"], _dataRow[i]["NameMeasurementUnit"]);
                }

                //Retorna el DataTable
                return _dt;
            }
        #endregion

        #region Facility Analyzer
            private void BuildColumnrptFacilityAnalyzer(ref DataTable dt)
            {
                //Contruye las columnas y sus atributos.
                ColumnOptions _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdFacility;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = false;
                _columnOptions.IsSortedBy = false;
                BuildColumnsDataTable(ref dt, "IdFacility", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdMeasurement;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = false;
                _columnOptions.IsSortedBy = false;
                BuildColumnsDataTable(ref dt, "IdMeasurement", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Site;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = false;
                _columnOptions.IsSortedBy = false;
                BuildColumnsDataTable(ref dt, "Site", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Measurement;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = false;
                _columnOptions.IsSortedBy = false;
                BuildColumnsDataTable(ref dt, "Measurement", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.MeasurementUnit;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = false;
                _columnOptions.IsSortedBy = false;
                BuildColumnsDataTable(ref dt, "MeasurementUnit", _columnOptions);
            }
            public DataTable ReportFacilityAnalyzer(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable("ReportFacilityAnalyzer");

                BuildColumnrptFacilityAnalyzer(ref _dt);

                DateTime _startDate = (DateTime)System.Data.SqlTypes.SqlDateTime.MinValue;
                DateTime _endDate = (DateTime)System.Data.SqlTypes.SqlDateTime.MaxValue;
                if (param["StartDate"] != null)
                { _startDate = Convert.ToDateTime(param["StartDate"]); }
                if (param["EndDate"] != null)
                { _endDate = Convert.ToDateTime(param["EndDate"]); }

                Int64 _idProcess = Convert.ToInt64(param["IdProcess"]);
                Int64 _idFacility = Convert.ToInt64(param["IdFacility"]);

                ProcessGroupProcess _processGroupProcess = (ProcessGroupProcess)EMSLibrary.User.ProcessFramework.Map.Process(_idProcess);
                FacilitiesByIndicators _facilitiesByIndicators = _processGroupProcess.FacilitiesByIndicators;

                DataRow[] _dataRow = _facilitiesByIndicators.Sites(_startDate, _endDate).Select("IdFacility= " + _idFacility);
                for (Int64 i = 0; i < _dataRow.Length; i++)
                {
                    _dt.Rows.Add(_dataRow[i]["IdFacility"], _dataRow[i]["IdMeasurement"], _dataRow[i]["NameSite"], _dataRow[i]["NameMeasurement"], _dataRow[i]["NameMeasurementUnit"]);
                }

                //Retorna el DataTable
                return _dt;
            }
        #endregion

        #region MultiObservatory
            private void BuildColumnReportMultiObservatory(ref DataTable dt)
            {
                //Contruye las columnas y sus atributos.
                ColumnOptions _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdFacility;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = false;
                _columnOptions.IsSortedBy = false;
                BuildColumnsDataTable(ref dt, "IdFacility", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.IdMeasurement;
                _columnOptions.ColumnDataType = System.Type.GetType("System.Int64");
                _columnOptions.IsPrimaryKey = true;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = false;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = false;
                _columnOptions.IsSortedBy = false;
                BuildColumnsDataTable(ref dt, "IdMeasurement", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Site;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = false;
                _columnOptions.IsSortedBy = false;
                BuildColumnsDataTable(ref dt, "Site", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.Measurement;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = false;
                _columnOptions.IsSortedBy = false;
                BuildColumnsDataTable(ref dt, "Measurement", _columnOptions);

                _columnOptions = new ColumnOptions();
                _columnOptions.ColumnCaption = Resources.CommonListManage.MeasurementUnit;
                _columnOptions.ColumnDataType = System.Type.GetType("System.String");
                _columnOptions.IsPrimaryKey = false;
                _columnOptions.DisplayInCombo = false;
                _columnOptions.DisplayInManage = true;
                _columnOptions.IsSearchable = false;
                _columnOptions.AllowNull = false;
                _columnOptions.IsContextMenuCaption = false;
                _columnOptions.IsSortedBy = false;
                BuildColumnsDataTable(ref dt, "MeasurementUnit", _columnOptions);
            }
            public DataTable ReportMultiObservatory(Dictionary<String, Object> param)
            {
                //Construye el datatable
                DataTable _dt = BuildDataTable("ReportMultiObservatory");

                BuildColumnReportMultiObservatory(ref _dt);

                DateTime _startDate = (DateTime)System.Data.SqlTypes.SqlDateTime.MinValue;
                DateTime _endDate = (DateTime)System.Data.SqlTypes.SqlDateTime.MaxValue;
                if (param["StartDate"] != null)
                { _startDate = Convert.ToDateTime(param["StartDate"]); }
                if (param["EndDate"] != null)
                { _endDate = Convert.ToDateTime(param["EndDate"]); }

                String _idProcessesFilter = Convert.ToString(param["IdProcesses"]);

                foreach (ProcessGroupProcess _processGroupProcess in EMSLibrary.User.ProcessFramework.Map.ProcessGroupProcesses().Values)
                {
                    _idProcessesFilter += _processGroupProcess.IdProcess.ToString() + ",";
                }

                if (!String.IsNullOrEmpty(_idProcessesFilter))
                {
                    _idProcessesFilter = _idProcessesFilter.Substring(0, _idProcessesFilter.Length - 1);
                }

                //foreach (DataRow  item in EMSLibrary.User.Report_MultiObservatory(_idProcessesFilter, _startDate,_endDate).Rows)
                //{
                //    //_dt.Rows.Add(_item["IdActivity"]);
                //}

                //Retorna el DataTable
                return _dt;
            }
        #endregion


        #endregion

        #endregion
    }

    public static class DataSetLinqOperators
    {
        public static DataTable CopyToDataTable<T>(this IEnumerable<T> source)
        {
            return new ObjectShredder<T>().Shred(source, null, null);
        }

        public static DataTable CopyToDataTable<T>(this IEnumerable<T> source,
                                                    DataTable table, LoadOption? options)
        {
            return new ObjectShredder<T>().Shred(source, table, options);
        }

    }

    public class ObjectShredder<T>
    {
        private FieldInfo[] _fi;
        private PropertyInfo[] _pi;
        private Dictionary<string, int> _ordinalMap;
        private Type _type;

        public ObjectShredder()
        {
            _type = typeof(T);
            _fi = _type.GetFields();
            _pi = _type.GetProperties();
            _ordinalMap = new Dictionary<string, int>();
        }

        public DataTable Shred(IEnumerable<T> source, DataTable table, LoadOption? options)
        {
            if (typeof(T).IsPrimitive)
            {
                return ShredPrimitive(source, table, options);
            }


            if (table == null)
            {
                table = new DataTable(typeof(T).Name);
            }

            // now see if need to extend datatable base on the type T + build ordinal map
            table = ExtendTable(table, typeof(T));

            table.BeginLoadData();
            using (IEnumerator<T> e = source.GetEnumerator())
            {
                while (e.MoveNext())
                {
                    if (options != null)
                    {
                        table.LoadDataRow(ShredObject(table, e.Current), (LoadOption)options);
                    }
                    else
                    {
                        table.LoadDataRow(ShredObject(table, e.Current), true);
                    }
                }
            }
            table.EndLoadData();
            return table;
        }

        public DataTable ShredPrimitive(IEnumerable<T> source, DataTable table, LoadOption? options)
        {
            if (table == null)
            {
                table = new DataTable(typeof(T).Name);
            }

            if (!table.Columns.Contains("Value"))
            {
                table.Columns.Add("Value", typeof(T));
            }

            table.BeginLoadData();
            using (IEnumerator<T> e = source.GetEnumerator())
            {
                Object[] values = new object[table.Columns.Count];
                while (e.MoveNext())
                {
                    values[table.Columns["Value"].Ordinal] = e.Current;

                    if (options != null)
                    {
                        table.LoadDataRow(values, (LoadOption)options);
                    }
                    else
                    {
                        table.LoadDataRow(values, true);
                    }
                }
            }
            table.EndLoadData();
            return table;
        }

        public DataTable ExtendTable(DataTable table, Type type)
        {
            // value is type derived from T, may need to extend table.
            foreach (FieldInfo f in type.GetFields())
            {
                if (!_ordinalMap.ContainsKey(f.Name))
                {
                    DataColumn dc = table.Columns.Contains(f.Name) ? table.Columns[f.Name]
                        : table.Columns.Add(f.Name, f.FieldType);
                    _ordinalMap.Add(f.Name, dc.Ordinal);
                }
            }
            foreach (PropertyInfo p in type.GetProperties())
            {
                if (!_ordinalMap.ContainsKey(p.Name))
                {
                    DataColumn dc = table.Columns.Contains(p.Name) ? table.Columns[p.Name]
                        : table.Columns.Add(p.Name, p.PropertyType);
                    _ordinalMap.Add(p.Name, dc.Ordinal);
                }
            }
            return table;
        }

        public object[] ShredObject(DataTable table, T instance)
        {

            FieldInfo[] fi = _fi;
            PropertyInfo[] pi = _pi;

            if (instance.GetType() != typeof(T))
            {
                ExtendTable(table, instance.GetType());
                fi = instance.GetType().GetFields();
                pi = instance.GetType().GetProperties();
            }

            Object[] values = new object[table.Columns.Count];
            foreach (FieldInfo f in fi)
            {
                values[_ordinalMap[f.Name]] = f.GetValue(instance);
            }

            foreach (PropertyInfo p in pi)
            {
                values[_ordinalMap[p.Name]] = p.GetValue(instance, null);
            }
            return values;
        }
    }

}
